package com.at.smartoffice;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: otc_v3_r5_a_plus.proto
@Deprecated
public final class OtcV3R5APlus {
  private OtcV3R5APlus() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DeviceDataV3OrBuilder extends
      // @@protoc_insertion_point(interface_extends:DeviceDataV3)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <code>uint32 sequence = 2;</code>
     */
    int getSequence();

    /**
     * <code>bool ignitionState = 3;</code>
     */
    boolean getIgnitionState();

    /**
     * <code>float odometer = 4;</code>
     */
    float getOdometer();

    /**
     * <code>uint32 rpm = 5;</code>
     */
    int getRpm();

    /**
     * <code>uint32 speed = 6;</code>
     */
    int getSpeed();

    /**
     * <code>float lat = 7;</code>
     */
    float getLat();

    /**
     * <code>float lng = 8;</code>
     */
    float getLng();

    /**
     * <code>float alt = 9;</code>
     */
    float getAlt();

    /**
     * <code>float gpsSpeed = 10;</code>
     */
    float getGpsSpeed();

    /**
     * <code>float gpsCourse = 11;</code>
     */
    float getGpsCourse();

    /**
     * <code>float gpsHDOP = 12;</code>
     */
    float getGpsHDOP();

    /**
     * <code>float gpsVDOP = 13;</code>
     */
    float getGpsVDOP();

    /**
     * <code>float gpsPDOP = 14;</code>
     */
    float getGpsPDOP();

    /**
     * <code>uint32 gpsFixModeStatus = 15;</code>
     */
    int getGpsFixModeStatus();

    /**
     * <code>uint32 satellitesUsed = 16;</code>
     */
    int getSatellitesUsed();

    /**
     * <code>uint32 nwLAC = 17;</code>
     */
    int getNwLAC();

    /**
     * <code>uint32 nwCID = 18;</code>
     */
    int getNwCID();

    /**
     * <code>string IMSI = 19;</code>
     */
    java.lang.String getIMSI();
    /**
     * <code>string IMSI = 19;</code>
     */
    com.google.protobuf.ByteString
        getIMSIBytes();

    /**
     * <code>string IMEI = 20;</code>
     */
    java.lang.String getIMEI();
    /**
     * <code>string IMEI = 20;</code>
     */
    com.google.protobuf.ByteString
        getIMEIBytes();

    /**
     * <code>uint32 RSSI = 21;</code>
     */
    int getRSSI();

    /**
     * <code>string networkOperator = 22;</code>
     */
    java.lang.String getNetworkOperator();
    /**
     * <code>string networkOperator = 22;</code>
     */
    com.google.protobuf.ByteString
        getNetworkOperatorBytes();

    /**
     * <code>uint32 T1 = 23;</code>
     */
    int getT1();

    /**
     * <code>uint32 T2 = 24;</code>
     */
    int getT2();

    /**
     * <code>uint32 T3 = 25;</code>
     */
    int getT3();

    /**
     * <code>uint32 auxBatteryVoltage = 26;</code>
     */
    int getAuxBatteryVoltage();

    /**
     * <code>uint32 auxBatteryPercentage = 27;</code>
     */
    int getAuxBatteryPercentage();

    /**
     * <code>uint32 hwVersion = 28;</code>
     */
    int getHwVersion();

    /**
     * <code>uint32 fwVersion = 29;</code>
     */
    int getFwVersion();

    /**
     * <code>uint32 sdCardSize = 30;</code>
     */
    int getSdCardSize();

    /**
     * <code>bool sdCardStatus = 31;</code>
     */
    boolean getSdCardStatus();

    /**
     * <code>uint32 motorCurrent = 32;</code>
     */
    int getMotorCurrent();

    /**
     * <code>uint32 motorRPM = 33;</code>
     */
    int getMotorRPM();

    /**
     * <code>uint32 motorTemperature = 34;</code>
     */
    int getMotorTemperature();

    /**
     * <code>uint32 motorControllerTemperature = 35;</code>
     */
    int getMotorControllerTemperature();

    /**
     * <code>uint32 motorStatusInfo = 36;</code>
     */
    int getMotorStatusInfo();

    /**
     * <code>uint32 motorErrorInfo = 37;</code>
     */
    int getMotorErrorInfo();

    /**
     * <code>uint64 batteryID = 38;</code>
     */
    long getBatteryID();

    /**
     * <code>uint32 batteryVoltage = 39;</code>
     */
    int getBatteryVoltage();

    /**
     * <code>int32 batteryCurrent = 40;</code>
     */
    int getBatteryCurrent();

    /**
     * <code>uint32 batterySoC = 41;</code>
     */
    int getBatterySoC();

    /**
     * <code>uint32 batterySoH = 42;</code>
     */
    int getBatterySoH();

    /**
     * <code>uint32 batterySOP = 43;</code>
     */
    int getBatterySOP();

    /**
     * <code>uint32 batteryCellVoltage = 44;</code>
     */
    int getBatteryCellVoltage();

    /**
     * <code>uint32 batteryModuleTemp = 45;</code>
     */
    int getBatteryModuleTemp();

    /**
     * <code>uint32 batteryPDU_BMS_Temp = 46;</code>
     */
    int getBatteryPDUBMSTemp();

    /**
     * <code>uint32 batteryCellBalMap = 47;</code>
     */
    int getBatteryCellBalMap();

    /**
     * <code>uint32 batteryEquCycleCount = 48;</code>
     */
    int getBatteryEquCycleCount();

    /**
     * <code>uint32 batteryLifetimeChargeCap = 49;</code>
     */
    int getBatteryLifetimeChargeCap();

    /**
     * <code>uint32 batteryLifetimeDishargeCap = 50;</code>
     */
    int getBatteryLifetimeDishargeCap();

    /**
     * <code>uint32 batteryErrorInfo = 51;</code>
     */
    int getBatteryErrorInfo();

    /**
     * <code>uint32 batteryWarningInfo = 52;</code>
     */
    int getBatteryWarningInfo();

    /**
     * <code>uint64 batteryID_2 = 53;</code>
     */
    long getBatteryID2();

    /**
     * <code>uint32 batteryVoltage_2 = 54;</code>
     */
    int getBatteryVoltage2();

    /**
     * <code>int32 batteryCurrent_2 = 55;</code>
     */
    int getBatteryCurrent2();

    /**
     * <code>uint32 batterySoC_2 = 56;</code>
     */
    int getBatterySoC2();

    /**
     * <code>uint32 batterySoH_2 = 57;</code>
     */
    int getBatterySoH2();

    /**
     * <code>uint32 batterySOP_2 = 58;</code>
     */
    int getBatterySOP2();

    /**
     * <code>uint32 batteryCellVoltage_2 = 59;</code>
     */
    int getBatteryCellVoltage2();

    /**
     * <code>uint32 batteryModuleTemp_2 = 60;</code>
     */
    int getBatteryModuleTemp2();

    /**
     * <code>uint32 batteryPDU_BMS_Temp_2 = 61;</code>
     */
    int getBatteryPDUBMSTemp2();

    /**
     * <code>uint32 batteryCellBalMap_2 = 62;</code>
     */
    int getBatteryCellBalMap2();

    /**
     * <code>uint32 batteryEquCycleCount_2 = 63;</code>
     */
    int getBatteryEquCycleCount2();

    /**
     * <code>uint32 batteryLifetimeChargeCap_2 = 64;</code>
     */
    int getBatteryLifetimeChargeCap2();

    /**
     * <code>uint32 batteryLifetimeDishargeCap_2 = 65;</code>
     */
    int getBatteryLifetimeDishargeCap2();

    /**
     * <code>uint32 batteryErrorInfo_2 = 66;</code>
     */
    int getBatteryErrorInfo2();

    /**
     * <code>uint32 batteryWarningInfo_2 = 67;</code>
     */
    int getBatteryWarningInfo2();

    /**
     * <code>uint32 VehicleState = 78;</code>
     */
    int getVehicleState();

    /**
     * <code>uint32 DTE = 79;</code>
     */
    int getDTE();

    /**
     * <code>uint32 DisplayController_Hw_version = 80;</code>
     */
    int getDisplayControllerHwVersion();

    /**
     * <code>uint32 DisplayController_Sw_version = 81;</code>
     */
    int getDisplayControllerSwVersion();

    /**
     * <code>uint32 AlertsStatus = 82;</code>
     */
    int getAlertsStatus();

    /**
     * <code>uint32 DiagnosticErrorCode = 83;</code>
     */
    int getDiagnosticErrorCode();

    /**
     * <code>uint32 batteryStatusInfo = 84;</code>
     */
    int getBatteryStatusInfo();

    /**
     * <code>bool nwModeMismatch = 85;</code>
     */
    boolean getNwModeMismatch();

    /**
     * <code>bool BmsWarnDetected = 86;</code>
     */
    boolean getBmsWarnDetected();

    /**
     * <code>bool testerDischargeReq = 87;</code>
     */
    boolean getTesterDischargeReq();

    /**
     * <code>bool testerChargeReq = 88;</code>
     */
    boolean getTesterChargeReq();

    /**
     * <code>bool batteryBalStatus = 89;</code>
     */
    boolean getBatteryBalStatus();

    /**
     * <code>uint32 batteryAuthData = 90;</code>
     */
    int getBatteryAuthData();

    /**
     * <code>uint32 batteryFullCapacity = 91;</code>
     */
    int getBatteryFullCapacity();

    /**
     * <code>int32 maxChargeCurrent = 92;</code>
     */
    int getMaxChargeCurrent();

    /**
     * <code>uint32 maxChargeVoltage = 93;</code>
     */
    int getMaxChargeVoltage();

    /**
     * <code>uint32 maxDischargeCurrent = 94;</code>
     */
    int getMaxDischargeCurrent();

    /**
     * <code>uint32 bmsState = 95;</code>
     */
    int getBmsState();

    /**
     * <code>uint32 cellTemp = 96;</code>
     */
    int getCellTemp();

    /**
     * <code>uint32 bmsFWInitVrsn = 97;</code>
     */
    int getBmsFWInitVrsn();

    /**
     * <code>uint32 bmsFwSAPVrsn = 98;</code>
     */
    int getBmsFwSAPVrsn();

    /**
     * <code>uint32 bmsCFGVrsn = 99;</code>
     */
    int getBmsCFGVrsn();

    /**
     * <code>uint32 bmsDBCVrsn = 100;</code>
     */
    int getBmsDBCVrsn();

    /**
     * <code>uint32 tcuCustmerCode = 101;</code>
     */
    int getTcuCustmerCode();

    /**
     * <code>uint32 tcuSWVrsn = 102;</code>
     */
    int getTcuSWVrsn();

    /**
     * <code>uint32 cycleChargeCapacity = 103;</code>
     */
    int getCycleChargeCapacity();

    /**
     * <code>uint32 cycleDischargeCapacity = 104;</code>
     */
    int getCycleDischargeCapacity();

    /**
     * <code>uint32 availableCapacity = 105;</code>
     */
    int getAvailableCapacity();

    /**
     * <code>uint32 availableEnergy = 106;</code>
     */
    int getAvailableEnergy();

    /**
     * <code>uint32 batteryInfo_1 = 107;</code>
     */
    int getBatteryInfo1();

    /**
     * <code>uint32 batteryInfo_2 = 108;</code>
     */
    int getBatteryInfo2();

    /**
     * <code>uint32 batteryInfo_3 = 109;</code>
     */
    int getBatteryInfo3();

    /**
     * <code>uint32 batteryInfo_4 = 110;</code>
     */
    int getBatteryInfo4();

    /**
     * <code>uint32 batteryInfo_5 = 111;</code>
     */
    int getBatteryInfo5();

    /**
     * <code>bool canTimeOut = 112;</code>
     */
    boolean getCanTimeOut();

    /**
     * <code>uint32 bmsTime = 113;</code>
     */
    int getBmsTime();

    /**
     * <code>uint32 tcuTime = 114;</code>
     */
    int getTcuTime();

    /**
     * <code>uint32 batteryStatusInfo_2 = 115;</code>
     */
    int getBatteryStatusInfo2();

    /**
     * <code>bool nwModeMismatch_2 = 116;</code>
     */
    boolean getNwModeMismatch2();

    /**
     * <code>bool BmsWarnDetected_2 = 117;</code>
     */
    boolean getBmsWarnDetected2();

    /**
     * <code>bool testerDischargeReq_2 = 118;</code>
     */
    boolean getTesterDischargeReq2();

    /**
     * <code>bool testerChargeReq_2 = 119;</code>
     */
    boolean getTesterChargeReq2();

    /**
     * <code>bool batteryBalStatus_2 = 120;</code>
     */
    boolean getBatteryBalStatus2();

    /**
     * <code>uint32 batteryAuthData_2 = 121;</code>
     */
    int getBatteryAuthData2();

    /**
     * <code>uint32 batteryFullCapacity_2 = 122;</code>
     */
    int getBatteryFullCapacity2();

    /**
     * <code>int32 maxChargeCurrent_2 = 123;</code>
     */
    int getMaxChargeCurrent2();

    /**
     * <code>uint32 maxChargeVoltage_2 = 124;</code>
     */
    int getMaxChargeVoltage2();

    /**
     * <code>uint32 maxDischargeCurrent_2 = 125;</code>
     */
    int getMaxDischargeCurrent2();

    /**
     * <code>uint32 bmsState_2 = 126;</code>
     */
    int getBmsState2();

    /**
     * <code>uint32 cellTemp_2 = 127;</code>
     */
    int getCellTemp2();

    /**
     * <code>uint32 bmsFWInitVrsn_2 = 128;</code>
     */
    int getBmsFWInitVrsn2();

    /**
     * <code>uint32 bmsFwSAPVrsn_2 = 129;</code>
     */
    int getBmsFwSAPVrsn2();

    /**
     * <code>uint32 bmsCFGVrsn_2 = 130;</code>
     */
    int getBmsCFGVrsn2();

    /**
     * <code>uint32 bmsDBCVrsn_2 = 131;</code>
     */
    int getBmsDBCVrsn2();

    /**
     * <code>uint32 tcuCustmerCode_2 = 132;</code>
     */
    int getTcuCustmerCode2();

    /**
     * <code>uint32 tcuSWVrsn_2 = 133;</code>
     */
    int getTcuSWVrsn2();

    /**
     * <code>uint32 cycleChargeCapacity_2 = 134;</code>
     */
    int getCycleChargeCapacity2();

    /**
     * <code>uint32 cycleDischargeCapacity_2 = 135;</code>
     */
    int getCycleDischargeCapacity2();

    /**
     * <code>uint32 availableCapacity_2 = 136;</code>
     */
    int getAvailableCapacity2();

    /**
     * <code>uint32 availableEnergy_2 = 137;</code>
     */
    int getAvailableEnergy2();

    /**
     * <code>uint32 battery2Info_1 = 138;</code>
     */
    int getBattery2Info1();

    /**
     * <code>uint32 battery2Info_2 = 139;</code>
     */
    int getBattery2Info2();

    /**
     * <code>uint32 battery2Info_3 = 140;</code>
     */
    int getBattery2Info3();

    /**
     * <code>uint32 battery2Info_4 = 141;</code>
     */
    int getBattery2Info4();

    /**
     * <code>uint32 battery2Info_5 = 142;</code>
     */
    int getBattery2Info5();

    /**
     * <code>bool canTimeOut_2 = 143;</code>
     */
    boolean getCanTimeOut2();

    /**
     * <code>uint32 bmsTime_2 = 144;</code>
     */
    int getBmsTime2();

    /**
     * <code>uint32 tcuTime_2 = 145;</code>
     */
    int getTcuTime2();

    /**
     * <code>bool remoteImmobilization = 146;</code>
     */
    boolean getRemoteImmobilization();

    /**
     * <code>bool bootLockStatus = 147;</code>
     */
    boolean getBootLockStatus();

    /**
     * <code>bool IgnitionEnableStatus = 148;</code>
     */
    boolean getIgnitionEnableStatus();

    /**
     * <code>float CW1 = 149;</code>
     */
    float getCW1();

    /**
     * <code>float CW2 = 150;</code>
     */
    float getCW2();

    /**
     * <code>float CW3 = 151;</code>
     */
    float getCW3();

    /**
     * <code>float CW4 = 152;</code>
     */
    float getCW4();

    /**
     * <code>uint64 AxAyAz = 153;</code>
     */
    long getAxAyAz();

    /**
     * <code>uint64 YawPitchRoll = 154;</code>
     */
    long getYawPitchRoll();

    /**
     * <code>float busVoltage = 155;</code>
     */
    float getBusVoltage();

    /**
     * <code>uint32 mcuMicsStatus = 156;</code>
     */
    int getMcuMicsStatus();

    /**
     * <code>float throttle_iq_cmd = 157;</code>
     */
    float getThrottleIqCmd();
  }
  /**
   * Protobuf type {@code DeviceDataV3}
   */
  public  static final class DeviceDataV3 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DeviceDataV3)
      DeviceDataV3OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DeviceDataV3.newBuilder() to construct.
    private DeviceDataV3(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DeviceDataV3() {
      iMSI_ = "";
      iMEI_ = "";
      networkOperator_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DeviceDataV3(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      int mutable_bitField3_ = 0;
      int mutable_bitField4_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 16: {

              sequence_ = input.readUInt32();
              break;
            }
            case 24: {

              ignitionState_ = input.readBool();
              break;
            }
            case 37: {

              odometer_ = input.readFloat();
              break;
            }
            case 40: {

              rpm_ = input.readUInt32();
              break;
            }
            case 48: {

              speed_ = input.readUInt32();
              break;
            }
            case 61: {

              lat_ = input.readFloat();
              break;
            }
            case 69: {

              lng_ = input.readFloat();
              break;
            }
            case 77: {

              alt_ = input.readFloat();
              break;
            }
            case 85: {

              gpsSpeed_ = input.readFloat();
              break;
            }
            case 93: {

              gpsCourse_ = input.readFloat();
              break;
            }
            case 101: {

              gpsHDOP_ = input.readFloat();
              break;
            }
            case 109: {

              gpsVDOP_ = input.readFloat();
              break;
            }
            case 117: {

              gpsPDOP_ = input.readFloat();
              break;
            }
            case 120: {

              gpsFixModeStatus_ = input.readUInt32();
              break;
            }
            case 128: {

              satellitesUsed_ = input.readUInt32();
              break;
            }
            case 136: {

              nwLAC_ = input.readUInt32();
              break;
            }
            case 144: {

              nwCID_ = input.readUInt32();
              break;
            }
            case 154: {
              java.lang.String s = input.readStringRequireUtf8();

              iMSI_ = s;
              break;
            }
            case 162: {
              java.lang.String s = input.readStringRequireUtf8();

              iMEI_ = s;
              break;
            }
            case 168: {

              rSSI_ = input.readUInt32();
              break;
            }
            case 178: {
              java.lang.String s = input.readStringRequireUtf8();

              networkOperator_ = s;
              break;
            }
            case 184: {

              t1_ = input.readUInt32();
              break;
            }
            case 192: {

              t2_ = input.readUInt32();
              break;
            }
            case 200: {

              t3_ = input.readUInt32();
              break;
            }
            case 208: {

              auxBatteryVoltage_ = input.readUInt32();
              break;
            }
            case 216: {

              auxBatteryPercentage_ = input.readUInt32();
              break;
            }
            case 224: {

              hwVersion_ = input.readUInt32();
              break;
            }
            case 232: {

              fwVersion_ = input.readUInt32();
              break;
            }
            case 240: {

              sdCardSize_ = input.readUInt32();
              break;
            }
            case 248: {

              sdCardStatus_ = input.readBool();
              break;
            }
            case 256: {

              motorCurrent_ = input.readUInt32();
              break;
            }
            case 264: {

              motorRPM_ = input.readUInt32();
              break;
            }
            case 272: {

              motorTemperature_ = input.readUInt32();
              break;
            }
            case 280: {

              motorControllerTemperature_ = input.readUInt32();
              break;
            }
            case 288: {

              motorStatusInfo_ = input.readUInt32();
              break;
            }
            case 296: {

              motorErrorInfo_ = input.readUInt32();
              break;
            }
            case 304: {

              batteryID_ = input.readUInt64();
              break;
            }
            case 312: {

              batteryVoltage_ = input.readUInt32();
              break;
            }
            case 320: {

              batteryCurrent_ = input.readInt32();
              break;
            }
            case 328: {

              batterySoC_ = input.readUInt32();
              break;
            }
            case 336: {

              batterySoH_ = input.readUInt32();
              break;
            }
            case 344: {

              batterySOP_ = input.readUInt32();
              break;
            }
            case 352: {

              batteryCellVoltage_ = input.readUInt32();
              break;
            }
            case 360: {

              batteryModuleTemp_ = input.readUInt32();
              break;
            }
            case 368: {

              batteryPDUBMSTemp_ = input.readUInt32();
              break;
            }
            case 376: {

              batteryCellBalMap_ = input.readUInt32();
              break;
            }
            case 384: {

              batteryEquCycleCount_ = input.readUInt32();
              break;
            }
            case 392: {

              batteryLifetimeChargeCap_ = input.readUInt32();
              break;
            }
            case 400: {

              batteryLifetimeDishargeCap_ = input.readUInt32();
              break;
            }
            case 408: {

              batteryErrorInfo_ = input.readUInt32();
              break;
            }
            case 416: {

              batteryWarningInfo_ = input.readUInt32();
              break;
            }
            case 424: {

              batteryID2_ = input.readUInt64();
              break;
            }
            case 432: {

              batteryVoltage2_ = input.readUInt32();
              break;
            }
            case 440: {

              batteryCurrent2_ = input.readInt32();
              break;
            }
            case 448: {

              batterySoC2_ = input.readUInt32();
              break;
            }
            case 456: {

              batterySoH2_ = input.readUInt32();
              break;
            }
            case 464: {

              batterySOP2_ = input.readUInt32();
              break;
            }
            case 472: {

              batteryCellVoltage2_ = input.readUInt32();
              break;
            }
            case 480: {

              batteryModuleTemp2_ = input.readUInt32();
              break;
            }
            case 488: {

              batteryPDUBMSTemp2_ = input.readUInt32();
              break;
            }
            case 496: {

              batteryCellBalMap2_ = input.readUInt32();
              break;
            }
            case 504: {

              batteryEquCycleCount2_ = input.readUInt32();
              break;
            }
            case 512: {

              batteryLifetimeChargeCap2_ = input.readUInt32();
              break;
            }
            case 520: {

              batteryLifetimeDishargeCap2_ = input.readUInt32();
              break;
            }
            case 528: {

              batteryErrorInfo2_ = input.readUInt32();
              break;
            }
            case 536: {

              batteryWarningInfo2_ = input.readUInt32();
              break;
            }
            case 624: {

              vehicleState_ = input.readUInt32();
              break;
            }
            case 632: {

              dTE_ = input.readUInt32();
              break;
            }
            case 640: {

              displayControllerHwVersion_ = input.readUInt32();
              break;
            }
            case 648: {

              displayControllerSwVersion_ = input.readUInt32();
              break;
            }
            case 656: {

              alertsStatus_ = input.readUInt32();
              break;
            }
            case 664: {

              diagnosticErrorCode_ = input.readUInt32();
              break;
            }
            case 672: {

              batteryStatusInfo_ = input.readUInt32();
              break;
            }
            case 680: {

              nwModeMismatch_ = input.readBool();
              break;
            }
            case 688: {

              bmsWarnDetected_ = input.readBool();
              break;
            }
            case 696: {

              testerDischargeReq_ = input.readBool();
              break;
            }
            case 704: {

              testerChargeReq_ = input.readBool();
              break;
            }
            case 712: {

              batteryBalStatus_ = input.readBool();
              break;
            }
            case 720: {

              batteryAuthData_ = input.readUInt32();
              break;
            }
            case 728: {

              batteryFullCapacity_ = input.readUInt32();
              break;
            }
            case 736: {

              maxChargeCurrent_ = input.readInt32();
              break;
            }
            case 744: {

              maxChargeVoltage_ = input.readUInt32();
              break;
            }
            case 752: {

              maxDischargeCurrent_ = input.readUInt32();
              break;
            }
            case 760: {

              bmsState_ = input.readUInt32();
              break;
            }
            case 768: {

              cellTemp_ = input.readUInt32();
              break;
            }
            case 776: {

              bmsFWInitVrsn_ = input.readUInt32();
              break;
            }
            case 784: {

              bmsFwSAPVrsn_ = input.readUInt32();
              break;
            }
            case 792: {

              bmsCFGVrsn_ = input.readUInt32();
              break;
            }
            case 800: {

              bmsDBCVrsn_ = input.readUInt32();
              break;
            }
            case 808: {

              tcuCustmerCode_ = input.readUInt32();
              break;
            }
            case 816: {

              tcuSWVrsn_ = input.readUInt32();
              break;
            }
            case 824: {

              cycleChargeCapacity_ = input.readUInt32();
              break;
            }
            case 832: {

              cycleDischargeCapacity_ = input.readUInt32();
              break;
            }
            case 840: {

              availableCapacity_ = input.readUInt32();
              break;
            }
            case 848: {

              availableEnergy_ = input.readUInt32();
              break;
            }
            case 856: {

              batteryInfo1_ = input.readUInt32();
              break;
            }
            case 864: {

              batteryInfo2_ = input.readUInt32();
              break;
            }
            case 872: {

              batteryInfo3_ = input.readUInt32();
              break;
            }
            case 880: {

              batteryInfo4_ = input.readUInt32();
              break;
            }
            case 888: {

              batteryInfo5_ = input.readUInt32();
              break;
            }
            case 896: {

              canTimeOut_ = input.readBool();
              break;
            }
            case 904: {

              bmsTime_ = input.readUInt32();
              break;
            }
            case 912: {

              tcuTime_ = input.readUInt32();
              break;
            }
            case 920: {

              batteryStatusInfo2_ = input.readUInt32();
              break;
            }
            case 928: {

              nwModeMismatch2_ = input.readBool();
              break;
            }
            case 936: {

              bmsWarnDetected2_ = input.readBool();
              break;
            }
            case 944: {

              testerDischargeReq2_ = input.readBool();
              break;
            }
            case 952: {

              testerChargeReq2_ = input.readBool();
              break;
            }
            case 960: {

              batteryBalStatus2_ = input.readBool();
              break;
            }
            case 968: {

              batteryAuthData2_ = input.readUInt32();
              break;
            }
            case 976: {

              batteryFullCapacity2_ = input.readUInt32();
              break;
            }
            case 984: {

              maxChargeCurrent2_ = input.readInt32();
              break;
            }
            case 992: {

              maxChargeVoltage2_ = input.readUInt32();
              break;
            }
            case 1000: {

              maxDischargeCurrent2_ = input.readUInt32();
              break;
            }
            case 1008: {

              bmsState2_ = input.readUInt32();
              break;
            }
            case 1016: {

              cellTemp2_ = input.readUInt32();
              break;
            }
            case 1024: {

              bmsFWInitVrsn2_ = input.readUInt32();
              break;
            }
            case 1032: {

              bmsFwSAPVrsn2_ = input.readUInt32();
              break;
            }
            case 1040: {

              bmsCFGVrsn2_ = input.readUInt32();
              break;
            }
            case 1048: {

              bmsDBCVrsn2_ = input.readUInt32();
              break;
            }
            case 1056: {

              tcuCustmerCode2_ = input.readUInt32();
              break;
            }
            case 1064: {

              tcuSWVrsn2_ = input.readUInt32();
              break;
            }
            case 1072: {

              cycleChargeCapacity2_ = input.readUInt32();
              break;
            }
            case 1080: {

              cycleDischargeCapacity2_ = input.readUInt32();
              break;
            }
            case 1088: {

              availableCapacity2_ = input.readUInt32();
              break;
            }
            case 1096: {

              availableEnergy2_ = input.readUInt32();
              break;
            }
            case 1104: {

              battery2Info1_ = input.readUInt32();
              break;
            }
            case 1112: {

              battery2Info2_ = input.readUInt32();
              break;
            }
            case 1120: {

              battery2Info3_ = input.readUInt32();
              break;
            }
            case 1128: {

              battery2Info4_ = input.readUInt32();
              break;
            }
            case 1136: {

              battery2Info5_ = input.readUInt32();
              break;
            }
            case 1144: {

              canTimeOut2_ = input.readBool();
              break;
            }
            case 1152: {

              bmsTime2_ = input.readUInt32();
              break;
            }
            case 1160: {

              tcuTime2_ = input.readUInt32();
              break;
            }
            case 1168: {

              remoteImmobilization_ = input.readBool();
              break;
            }
            case 1176: {

              bootLockStatus_ = input.readBool();
              break;
            }
            case 1184: {

              ignitionEnableStatus_ = input.readBool();
              break;
            }
            case 1197: {

              cW1_ = input.readFloat();
              break;
            }
            case 1205: {

              cW2_ = input.readFloat();
              break;
            }
            case 1213: {

              cW3_ = input.readFloat();
              break;
            }
            case 1221: {

              cW4_ = input.readFloat();
              break;
            }
            case 1224: {

              axAyAz_ = input.readUInt64();
              break;
            }
            case 1232: {

              yawPitchRoll_ = input.readUInt64();
              break;
            }
            case 1245: {

              busVoltage_ = input.readFloat();
              break;
            }
            case 1248: {

              mcuMicsStatus_ = input.readUInt32();
              break;
            }
            case 1261: {

              throttleIqCmd_ = input.readFloat();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return OtcV3R5APlus.internal_static_DeviceDataV3_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return OtcV3R5APlus.internal_static_DeviceDataV3_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              OtcV3R5APlus.DeviceDataV3.class, OtcV3R5APlus.DeviceDataV3.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <code>uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 2;
    private int sequence_;
    /**
     * <code>uint32 sequence = 2;</code>
     */
    public int getSequence() {
      return sequence_;
    }

    public static final int IGNITIONSTATE_FIELD_NUMBER = 3;
    private boolean ignitionState_;
    /**
     * <code>bool ignitionState = 3;</code>
     */
    public boolean getIgnitionState() {
      return ignitionState_;
    }

    public static final int ODOMETER_FIELD_NUMBER = 4;
    private float odometer_;
    /**
     * <code>float odometer = 4;</code>
     */
    public float getOdometer() {
      return odometer_;
    }

    public static final int RPM_FIELD_NUMBER = 5;
    private int rpm_;
    /**
     * <code>uint32 rpm = 5;</code>
     */
    public int getRpm() {
      return rpm_;
    }

    public static final int SPEED_FIELD_NUMBER = 6;
    private int speed_;
    /**
     * <code>uint32 speed = 6;</code>
     */
    public int getSpeed() {
      return speed_;
    }

    public static final int LAT_FIELD_NUMBER = 7;
    private float lat_;
    /**
     * <code>float lat = 7;</code>
     */
    public float getLat() {
      return lat_;
    }

    public static final int LNG_FIELD_NUMBER = 8;
    private float lng_;
    /**
     * <code>float lng = 8;</code>
     */
    public float getLng() {
      return lng_;
    }

    public static final int ALT_FIELD_NUMBER = 9;
    private float alt_;
    /**
     * <code>float alt = 9;</code>
     */
    public float getAlt() {
      return alt_;
    }

    public static final int GPSSPEED_FIELD_NUMBER = 10;
    private float gpsSpeed_;
    /**
     * <code>float gpsSpeed = 10;</code>
     */
    public float getGpsSpeed() {
      return gpsSpeed_;
    }

    public static final int GPSCOURSE_FIELD_NUMBER = 11;
    private float gpsCourse_;
    /**
     * <code>float gpsCourse = 11;</code>
     */
    public float getGpsCourse() {
      return gpsCourse_;
    }

    public static final int GPSHDOP_FIELD_NUMBER = 12;
    private float gpsHDOP_;
    /**
     * <code>float gpsHDOP = 12;</code>
     */
    public float getGpsHDOP() {
      return gpsHDOP_;
    }

    public static final int GPSVDOP_FIELD_NUMBER = 13;
    private float gpsVDOP_;
    /**
     * <code>float gpsVDOP = 13;</code>
     */
    public float getGpsVDOP() {
      return gpsVDOP_;
    }

    public static final int GPSPDOP_FIELD_NUMBER = 14;
    private float gpsPDOP_;
    /**
     * <code>float gpsPDOP = 14;</code>
     */
    public float getGpsPDOP() {
      return gpsPDOP_;
    }

    public static final int GPSFIXMODESTATUS_FIELD_NUMBER = 15;
    private int gpsFixModeStatus_;
    /**
     * <code>uint32 gpsFixModeStatus = 15;</code>
     */
    public int getGpsFixModeStatus() {
      return gpsFixModeStatus_;
    }

    public static final int SATELLITESUSED_FIELD_NUMBER = 16;
    private int satellitesUsed_;
    /**
     * <code>uint32 satellitesUsed = 16;</code>
     */
    public int getSatellitesUsed() {
      return satellitesUsed_;
    }

    public static final int NWLAC_FIELD_NUMBER = 17;
    private int nwLAC_;
    /**
     * <code>uint32 nwLAC = 17;</code>
     */
    public int getNwLAC() {
      return nwLAC_;
    }

    public static final int NWCID_FIELD_NUMBER = 18;
    private int nwCID_;
    /**
     * <code>uint32 nwCID = 18;</code>
     */
    public int getNwCID() {
      return nwCID_;
    }

    public static final int IMSI_FIELD_NUMBER = 19;
    private volatile java.lang.Object iMSI_;
    /**
     * <code>string IMSI = 19;</code>
     */
    public java.lang.String getIMSI() {
      java.lang.Object ref = iMSI_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iMSI_ = s;
        return s;
      }
    }
    /**
     * <code>string IMSI = 19;</code>
     */
    public com.google.protobuf.ByteString
        getIMSIBytes() {
      java.lang.Object ref = iMSI_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iMSI_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IMEI_FIELD_NUMBER = 20;
    private volatile java.lang.Object iMEI_;
    /**
     * <code>string IMEI = 20;</code>
     */
    public java.lang.String getIMEI() {
      java.lang.Object ref = iMEI_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iMEI_ = s;
        return s;
      }
    }
    /**
     * <code>string IMEI = 20;</code>
     */
    public com.google.protobuf.ByteString
        getIMEIBytes() {
      java.lang.Object ref = iMEI_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iMEI_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RSSI_FIELD_NUMBER = 21;
    private int rSSI_;
    /**
     * <code>uint32 RSSI = 21;</code>
     */
    public int getRSSI() {
      return rSSI_;
    }

    public static final int NETWORKOPERATOR_FIELD_NUMBER = 22;
    private volatile java.lang.Object networkOperator_;
    /**
     * <code>string networkOperator = 22;</code>
     */
    public java.lang.String getNetworkOperator() {
      java.lang.Object ref = networkOperator_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        networkOperator_ = s;
        return s;
      }
    }
    /**
     * <code>string networkOperator = 22;</code>
     */
    public com.google.protobuf.ByteString
        getNetworkOperatorBytes() {
      java.lang.Object ref = networkOperator_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        networkOperator_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int T1_FIELD_NUMBER = 23;
    private int t1_;
    /**
     * <code>uint32 T1 = 23;</code>
     */
    public int getT1() {
      return t1_;
    }

    public static final int T2_FIELD_NUMBER = 24;
    private int t2_;
    /**
     * <code>uint32 T2 = 24;</code>
     */
    public int getT2() {
      return t2_;
    }

    public static final int T3_FIELD_NUMBER = 25;
    private int t3_;
    /**
     * <code>uint32 T3 = 25;</code>
     */
    public int getT3() {
      return t3_;
    }

    public static final int AUXBATTERYVOLTAGE_FIELD_NUMBER = 26;
    private int auxBatteryVoltage_;
    /**
     * <code>uint32 auxBatteryVoltage = 26;</code>
     */
    public int getAuxBatteryVoltage() {
      return auxBatteryVoltage_;
    }

    public static final int AUXBATTERYPERCENTAGE_FIELD_NUMBER = 27;
    private int auxBatteryPercentage_;
    /**
     * <code>uint32 auxBatteryPercentage = 27;</code>
     */
    public int getAuxBatteryPercentage() {
      return auxBatteryPercentage_;
    }

    public static final int HWVERSION_FIELD_NUMBER = 28;
    private int hwVersion_;
    /**
     * <code>uint32 hwVersion = 28;</code>
     */
    public int getHwVersion() {
      return hwVersion_;
    }

    public static final int FWVERSION_FIELD_NUMBER = 29;
    private int fwVersion_;
    /**
     * <code>uint32 fwVersion = 29;</code>
     */
    public int getFwVersion() {
      return fwVersion_;
    }

    public static final int SDCARDSIZE_FIELD_NUMBER = 30;
    private int sdCardSize_;
    /**
     * <code>uint32 sdCardSize = 30;</code>
     */
    public int getSdCardSize() {
      return sdCardSize_;
    }

    public static final int SDCARDSTATUS_FIELD_NUMBER = 31;
    private boolean sdCardStatus_;
    /**
     * <code>bool sdCardStatus = 31;</code>
     */
    public boolean getSdCardStatus() {
      return sdCardStatus_;
    }

    public static final int MOTORCURRENT_FIELD_NUMBER = 32;
    private int motorCurrent_;
    /**
     * <code>uint32 motorCurrent = 32;</code>
     */
    public int getMotorCurrent() {
      return motorCurrent_;
    }

    public static final int MOTORRPM_FIELD_NUMBER = 33;
    private int motorRPM_;
    /**
     * <code>uint32 motorRPM = 33;</code>
     */
    public int getMotorRPM() {
      return motorRPM_;
    }

    public static final int MOTORTEMPERATURE_FIELD_NUMBER = 34;
    private int motorTemperature_;
    /**
     * <code>uint32 motorTemperature = 34;</code>
     */
    public int getMotorTemperature() {
      return motorTemperature_;
    }

    public static final int MOTORCONTROLLERTEMPERATURE_FIELD_NUMBER = 35;
    private int motorControllerTemperature_;
    /**
     * <code>uint32 motorControllerTemperature = 35;</code>
     */
    public int getMotorControllerTemperature() {
      return motorControllerTemperature_;
    }

    public static final int MOTORSTATUSINFO_FIELD_NUMBER = 36;
    private int motorStatusInfo_;
    /**
     * <code>uint32 motorStatusInfo = 36;</code>
     */
    public int getMotorStatusInfo() {
      return motorStatusInfo_;
    }

    public static final int MOTORERRORINFO_FIELD_NUMBER = 37;
    private int motorErrorInfo_;
    /**
     * <code>uint32 motorErrorInfo = 37;</code>
     */
    public int getMotorErrorInfo() {
      return motorErrorInfo_;
    }

    public static final int BATTERYID_FIELD_NUMBER = 38;
    private long batteryID_;
    /**
     * <code>uint64 batteryID = 38;</code>
     */
    public long getBatteryID() {
      return batteryID_;
    }

    public static final int BATTERYVOLTAGE_FIELD_NUMBER = 39;
    private int batteryVoltage_;
    /**
     * <code>uint32 batteryVoltage = 39;</code>
     */
    public int getBatteryVoltage() {
      return batteryVoltage_;
    }

    public static final int BATTERYCURRENT_FIELD_NUMBER = 40;
    private int batteryCurrent_;
    /**
     * <code>int32 batteryCurrent = 40;</code>
     */
    public int getBatteryCurrent() {
      return batteryCurrent_;
    }

    public static final int BATTERYSOC_FIELD_NUMBER = 41;
    private int batterySoC_;
    /**
     * <code>uint32 batterySoC = 41;</code>
     */
    public int getBatterySoC() {
      return batterySoC_;
    }

    public static final int BATTERYSOH_FIELD_NUMBER = 42;
    private int batterySoH_;
    /**
     * <code>uint32 batterySoH = 42;</code>
     */
    public int getBatterySoH() {
      return batterySoH_;
    }

    public static final int BATTERYSOP_FIELD_NUMBER = 43;
    private int batterySOP_;
    /**
     * <code>uint32 batterySOP = 43;</code>
     */
    public int getBatterySOP() {
      return batterySOP_;
    }

    public static final int BATTERYCELLVOLTAGE_FIELD_NUMBER = 44;
    private int batteryCellVoltage_;
    /**
     * <code>uint32 batteryCellVoltage = 44;</code>
     */
    public int getBatteryCellVoltage() {
      return batteryCellVoltage_;
    }

    public static final int BATTERYMODULETEMP_FIELD_NUMBER = 45;
    private int batteryModuleTemp_;
    /**
     * <code>uint32 batteryModuleTemp = 45;</code>
     */
    public int getBatteryModuleTemp() {
      return batteryModuleTemp_;
    }

    public static final int BATTERYPDU_BMS_TEMP_FIELD_NUMBER = 46;
    private int batteryPDUBMSTemp_;
    /**
     * <code>uint32 batteryPDU_BMS_Temp = 46;</code>
     */
    public int getBatteryPDUBMSTemp() {
      return batteryPDUBMSTemp_;
    }

    public static final int BATTERYCELLBALMAP_FIELD_NUMBER = 47;
    private int batteryCellBalMap_;
    /**
     * <code>uint32 batteryCellBalMap = 47;</code>
     */
    public int getBatteryCellBalMap() {
      return batteryCellBalMap_;
    }

    public static final int BATTERYEQUCYCLECOUNT_FIELD_NUMBER = 48;
    private int batteryEquCycleCount_;
    /**
     * <code>uint32 batteryEquCycleCount = 48;</code>
     */
    public int getBatteryEquCycleCount() {
      return batteryEquCycleCount_;
    }

    public static final int BATTERYLIFETIMECHARGECAP_FIELD_NUMBER = 49;
    private int batteryLifetimeChargeCap_;
    /**
     * <code>uint32 batteryLifetimeChargeCap = 49;</code>
     */
    public int getBatteryLifetimeChargeCap() {
      return batteryLifetimeChargeCap_;
    }

    public static final int BATTERYLIFETIMEDISHARGECAP_FIELD_NUMBER = 50;
    private int batteryLifetimeDishargeCap_;
    /**
     * <code>uint32 batteryLifetimeDishargeCap = 50;</code>
     */
    public int getBatteryLifetimeDishargeCap() {
      return batteryLifetimeDishargeCap_;
    }

    public static final int BATTERYERRORINFO_FIELD_NUMBER = 51;
    private int batteryErrorInfo_;
    /**
     * <code>uint32 batteryErrorInfo = 51;</code>
     */
    public int getBatteryErrorInfo() {
      return batteryErrorInfo_;
    }

    public static final int BATTERYWARNINGINFO_FIELD_NUMBER = 52;
    private int batteryWarningInfo_;
    /**
     * <code>uint32 batteryWarningInfo = 52;</code>
     */
    public int getBatteryWarningInfo() {
      return batteryWarningInfo_;
    }

    public static final int BATTERYID_2_FIELD_NUMBER = 53;
    private long batteryID2_;
    /**
     * <code>uint64 batteryID_2 = 53;</code>
     */
    public long getBatteryID2() {
      return batteryID2_;
    }

    public static final int BATTERYVOLTAGE_2_FIELD_NUMBER = 54;
    private int batteryVoltage2_;
    /**
     * <code>uint32 batteryVoltage_2 = 54;</code>
     */
    public int getBatteryVoltage2() {
      return batteryVoltage2_;
    }

    public static final int BATTERYCURRENT_2_FIELD_NUMBER = 55;
    private int batteryCurrent2_;
    /**
     * <code>int32 batteryCurrent_2 = 55;</code>
     */
    public int getBatteryCurrent2() {
      return batteryCurrent2_;
    }

    public static final int BATTERYSOC_2_FIELD_NUMBER = 56;
    private int batterySoC2_;
    /**
     * <code>uint32 batterySoC_2 = 56;</code>
     */
    public int getBatterySoC2() {
      return batterySoC2_;
    }

    public static final int BATTERYSOH_2_FIELD_NUMBER = 57;
    private int batterySoH2_;
    /**
     * <code>uint32 batterySoH_2 = 57;</code>
     */
    public int getBatterySoH2() {
      return batterySoH2_;
    }

    public static final int BATTERYSOP_2_FIELD_NUMBER = 58;
    private int batterySOP2_;
    /**
     * <code>uint32 batterySOP_2 = 58;</code>
     */
    public int getBatterySOP2() {
      return batterySOP2_;
    }

    public static final int BATTERYCELLVOLTAGE_2_FIELD_NUMBER = 59;
    private int batteryCellVoltage2_;
    /**
     * <code>uint32 batteryCellVoltage_2 = 59;</code>
     */
    public int getBatteryCellVoltage2() {
      return batteryCellVoltage2_;
    }

    public static final int BATTERYMODULETEMP_2_FIELD_NUMBER = 60;
    private int batteryModuleTemp2_;
    /**
     * <code>uint32 batteryModuleTemp_2 = 60;</code>
     */
    public int getBatteryModuleTemp2() {
      return batteryModuleTemp2_;
    }

    public static final int BATTERYPDU_BMS_TEMP_2_FIELD_NUMBER = 61;
    private int batteryPDUBMSTemp2_;
    /**
     * <code>uint32 batteryPDU_BMS_Temp_2 = 61;</code>
     */
    public int getBatteryPDUBMSTemp2() {
      return batteryPDUBMSTemp2_;
    }

    public static final int BATTERYCELLBALMAP_2_FIELD_NUMBER = 62;
    private int batteryCellBalMap2_;
    /**
     * <code>uint32 batteryCellBalMap_2 = 62;</code>
     */
    public int getBatteryCellBalMap2() {
      return batteryCellBalMap2_;
    }

    public static final int BATTERYEQUCYCLECOUNT_2_FIELD_NUMBER = 63;
    private int batteryEquCycleCount2_;
    /**
     * <code>uint32 batteryEquCycleCount_2 = 63;</code>
     */
    public int getBatteryEquCycleCount2() {
      return batteryEquCycleCount2_;
    }

    public static final int BATTERYLIFETIMECHARGECAP_2_FIELD_NUMBER = 64;
    private int batteryLifetimeChargeCap2_;
    /**
     * <code>uint32 batteryLifetimeChargeCap_2 = 64;</code>
     */
    public int getBatteryLifetimeChargeCap2() {
      return batteryLifetimeChargeCap2_;
    }

    public static final int BATTERYLIFETIMEDISHARGECAP_2_FIELD_NUMBER = 65;
    private int batteryLifetimeDishargeCap2_;
    /**
     * <code>uint32 batteryLifetimeDishargeCap_2 = 65;</code>
     */
    public int getBatteryLifetimeDishargeCap2() {
      return batteryLifetimeDishargeCap2_;
    }

    public static final int BATTERYERRORINFO_2_FIELD_NUMBER = 66;
    private int batteryErrorInfo2_;
    /**
     * <code>uint32 batteryErrorInfo_2 = 66;</code>
     */
    public int getBatteryErrorInfo2() {
      return batteryErrorInfo2_;
    }

    public static final int BATTERYWARNINGINFO_2_FIELD_NUMBER = 67;
    private int batteryWarningInfo2_;
    /**
     * <code>uint32 batteryWarningInfo_2 = 67;</code>
     */
    public int getBatteryWarningInfo2() {
      return batteryWarningInfo2_;
    }

    public static final int VEHICLESTATE_FIELD_NUMBER = 78;
    private int vehicleState_;
    /**
     * <code>uint32 VehicleState = 78;</code>
     */
    public int getVehicleState() {
      return vehicleState_;
    }

    public static final int DTE_FIELD_NUMBER = 79;
    private int dTE_;
    /**
     * <code>uint32 DTE = 79;</code>
     */
    public int getDTE() {
      return dTE_;
    }

    public static final int DISPLAYCONTROLLER_HW_VERSION_FIELD_NUMBER = 80;
    private int displayControllerHwVersion_;
    /**
     * <code>uint32 DisplayController_Hw_version = 80;</code>
     */
    public int getDisplayControllerHwVersion() {
      return displayControllerHwVersion_;
    }

    public static final int DISPLAYCONTROLLER_SW_VERSION_FIELD_NUMBER = 81;
    private int displayControllerSwVersion_;
    /**
     * <code>uint32 DisplayController_Sw_version = 81;</code>
     */
    public int getDisplayControllerSwVersion() {
      return displayControllerSwVersion_;
    }

    public static final int ALERTSSTATUS_FIELD_NUMBER = 82;
    private int alertsStatus_;
    /**
     * <code>uint32 AlertsStatus = 82;</code>
     */
    public int getAlertsStatus() {
      return alertsStatus_;
    }

    public static final int DIAGNOSTICERRORCODE_FIELD_NUMBER = 83;
    private int diagnosticErrorCode_;
    /**
     * <code>uint32 DiagnosticErrorCode = 83;</code>
     */
    public int getDiagnosticErrorCode() {
      return diagnosticErrorCode_;
    }

    public static final int BATTERYSTATUSINFO_FIELD_NUMBER = 84;
    private int batteryStatusInfo_;
    /**
     * <code>uint32 batteryStatusInfo = 84;</code>
     */
    public int getBatteryStatusInfo() {
      return batteryStatusInfo_;
    }

    public static final int NWMODEMISMATCH_FIELD_NUMBER = 85;
    private boolean nwModeMismatch_;
    /**
     * <code>bool nwModeMismatch = 85;</code>
     */
    public boolean getNwModeMismatch() {
      return nwModeMismatch_;
    }

    public static final int BMSWARNDETECTED_FIELD_NUMBER = 86;
    private boolean bmsWarnDetected_;
    /**
     * <code>bool BmsWarnDetected = 86;</code>
     */
    public boolean getBmsWarnDetected() {
      return bmsWarnDetected_;
    }

    public static final int TESTERDISCHARGEREQ_FIELD_NUMBER = 87;
    private boolean testerDischargeReq_;
    /**
     * <code>bool testerDischargeReq = 87;</code>
     */
    public boolean getTesterDischargeReq() {
      return testerDischargeReq_;
    }

    public static final int TESTERCHARGEREQ_FIELD_NUMBER = 88;
    private boolean testerChargeReq_;
    /**
     * <code>bool testerChargeReq = 88;</code>
     */
    public boolean getTesterChargeReq() {
      return testerChargeReq_;
    }

    public static final int BATTERYBALSTATUS_FIELD_NUMBER = 89;
    private boolean batteryBalStatus_;
    /**
     * <code>bool batteryBalStatus = 89;</code>
     */
    public boolean getBatteryBalStatus() {
      return batteryBalStatus_;
    }

    public static final int BATTERYAUTHDATA_FIELD_NUMBER = 90;
    private int batteryAuthData_;
    /**
     * <code>uint32 batteryAuthData = 90;</code>
     */
    public int getBatteryAuthData() {
      return batteryAuthData_;
    }

    public static final int BATTERYFULLCAPACITY_FIELD_NUMBER = 91;
    private int batteryFullCapacity_;
    /**
     * <code>uint32 batteryFullCapacity = 91;</code>
     */
    public int getBatteryFullCapacity() {
      return batteryFullCapacity_;
    }

    public static final int MAXCHARGECURRENT_FIELD_NUMBER = 92;
    private int maxChargeCurrent_;
    /**
     * <code>int32 maxChargeCurrent = 92;</code>
     */
    public int getMaxChargeCurrent() {
      return maxChargeCurrent_;
    }

    public static final int MAXCHARGEVOLTAGE_FIELD_NUMBER = 93;
    private int maxChargeVoltage_;
    /**
     * <code>uint32 maxChargeVoltage = 93;</code>
     */
    public int getMaxChargeVoltage() {
      return maxChargeVoltage_;
    }

    public static final int MAXDISCHARGECURRENT_FIELD_NUMBER = 94;
    private int maxDischargeCurrent_;
    /**
     * <code>uint32 maxDischargeCurrent = 94;</code>
     */
    public int getMaxDischargeCurrent() {
      return maxDischargeCurrent_;
    }

    public static final int BMSSTATE_FIELD_NUMBER = 95;
    private int bmsState_;
    /**
     * <code>uint32 bmsState = 95;</code>
     */
    public int getBmsState() {
      return bmsState_;
    }

    public static final int CELLTEMP_FIELD_NUMBER = 96;
    private int cellTemp_;
    /**
     * <code>uint32 cellTemp = 96;</code>
     */
    public int getCellTemp() {
      return cellTemp_;
    }

    public static final int BMSFWINITVRSN_FIELD_NUMBER = 97;
    private int bmsFWInitVrsn_;
    /**
     * <code>uint32 bmsFWInitVrsn = 97;</code>
     */
    public int getBmsFWInitVrsn() {
      return bmsFWInitVrsn_;
    }

    public static final int BMSFWSAPVRSN_FIELD_NUMBER = 98;
    private int bmsFwSAPVrsn_;
    /**
     * <code>uint32 bmsFwSAPVrsn = 98;</code>
     */
    public int getBmsFwSAPVrsn() {
      return bmsFwSAPVrsn_;
    }

    public static final int BMSCFGVRSN_FIELD_NUMBER = 99;
    private int bmsCFGVrsn_;
    /**
     * <code>uint32 bmsCFGVrsn = 99;</code>
     */
    public int getBmsCFGVrsn() {
      return bmsCFGVrsn_;
    }

    public static final int BMSDBCVRSN_FIELD_NUMBER = 100;
    private int bmsDBCVrsn_;
    /**
     * <code>uint32 bmsDBCVrsn = 100;</code>
     */
    public int getBmsDBCVrsn() {
      return bmsDBCVrsn_;
    }

    public static final int TCUCUSTMERCODE_FIELD_NUMBER = 101;
    private int tcuCustmerCode_;
    /**
     * <code>uint32 tcuCustmerCode = 101;</code>
     */
    public int getTcuCustmerCode() {
      return tcuCustmerCode_;
    }

    public static final int TCUSWVRSN_FIELD_NUMBER = 102;
    private int tcuSWVrsn_;
    /**
     * <code>uint32 tcuSWVrsn = 102;</code>
     */
    public int getTcuSWVrsn() {
      return tcuSWVrsn_;
    }

    public static final int CYCLECHARGECAPACITY_FIELD_NUMBER = 103;
    private int cycleChargeCapacity_;
    /**
     * <code>uint32 cycleChargeCapacity = 103;</code>
     */
    public int getCycleChargeCapacity() {
      return cycleChargeCapacity_;
    }

    public static final int CYCLEDISCHARGECAPACITY_FIELD_NUMBER = 104;
    private int cycleDischargeCapacity_;
    /**
     * <code>uint32 cycleDischargeCapacity = 104;</code>
     */
    public int getCycleDischargeCapacity() {
      return cycleDischargeCapacity_;
    }

    public static final int AVAILABLECAPACITY_FIELD_NUMBER = 105;
    private int availableCapacity_;
    /**
     * <code>uint32 availableCapacity = 105;</code>
     */
    public int getAvailableCapacity() {
      return availableCapacity_;
    }

    public static final int AVAILABLEENERGY_FIELD_NUMBER = 106;
    private int availableEnergy_;
    /**
     * <code>uint32 availableEnergy = 106;</code>
     */
    public int getAvailableEnergy() {
      return availableEnergy_;
    }

    public static final int BATTERYINFO_1_FIELD_NUMBER = 107;
    private int batteryInfo1_;
    /**
     * <code>uint32 batteryInfo_1 = 107;</code>
     */
    public int getBatteryInfo1() {
      return batteryInfo1_;
    }

    public static final int BATTERYINFO_2_FIELD_NUMBER = 108;
    private int batteryInfo2_;
    /**
     * <code>uint32 batteryInfo_2 = 108;</code>
     */
    public int getBatteryInfo2() {
      return batteryInfo2_;
    }

    public static final int BATTERYINFO_3_FIELD_NUMBER = 109;
    private int batteryInfo3_;
    /**
     * <code>uint32 batteryInfo_3 = 109;</code>
     */
    public int getBatteryInfo3() {
      return batteryInfo3_;
    }

    public static final int BATTERYINFO_4_FIELD_NUMBER = 110;
    private int batteryInfo4_;
    /**
     * <code>uint32 batteryInfo_4 = 110;</code>
     */
    public int getBatteryInfo4() {
      return batteryInfo4_;
    }

    public static final int BATTERYINFO_5_FIELD_NUMBER = 111;
    private int batteryInfo5_;
    /**
     * <code>uint32 batteryInfo_5 = 111;</code>
     */
    public int getBatteryInfo5() {
      return batteryInfo5_;
    }

    public static final int CANTIMEOUT_FIELD_NUMBER = 112;
    private boolean canTimeOut_;
    /**
     * <code>bool canTimeOut = 112;</code>
     */
    public boolean getCanTimeOut() {
      return canTimeOut_;
    }

    public static final int BMSTIME_FIELD_NUMBER = 113;
    private int bmsTime_;
    /**
     * <code>uint32 bmsTime = 113;</code>
     */
    public int getBmsTime() {
      return bmsTime_;
    }

    public static final int TCUTIME_FIELD_NUMBER = 114;
    private int tcuTime_;
    /**
     * <code>uint32 tcuTime = 114;</code>
     */
    public int getTcuTime() {
      return tcuTime_;
    }

    public static final int BATTERYSTATUSINFO_2_FIELD_NUMBER = 115;
    private int batteryStatusInfo2_;
    /**
     * <code>uint32 batteryStatusInfo_2 = 115;</code>
     */
    public int getBatteryStatusInfo2() {
      return batteryStatusInfo2_;
    }

    public static final int NWMODEMISMATCH_2_FIELD_NUMBER = 116;
    private boolean nwModeMismatch2_;
    /**
     * <code>bool nwModeMismatch_2 = 116;</code>
     */
    public boolean getNwModeMismatch2() {
      return nwModeMismatch2_;
    }

    public static final int BMSWARNDETECTED_2_FIELD_NUMBER = 117;
    private boolean bmsWarnDetected2_;
    /**
     * <code>bool BmsWarnDetected_2 = 117;</code>
     */
    public boolean getBmsWarnDetected2() {
      return bmsWarnDetected2_;
    }

    public static final int TESTERDISCHARGEREQ_2_FIELD_NUMBER = 118;
    private boolean testerDischargeReq2_;
    /**
     * <code>bool testerDischargeReq_2 = 118;</code>
     */
    public boolean getTesterDischargeReq2() {
      return testerDischargeReq2_;
    }

    public static final int TESTERCHARGEREQ_2_FIELD_NUMBER = 119;
    private boolean testerChargeReq2_;
    /**
     * <code>bool testerChargeReq_2 = 119;</code>
     */
    public boolean getTesterChargeReq2() {
      return testerChargeReq2_;
    }

    public static final int BATTERYBALSTATUS_2_FIELD_NUMBER = 120;
    private boolean batteryBalStatus2_;
    /**
     * <code>bool batteryBalStatus_2 = 120;</code>
     */
    public boolean getBatteryBalStatus2() {
      return batteryBalStatus2_;
    }

    public static final int BATTERYAUTHDATA_2_FIELD_NUMBER = 121;
    private int batteryAuthData2_;
    /**
     * <code>uint32 batteryAuthData_2 = 121;</code>
     */
    public int getBatteryAuthData2() {
      return batteryAuthData2_;
    }

    public static final int BATTERYFULLCAPACITY_2_FIELD_NUMBER = 122;
    private int batteryFullCapacity2_;
    /**
     * <code>uint32 batteryFullCapacity_2 = 122;</code>
     */
    public int getBatteryFullCapacity2() {
      return batteryFullCapacity2_;
    }

    public static final int MAXCHARGECURRENT_2_FIELD_NUMBER = 123;
    private int maxChargeCurrent2_;
    /**
     * <code>int32 maxChargeCurrent_2 = 123;</code>
     */
    public int getMaxChargeCurrent2() {
      return maxChargeCurrent2_;
    }

    public static final int MAXCHARGEVOLTAGE_2_FIELD_NUMBER = 124;
    private int maxChargeVoltage2_;
    /**
     * <code>uint32 maxChargeVoltage_2 = 124;</code>
     */
    public int getMaxChargeVoltage2() {
      return maxChargeVoltage2_;
    }

    public static final int MAXDISCHARGECURRENT_2_FIELD_NUMBER = 125;
    private int maxDischargeCurrent2_;
    /**
     * <code>uint32 maxDischargeCurrent_2 = 125;</code>
     */
    public int getMaxDischargeCurrent2() {
      return maxDischargeCurrent2_;
    }

    public static final int BMSSTATE_2_FIELD_NUMBER = 126;
    private int bmsState2_;
    /**
     * <code>uint32 bmsState_2 = 126;</code>
     */
    public int getBmsState2() {
      return bmsState2_;
    }

    public static final int CELLTEMP_2_FIELD_NUMBER = 127;
    private int cellTemp2_;
    /**
     * <code>uint32 cellTemp_2 = 127;</code>
     */
    public int getCellTemp2() {
      return cellTemp2_;
    }

    public static final int BMSFWINITVRSN_2_FIELD_NUMBER = 128;
    private int bmsFWInitVrsn2_;
    /**
     * <code>uint32 bmsFWInitVrsn_2 = 128;</code>
     */
    public int getBmsFWInitVrsn2() {
      return bmsFWInitVrsn2_;
    }

    public static final int BMSFWSAPVRSN_2_FIELD_NUMBER = 129;
    private int bmsFwSAPVrsn2_;
    /**
     * <code>uint32 bmsFwSAPVrsn_2 = 129;</code>
     */
    public int getBmsFwSAPVrsn2() {
      return bmsFwSAPVrsn2_;
    }

    public static final int BMSCFGVRSN_2_FIELD_NUMBER = 130;
    private int bmsCFGVrsn2_;
    /**
     * <code>uint32 bmsCFGVrsn_2 = 130;</code>
     */
    public int getBmsCFGVrsn2() {
      return bmsCFGVrsn2_;
    }

    public static final int BMSDBCVRSN_2_FIELD_NUMBER = 131;
    private int bmsDBCVrsn2_;
    /**
     * <code>uint32 bmsDBCVrsn_2 = 131;</code>
     */
    public int getBmsDBCVrsn2() {
      return bmsDBCVrsn2_;
    }

    public static final int TCUCUSTMERCODE_2_FIELD_NUMBER = 132;
    private int tcuCustmerCode2_;
    /**
     * <code>uint32 tcuCustmerCode_2 = 132;</code>
     */
    public int getTcuCustmerCode2() {
      return tcuCustmerCode2_;
    }

    public static final int TCUSWVRSN_2_FIELD_NUMBER = 133;
    private int tcuSWVrsn2_;
    /**
     * <code>uint32 tcuSWVrsn_2 = 133;</code>
     */
    public int getTcuSWVrsn2() {
      return tcuSWVrsn2_;
    }

    public static final int CYCLECHARGECAPACITY_2_FIELD_NUMBER = 134;
    private int cycleChargeCapacity2_;
    /**
     * <code>uint32 cycleChargeCapacity_2 = 134;</code>
     */
    public int getCycleChargeCapacity2() {
      return cycleChargeCapacity2_;
    }

    public static final int CYCLEDISCHARGECAPACITY_2_FIELD_NUMBER = 135;
    private int cycleDischargeCapacity2_;
    /**
     * <code>uint32 cycleDischargeCapacity_2 = 135;</code>
     */
    public int getCycleDischargeCapacity2() {
      return cycleDischargeCapacity2_;
    }

    public static final int AVAILABLECAPACITY_2_FIELD_NUMBER = 136;
    private int availableCapacity2_;
    /**
     * <code>uint32 availableCapacity_2 = 136;</code>
     */
    public int getAvailableCapacity2() {
      return availableCapacity2_;
    }

    public static final int AVAILABLEENERGY_2_FIELD_NUMBER = 137;
    private int availableEnergy2_;
    /**
     * <code>uint32 availableEnergy_2 = 137;</code>
     */
    public int getAvailableEnergy2() {
      return availableEnergy2_;
    }

    public static final int BATTERY2INFO_1_FIELD_NUMBER = 138;
    private int battery2Info1_;
    /**
     * <code>uint32 battery2Info_1 = 138;</code>
     */
    public int getBattery2Info1() {
      return battery2Info1_;
    }

    public static final int BATTERY2INFO_2_FIELD_NUMBER = 139;
    private int battery2Info2_;
    /**
     * <code>uint32 battery2Info_2 = 139;</code>
     */
    public int getBattery2Info2() {
      return battery2Info2_;
    }

    public static final int BATTERY2INFO_3_FIELD_NUMBER = 140;
    private int battery2Info3_;
    /**
     * <code>uint32 battery2Info_3 = 140;</code>
     */
    public int getBattery2Info3() {
      return battery2Info3_;
    }

    public static final int BATTERY2INFO_4_FIELD_NUMBER = 141;
    private int battery2Info4_;
    /**
     * <code>uint32 battery2Info_4 = 141;</code>
     */
    public int getBattery2Info4() {
      return battery2Info4_;
    }

    public static final int BATTERY2INFO_5_FIELD_NUMBER = 142;
    private int battery2Info5_;
    /**
     * <code>uint32 battery2Info_5 = 142;</code>
     */
    public int getBattery2Info5() {
      return battery2Info5_;
    }

    public static final int CANTIMEOUT_2_FIELD_NUMBER = 143;
    private boolean canTimeOut2_;
    /**
     * <code>bool canTimeOut_2 = 143;</code>
     */
    public boolean getCanTimeOut2() {
      return canTimeOut2_;
    }

    public static final int BMSTIME_2_FIELD_NUMBER = 144;
    private int bmsTime2_;
    /**
     * <code>uint32 bmsTime_2 = 144;</code>
     */
    public int getBmsTime2() {
      return bmsTime2_;
    }

    public static final int TCUTIME_2_FIELD_NUMBER = 145;
    private int tcuTime2_;
    /**
     * <code>uint32 tcuTime_2 = 145;</code>
     */
    public int getTcuTime2() {
      return tcuTime2_;
    }

    public static final int REMOTEIMMOBILIZATION_FIELD_NUMBER = 146;
    private boolean remoteImmobilization_;
    /**
     * <code>bool remoteImmobilization = 146;</code>
     */
    public boolean getRemoteImmobilization() {
      return remoteImmobilization_;
    }

    public static final int BOOTLOCKSTATUS_FIELD_NUMBER = 147;
    private boolean bootLockStatus_;
    /**
     * <code>bool bootLockStatus = 147;</code>
     */
    public boolean getBootLockStatus() {
      return bootLockStatus_;
    }

    public static final int IGNITIONENABLESTATUS_FIELD_NUMBER = 148;
    private boolean ignitionEnableStatus_;
    /**
     * <code>bool IgnitionEnableStatus = 148;</code>
     */
    public boolean getIgnitionEnableStatus() {
      return ignitionEnableStatus_;
    }

    public static final int CW1_FIELD_NUMBER = 149;
    private float cW1_;
    /**
     * <code>float CW1 = 149;</code>
     */
    public float getCW1() {
      return cW1_;
    }

    public static final int CW2_FIELD_NUMBER = 150;
    private float cW2_;
    /**
     * <code>float CW2 = 150;</code>
     */
    public float getCW2() {
      return cW2_;
    }

    public static final int CW3_FIELD_NUMBER = 151;
    private float cW3_;
    /**
     * <code>float CW3 = 151;</code>
     */
    public float getCW3() {
      return cW3_;
    }

    public static final int CW4_FIELD_NUMBER = 152;
    private float cW4_;
    /**
     * <code>float CW4 = 152;</code>
     */
    public float getCW4() {
      return cW4_;
    }

    public static final int AXAYAZ_FIELD_NUMBER = 153;
    private long axAyAz_;
    /**
     * <code>uint64 AxAyAz = 153;</code>
     */
    public long getAxAyAz() {
      return axAyAz_;
    }

    public static final int YAWPITCHROLL_FIELD_NUMBER = 154;
    private long yawPitchRoll_;
    /**
     * <code>uint64 YawPitchRoll = 154;</code>
     */
    public long getYawPitchRoll() {
      return yawPitchRoll_;
    }

    public static final int BUSVOLTAGE_FIELD_NUMBER = 155;
    private float busVoltage_;
    /**
     * <code>float busVoltage = 155;</code>
     */
    public float getBusVoltage() {
      return busVoltage_;
    }

    public static final int MCUMICSSTATUS_FIELD_NUMBER = 156;
    private int mcuMicsStatus_;
    /**
     * <code>uint32 mcuMicsStatus = 156;</code>
     */
    public int getMcuMicsStatus() {
      return mcuMicsStatus_;
    }

    public static final int THROTTLE_IQ_CMD_FIELD_NUMBER = 157;
    private float throttleIqCmd_;
    /**
     * <code>float throttle_iq_cmd = 157;</code>
     */
    public float getThrottleIqCmd() {
      return throttleIqCmd_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (sequence_ != 0) {
        output.writeUInt32(2, sequence_);
      }
      if (ignitionState_ != false) {
        output.writeBool(3, ignitionState_);
      }
      if (odometer_ != 0F) {
        output.writeFloat(4, odometer_);
      }
      if (rpm_ != 0) {
        output.writeUInt32(5, rpm_);
      }
      if (speed_ != 0) {
        output.writeUInt32(6, speed_);
      }
      if (lat_ != 0F) {
        output.writeFloat(7, lat_);
      }
      if (lng_ != 0F) {
        output.writeFloat(8, lng_);
      }
      if (alt_ != 0F) {
        output.writeFloat(9, alt_);
      }
      if (gpsSpeed_ != 0F) {
        output.writeFloat(10, gpsSpeed_);
      }
      if (gpsCourse_ != 0F) {
        output.writeFloat(11, gpsCourse_);
      }
      if (gpsHDOP_ != 0F) {
        output.writeFloat(12, gpsHDOP_);
      }
      if (gpsVDOP_ != 0F) {
        output.writeFloat(13, gpsVDOP_);
      }
      if (gpsPDOP_ != 0F) {
        output.writeFloat(14, gpsPDOP_);
      }
      if (gpsFixModeStatus_ != 0) {
        output.writeUInt32(15, gpsFixModeStatus_);
      }
      if (satellitesUsed_ != 0) {
        output.writeUInt32(16, satellitesUsed_);
      }
      if (nwLAC_ != 0) {
        output.writeUInt32(17, nwLAC_);
      }
      if (nwCID_ != 0) {
        output.writeUInt32(18, nwCID_);
      }
      if (!getIMSIBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, iMSI_);
      }
      if (!getIMEIBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, iMEI_);
      }
      if (rSSI_ != 0) {
        output.writeUInt32(21, rSSI_);
      }
      if (!getNetworkOperatorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, networkOperator_);
      }
      if (t1_ != 0) {
        output.writeUInt32(23, t1_);
      }
      if (t2_ != 0) {
        output.writeUInt32(24, t2_);
      }
      if (t3_ != 0) {
        output.writeUInt32(25, t3_);
      }
      if (auxBatteryVoltage_ != 0) {
        output.writeUInt32(26, auxBatteryVoltage_);
      }
      if (auxBatteryPercentage_ != 0) {
        output.writeUInt32(27, auxBatteryPercentage_);
      }
      if (hwVersion_ != 0) {
        output.writeUInt32(28, hwVersion_);
      }
      if (fwVersion_ != 0) {
        output.writeUInt32(29, fwVersion_);
      }
      if (sdCardSize_ != 0) {
        output.writeUInt32(30, sdCardSize_);
      }
      if (sdCardStatus_ != false) {
        output.writeBool(31, sdCardStatus_);
      }
      if (motorCurrent_ != 0) {
        output.writeUInt32(32, motorCurrent_);
      }
      if (motorRPM_ != 0) {
        output.writeUInt32(33, motorRPM_);
      }
      if (motorTemperature_ != 0) {
        output.writeUInt32(34, motorTemperature_);
      }
      if (motorControllerTemperature_ != 0) {
        output.writeUInt32(35, motorControllerTemperature_);
      }
      if (motorStatusInfo_ != 0) {
        output.writeUInt32(36, motorStatusInfo_);
      }
      if (motorErrorInfo_ != 0) {
        output.writeUInt32(37, motorErrorInfo_);
      }
      if (batteryID_ != 0L) {
        output.writeUInt64(38, batteryID_);
      }
      if (batteryVoltage_ != 0) {
        output.writeUInt32(39, batteryVoltage_);
      }
      if (batteryCurrent_ != 0) {
        output.writeInt32(40, batteryCurrent_);
      }
      if (batterySoC_ != 0) {
        output.writeUInt32(41, batterySoC_);
      }
      if (batterySoH_ != 0) {
        output.writeUInt32(42, batterySoH_);
      }
      if (batterySOP_ != 0) {
        output.writeUInt32(43, batterySOP_);
      }
      if (batteryCellVoltage_ != 0) {
        output.writeUInt32(44, batteryCellVoltage_);
      }
      if (batteryModuleTemp_ != 0) {
        output.writeUInt32(45, batteryModuleTemp_);
      }
      if (batteryPDUBMSTemp_ != 0) {
        output.writeUInt32(46, batteryPDUBMSTemp_);
      }
      if (batteryCellBalMap_ != 0) {
        output.writeUInt32(47, batteryCellBalMap_);
      }
      if (batteryEquCycleCount_ != 0) {
        output.writeUInt32(48, batteryEquCycleCount_);
      }
      if (batteryLifetimeChargeCap_ != 0) {
        output.writeUInt32(49, batteryLifetimeChargeCap_);
      }
      if (batteryLifetimeDishargeCap_ != 0) {
        output.writeUInt32(50, batteryLifetimeDishargeCap_);
      }
      if (batteryErrorInfo_ != 0) {
        output.writeUInt32(51, batteryErrorInfo_);
      }
      if (batteryWarningInfo_ != 0) {
        output.writeUInt32(52, batteryWarningInfo_);
      }
      if (batteryID2_ != 0L) {
        output.writeUInt64(53, batteryID2_);
      }
      if (batteryVoltage2_ != 0) {
        output.writeUInt32(54, batteryVoltage2_);
      }
      if (batteryCurrent2_ != 0) {
        output.writeInt32(55, batteryCurrent2_);
      }
      if (batterySoC2_ != 0) {
        output.writeUInt32(56, batterySoC2_);
      }
      if (batterySoH2_ != 0) {
        output.writeUInt32(57, batterySoH2_);
      }
      if (batterySOP2_ != 0) {
        output.writeUInt32(58, batterySOP2_);
      }
      if (batteryCellVoltage2_ != 0) {
        output.writeUInt32(59, batteryCellVoltage2_);
      }
      if (batteryModuleTemp2_ != 0) {
        output.writeUInt32(60, batteryModuleTemp2_);
      }
      if (batteryPDUBMSTemp2_ != 0) {
        output.writeUInt32(61, batteryPDUBMSTemp2_);
      }
      if (batteryCellBalMap2_ != 0) {
        output.writeUInt32(62, batteryCellBalMap2_);
      }
      if (batteryEquCycleCount2_ != 0) {
        output.writeUInt32(63, batteryEquCycleCount2_);
      }
      if (batteryLifetimeChargeCap2_ != 0) {
        output.writeUInt32(64, batteryLifetimeChargeCap2_);
      }
      if (batteryLifetimeDishargeCap2_ != 0) {
        output.writeUInt32(65, batteryLifetimeDishargeCap2_);
      }
      if (batteryErrorInfo2_ != 0) {
        output.writeUInt32(66, batteryErrorInfo2_);
      }
      if (batteryWarningInfo2_ != 0) {
        output.writeUInt32(67, batteryWarningInfo2_);
      }
      if (vehicleState_ != 0) {
        output.writeUInt32(78, vehicleState_);
      }
      if (dTE_ != 0) {
        output.writeUInt32(79, dTE_);
      }
      if (displayControllerHwVersion_ != 0) {
        output.writeUInt32(80, displayControllerHwVersion_);
      }
      if (displayControllerSwVersion_ != 0) {
        output.writeUInt32(81, displayControllerSwVersion_);
      }
      if (alertsStatus_ != 0) {
        output.writeUInt32(82, alertsStatus_);
      }
      if (diagnosticErrorCode_ != 0) {
        output.writeUInt32(83, diagnosticErrorCode_);
      }
      if (batteryStatusInfo_ != 0) {
        output.writeUInt32(84, batteryStatusInfo_);
      }
      if (nwModeMismatch_ != false) {
        output.writeBool(85, nwModeMismatch_);
      }
      if (bmsWarnDetected_ != false) {
        output.writeBool(86, bmsWarnDetected_);
      }
      if (testerDischargeReq_ != false) {
        output.writeBool(87, testerDischargeReq_);
      }
      if (testerChargeReq_ != false) {
        output.writeBool(88, testerChargeReq_);
      }
      if (batteryBalStatus_ != false) {
        output.writeBool(89, batteryBalStatus_);
      }
      if (batteryAuthData_ != 0) {
        output.writeUInt32(90, batteryAuthData_);
      }
      if (batteryFullCapacity_ != 0) {
        output.writeUInt32(91, batteryFullCapacity_);
      }
      if (maxChargeCurrent_ != 0) {
        output.writeInt32(92, maxChargeCurrent_);
      }
      if (maxChargeVoltage_ != 0) {
        output.writeUInt32(93, maxChargeVoltage_);
      }
      if (maxDischargeCurrent_ != 0) {
        output.writeUInt32(94, maxDischargeCurrent_);
      }
      if (bmsState_ != 0) {
        output.writeUInt32(95, bmsState_);
      }
      if (cellTemp_ != 0) {
        output.writeUInt32(96, cellTemp_);
      }
      if (bmsFWInitVrsn_ != 0) {
        output.writeUInt32(97, bmsFWInitVrsn_);
      }
      if (bmsFwSAPVrsn_ != 0) {
        output.writeUInt32(98, bmsFwSAPVrsn_);
      }
      if (bmsCFGVrsn_ != 0) {
        output.writeUInt32(99, bmsCFGVrsn_);
      }
      if (bmsDBCVrsn_ != 0) {
        output.writeUInt32(100, bmsDBCVrsn_);
      }
      if (tcuCustmerCode_ != 0) {
        output.writeUInt32(101, tcuCustmerCode_);
      }
      if (tcuSWVrsn_ != 0) {
        output.writeUInt32(102, tcuSWVrsn_);
      }
      if (cycleChargeCapacity_ != 0) {
        output.writeUInt32(103, cycleChargeCapacity_);
      }
      if (cycleDischargeCapacity_ != 0) {
        output.writeUInt32(104, cycleDischargeCapacity_);
      }
      if (availableCapacity_ != 0) {
        output.writeUInt32(105, availableCapacity_);
      }
      if (availableEnergy_ != 0) {
        output.writeUInt32(106, availableEnergy_);
      }
      if (batteryInfo1_ != 0) {
        output.writeUInt32(107, batteryInfo1_);
      }
      if (batteryInfo2_ != 0) {
        output.writeUInt32(108, batteryInfo2_);
      }
      if (batteryInfo3_ != 0) {
        output.writeUInt32(109, batteryInfo3_);
      }
      if (batteryInfo4_ != 0) {
        output.writeUInt32(110, batteryInfo4_);
      }
      if (batteryInfo5_ != 0) {
        output.writeUInt32(111, batteryInfo5_);
      }
      if (canTimeOut_ != false) {
        output.writeBool(112, canTimeOut_);
      }
      if (bmsTime_ != 0) {
        output.writeUInt32(113, bmsTime_);
      }
      if (tcuTime_ != 0) {
        output.writeUInt32(114, tcuTime_);
      }
      if (batteryStatusInfo2_ != 0) {
        output.writeUInt32(115, batteryStatusInfo2_);
      }
      if (nwModeMismatch2_ != false) {
        output.writeBool(116, nwModeMismatch2_);
      }
      if (bmsWarnDetected2_ != false) {
        output.writeBool(117, bmsWarnDetected2_);
      }
      if (testerDischargeReq2_ != false) {
        output.writeBool(118, testerDischargeReq2_);
      }
      if (testerChargeReq2_ != false) {
        output.writeBool(119, testerChargeReq2_);
      }
      if (batteryBalStatus2_ != false) {
        output.writeBool(120, batteryBalStatus2_);
      }
      if (batteryAuthData2_ != 0) {
        output.writeUInt32(121, batteryAuthData2_);
      }
      if (batteryFullCapacity2_ != 0) {
        output.writeUInt32(122, batteryFullCapacity2_);
      }
      if (maxChargeCurrent2_ != 0) {
        output.writeInt32(123, maxChargeCurrent2_);
      }
      if (maxChargeVoltage2_ != 0) {
        output.writeUInt32(124, maxChargeVoltage2_);
      }
      if (maxDischargeCurrent2_ != 0) {
        output.writeUInt32(125, maxDischargeCurrent2_);
      }
      if (bmsState2_ != 0) {
        output.writeUInt32(126, bmsState2_);
      }
      if (cellTemp2_ != 0) {
        output.writeUInt32(127, cellTemp2_);
      }
      if (bmsFWInitVrsn2_ != 0) {
        output.writeUInt32(128, bmsFWInitVrsn2_);
      }
      if (bmsFwSAPVrsn2_ != 0) {
        output.writeUInt32(129, bmsFwSAPVrsn2_);
      }
      if (bmsCFGVrsn2_ != 0) {
        output.writeUInt32(130, bmsCFGVrsn2_);
      }
      if (bmsDBCVrsn2_ != 0) {
        output.writeUInt32(131, bmsDBCVrsn2_);
      }
      if (tcuCustmerCode2_ != 0) {
        output.writeUInt32(132, tcuCustmerCode2_);
      }
      if (tcuSWVrsn2_ != 0) {
        output.writeUInt32(133, tcuSWVrsn2_);
      }
      if (cycleChargeCapacity2_ != 0) {
        output.writeUInt32(134, cycleChargeCapacity2_);
      }
      if (cycleDischargeCapacity2_ != 0) {
        output.writeUInt32(135, cycleDischargeCapacity2_);
      }
      if (availableCapacity2_ != 0) {
        output.writeUInt32(136, availableCapacity2_);
      }
      if (availableEnergy2_ != 0) {
        output.writeUInt32(137, availableEnergy2_);
      }
      if (battery2Info1_ != 0) {
        output.writeUInt32(138, battery2Info1_);
      }
      if (battery2Info2_ != 0) {
        output.writeUInt32(139, battery2Info2_);
      }
      if (battery2Info3_ != 0) {
        output.writeUInt32(140, battery2Info3_);
      }
      if (battery2Info4_ != 0) {
        output.writeUInt32(141, battery2Info4_);
      }
      if (battery2Info5_ != 0) {
        output.writeUInt32(142, battery2Info5_);
      }
      if (canTimeOut2_ != false) {
        output.writeBool(143, canTimeOut2_);
      }
      if (bmsTime2_ != 0) {
        output.writeUInt32(144, bmsTime2_);
      }
      if (tcuTime2_ != 0) {
        output.writeUInt32(145, tcuTime2_);
      }
      if (remoteImmobilization_ != false) {
        output.writeBool(146, remoteImmobilization_);
      }
      if (bootLockStatus_ != false) {
        output.writeBool(147, bootLockStatus_);
      }
      if (ignitionEnableStatus_ != false) {
        output.writeBool(148, ignitionEnableStatus_);
      }
      if (cW1_ != 0F) {
        output.writeFloat(149, cW1_);
      }
      if (cW2_ != 0F) {
        output.writeFloat(150, cW2_);
      }
      if (cW3_ != 0F) {
        output.writeFloat(151, cW3_);
      }
      if (cW4_ != 0F) {
        output.writeFloat(152, cW4_);
      }
      if (axAyAz_ != 0L) {
        output.writeUInt64(153, axAyAz_);
      }
      if (yawPitchRoll_ != 0L) {
        output.writeUInt64(154, yawPitchRoll_);
      }
      if (busVoltage_ != 0F) {
        output.writeFloat(155, busVoltage_);
      }
      if (mcuMicsStatus_ != 0) {
        output.writeUInt32(156, mcuMicsStatus_);
      }
      if (throttleIqCmd_ != 0F) {
        output.writeFloat(157, throttleIqCmd_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (sequence_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, sequence_);
      }
      if (ignitionState_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ignitionState_);
      }
      if (odometer_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, odometer_);
      }
      if (rpm_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, rpm_);
      }
      if (speed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, speed_);
      }
      if (lat_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, lat_);
      }
      if (lng_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, lng_);
      }
      if (alt_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, alt_);
      }
      if (gpsSpeed_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, gpsSpeed_);
      }
      if (gpsCourse_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, gpsCourse_);
      }
      if (gpsHDOP_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, gpsHDOP_);
      }
      if (gpsVDOP_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, gpsVDOP_);
      }
      if (gpsPDOP_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, gpsPDOP_);
      }
      if (gpsFixModeStatus_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, gpsFixModeStatus_);
      }
      if (satellitesUsed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, satellitesUsed_);
      }
      if (nwLAC_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, nwLAC_);
      }
      if (nwCID_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, nwCID_);
      }
      if (!getIMSIBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, iMSI_);
      }
      if (!getIMEIBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, iMEI_);
      }
      if (rSSI_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, rSSI_);
      }
      if (!getNetworkOperatorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, networkOperator_);
      }
      if (t1_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, t1_);
      }
      if (t2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, t2_);
      }
      if (t3_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, t3_);
      }
      if (auxBatteryVoltage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, auxBatteryVoltage_);
      }
      if (auxBatteryPercentage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, auxBatteryPercentage_);
      }
      if (hwVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(28, hwVersion_);
      }
      if (fwVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, fwVersion_);
      }
      if (sdCardSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, sdCardSize_);
      }
      if (sdCardStatus_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(31, sdCardStatus_);
      }
      if (motorCurrent_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, motorCurrent_);
      }
      if (motorRPM_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, motorRPM_);
      }
      if (motorTemperature_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(34, motorTemperature_);
      }
      if (motorControllerTemperature_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(35, motorControllerTemperature_);
      }
      if (motorStatusInfo_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(36, motorStatusInfo_);
      }
      if (motorErrorInfo_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(37, motorErrorInfo_);
      }
      if (batteryID_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(38, batteryID_);
      }
      if (batteryVoltage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(39, batteryVoltage_);
      }
      if (batteryCurrent_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(40, batteryCurrent_);
      }
      if (batterySoC_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(41, batterySoC_);
      }
      if (batterySoH_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(42, batterySoH_);
      }
      if (batterySOP_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(43, batterySOP_);
      }
      if (batteryCellVoltage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(44, batteryCellVoltage_);
      }
      if (batteryModuleTemp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(45, batteryModuleTemp_);
      }
      if (batteryPDUBMSTemp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(46, batteryPDUBMSTemp_);
      }
      if (batteryCellBalMap_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(47, batteryCellBalMap_);
      }
      if (batteryEquCycleCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(48, batteryEquCycleCount_);
      }
      if (batteryLifetimeChargeCap_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(49, batteryLifetimeChargeCap_);
      }
      if (batteryLifetimeDishargeCap_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(50, batteryLifetimeDishargeCap_);
      }
      if (batteryErrorInfo_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(51, batteryErrorInfo_);
      }
      if (batteryWarningInfo_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(52, batteryWarningInfo_);
      }
      if (batteryID2_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(53, batteryID2_);
      }
      if (batteryVoltage2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(54, batteryVoltage2_);
      }
      if (batteryCurrent2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(55, batteryCurrent2_);
      }
      if (batterySoC2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(56, batterySoC2_);
      }
      if (batterySoH2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(57, batterySoH2_);
      }
      if (batterySOP2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(58, batterySOP2_);
      }
      if (batteryCellVoltage2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(59, batteryCellVoltage2_);
      }
      if (batteryModuleTemp2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(60, batteryModuleTemp2_);
      }
      if (batteryPDUBMSTemp2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(61, batteryPDUBMSTemp2_);
      }
      if (batteryCellBalMap2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(62, batteryCellBalMap2_);
      }
      if (batteryEquCycleCount2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(63, batteryEquCycleCount2_);
      }
      if (batteryLifetimeChargeCap2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(64, batteryLifetimeChargeCap2_);
      }
      if (batteryLifetimeDishargeCap2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(65, batteryLifetimeDishargeCap2_);
      }
      if (batteryErrorInfo2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(66, batteryErrorInfo2_);
      }
      if (batteryWarningInfo2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(67, batteryWarningInfo2_);
      }
      if (vehicleState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(78, vehicleState_);
      }
      if (dTE_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(79, dTE_);
      }
      if (displayControllerHwVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(80, displayControllerHwVersion_);
      }
      if (displayControllerSwVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(81, displayControllerSwVersion_);
      }
      if (alertsStatus_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(82, alertsStatus_);
      }
      if (diagnosticErrorCode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(83, diagnosticErrorCode_);
      }
      if (batteryStatusInfo_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(84, batteryStatusInfo_);
      }
      if (nwModeMismatch_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(85, nwModeMismatch_);
      }
      if (bmsWarnDetected_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(86, bmsWarnDetected_);
      }
      if (testerDischargeReq_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(87, testerDischargeReq_);
      }
      if (testerChargeReq_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(88, testerChargeReq_);
      }
      if (batteryBalStatus_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(89, batteryBalStatus_);
      }
      if (batteryAuthData_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(90, batteryAuthData_);
      }
      if (batteryFullCapacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(91, batteryFullCapacity_);
      }
      if (maxChargeCurrent_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(92, maxChargeCurrent_);
      }
      if (maxChargeVoltage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(93, maxChargeVoltage_);
      }
      if (maxDischargeCurrent_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(94, maxDischargeCurrent_);
      }
      if (bmsState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(95, bmsState_);
      }
      if (cellTemp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(96, cellTemp_);
      }
      if (bmsFWInitVrsn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(97, bmsFWInitVrsn_);
      }
      if (bmsFwSAPVrsn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(98, bmsFwSAPVrsn_);
      }
      if (bmsCFGVrsn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(99, bmsCFGVrsn_);
      }
      if (bmsDBCVrsn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(100, bmsDBCVrsn_);
      }
      if (tcuCustmerCode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(101, tcuCustmerCode_);
      }
      if (tcuSWVrsn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(102, tcuSWVrsn_);
      }
      if (cycleChargeCapacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(103, cycleChargeCapacity_);
      }
      if (cycleDischargeCapacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(104, cycleDischargeCapacity_);
      }
      if (availableCapacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(105, availableCapacity_);
      }
      if (availableEnergy_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(106, availableEnergy_);
      }
      if (batteryInfo1_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(107, batteryInfo1_);
      }
      if (batteryInfo2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(108, batteryInfo2_);
      }
      if (batteryInfo3_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(109, batteryInfo3_);
      }
      if (batteryInfo4_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(110, batteryInfo4_);
      }
      if (batteryInfo5_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(111, batteryInfo5_);
      }
      if (canTimeOut_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(112, canTimeOut_);
      }
      if (bmsTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(113, bmsTime_);
      }
      if (tcuTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(114, tcuTime_);
      }
      if (batteryStatusInfo2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(115, batteryStatusInfo2_);
      }
      if (nwModeMismatch2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(116, nwModeMismatch2_);
      }
      if (bmsWarnDetected2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(117, bmsWarnDetected2_);
      }
      if (testerDischargeReq2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(118, testerDischargeReq2_);
      }
      if (testerChargeReq2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(119, testerChargeReq2_);
      }
      if (batteryBalStatus2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(120, batteryBalStatus2_);
      }
      if (batteryAuthData2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(121, batteryAuthData2_);
      }
      if (batteryFullCapacity2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(122, batteryFullCapacity2_);
      }
      if (maxChargeCurrent2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(123, maxChargeCurrent2_);
      }
      if (maxChargeVoltage2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(124, maxChargeVoltage2_);
      }
      if (maxDischargeCurrent2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(125, maxDischargeCurrent2_);
      }
      if (bmsState2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(126, bmsState2_);
      }
      if (cellTemp2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(127, cellTemp2_);
      }
      if (bmsFWInitVrsn2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(128, bmsFWInitVrsn2_);
      }
      if (bmsFwSAPVrsn2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(129, bmsFwSAPVrsn2_);
      }
      if (bmsCFGVrsn2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(130, bmsCFGVrsn2_);
      }
      if (bmsDBCVrsn2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(131, bmsDBCVrsn2_);
      }
      if (tcuCustmerCode2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(132, tcuCustmerCode2_);
      }
      if (tcuSWVrsn2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(133, tcuSWVrsn2_);
      }
      if (cycleChargeCapacity2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(134, cycleChargeCapacity2_);
      }
      if (cycleDischargeCapacity2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(135, cycleDischargeCapacity2_);
      }
      if (availableCapacity2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(136, availableCapacity2_);
      }
      if (availableEnergy2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(137, availableEnergy2_);
      }
      if (battery2Info1_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(138, battery2Info1_);
      }
      if (battery2Info2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(139, battery2Info2_);
      }
      if (battery2Info3_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(140, battery2Info3_);
      }
      if (battery2Info4_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(141, battery2Info4_);
      }
      if (battery2Info5_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(142, battery2Info5_);
      }
      if (canTimeOut2_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(143, canTimeOut2_);
      }
      if (bmsTime2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(144, bmsTime2_);
      }
      if (tcuTime2_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(145, tcuTime2_);
      }
      if (remoteImmobilization_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(146, remoteImmobilization_);
      }
      if (bootLockStatus_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(147, bootLockStatus_);
      }
      if (ignitionEnableStatus_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(148, ignitionEnableStatus_);
      }
      if (cW1_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(149, cW1_);
      }
      if (cW2_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(150, cW2_);
      }
      if (cW3_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(151, cW3_);
      }
      if (cW4_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(152, cW4_);
      }
      if (axAyAz_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(153, axAyAz_);
      }
      if (yawPitchRoll_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(154, yawPitchRoll_);
      }
      if (busVoltage_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(155, busVoltage_);
      }
      if (mcuMicsStatus_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(156, mcuMicsStatus_);
      }
      if (throttleIqCmd_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(157, throttleIqCmd_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof OtcV3R5APlus.DeviceDataV3)) {
        return super.equals(obj);
      }
      OtcV3R5APlus.DeviceDataV3 other = (OtcV3R5APlus.DeviceDataV3) obj;

      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (getIgnitionState()
          != other.getIgnitionState()) return false;
      if (java.lang.Float.floatToIntBits(getOdometer())
          != java.lang.Float.floatToIntBits(
              other.getOdometer())) return false;
      if (getRpm()
          != other.getRpm()) return false;
      if (getSpeed()
          != other.getSpeed()) return false;
      if (java.lang.Float.floatToIntBits(getLat())
          != java.lang.Float.floatToIntBits(
              other.getLat())) return false;
      if (java.lang.Float.floatToIntBits(getLng())
          != java.lang.Float.floatToIntBits(
              other.getLng())) return false;
      if (java.lang.Float.floatToIntBits(getAlt())
          != java.lang.Float.floatToIntBits(
              other.getAlt())) return false;
      if (java.lang.Float.floatToIntBits(getGpsSpeed())
          != java.lang.Float.floatToIntBits(
              other.getGpsSpeed())) return false;
      if (java.lang.Float.floatToIntBits(getGpsCourse())
          != java.lang.Float.floatToIntBits(
              other.getGpsCourse())) return false;
      if (java.lang.Float.floatToIntBits(getGpsHDOP())
          != java.lang.Float.floatToIntBits(
              other.getGpsHDOP())) return false;
      if (java.lang.Float.floatToIntBits(getGpsVDOP())
          != java.lang.Float.floatToIntBits(
              other.getGpsVDOP())) return false;
      if (java.lang.Float.floatToIntBits(getGpsPDOP())
          != java.lang.Float.floatToIntBits(
              other.getGpsPDOP())) return false;
      if (getGpsFixModeStatus()
          != other.getGpsFixModeStatus()) return false;
      if (getSatellitesUsed()
          != other.getSatellitesUsed()) return false;
      if (getNwLAC()
          != other.getNwLAC()) return false;
      if (getNwCID()
          != other.getNwCID()) return false;
      if (!getIMSI()
          .equals(other.getIMSI())) return false;
      if (!getIMEI()
          .equals(other.getIMEI())) return false;
      if (getRSSI()
          != other.getRSSI()) return false;
      if (!getNetworkOperator()
          .equals(other.getNetworkOperator())) return false;
      if (getT1()
          != other.getT1()) return false;
      if (getT2()
          != other.getT2()) return false;
      if (getT3()
          != other.getT3()) return false;
      if (getAuxBatteryVoltage()
          != other.getAuxBatteryVoltage()) return false;
      if (getAuxBatteryPercentage()
          != other.getAuxBatteryPercentage()) return false;
      if (getHwVersion()
          != other.getHwVersion()) return false;
      if (getFwVersion()
          != other.getFwVersion()) return false;
      if (getSdCardSize()
          != other.getSdCardSize()) return false;
      if (getSdCardStatus()
          != other.getSdCardStatus()) return false;
      if (getMotorCurrent()
          != other.getMotorCurrent()) return false;
      if (getMotorRPM()
          != other.getMotorRPM()) return false;
      if (getMotorTemperature()
          != other.getMotorTemperature()) return false;
      if (getMotorControllerTemperature()
          != other.getMotorControllerTemperature()) return false;
      if (getMotorStatusInfo()
          != other.getMotorStatusInfo()) return false;
      if (getMotorErrorInfo()
          != other.getMotorErrorInfo()) return false;
      if (getBatteryID()
          != other.getBatteryID()) return false;
      if (getBatteryVoltage()
          != other.getBatteryVoltage()) return false;
      if (getBatteryCurrent()
          != other.getBatteryCurrent()) return false;
      if (getBatterySoC()
          != other.getBatterySoC()) return false;
      if (getBatterySoH()
          != other.getBatterySoH()) return false;
      if (getBatterySOP()
          != other.getBatterySOP()) return false;
      if (getBatteryCellVoltage()
          != other.getBatteryCellVoltage()) return false;
      if (getBatteryModuleTemp()
          != other.getBatteryModuleTemp()) return false;
      if (getBatteryPDUBMSTemp()
          != other.getBatteryPDUBMSTemp()) return false;
      if (getBatteryCellBalMap()
          != other.getBatteryCellBalMap()) return false;
      if (getBatteryEquCycleCount()
          != other.getBatteryEquCycleCount()) return false;
      if (getBatteryLifetimeChargeCap()
          != other.getBatteryLifetimeChargeCap()) return false;
      if (getBatteryLifetimeDishargeCap()
          != other.getBatteryLifetimeDishargeCap()) return false;
      if (getBatteryErrorInfo()
          != other.getBatteryErrorInfo()) return false;
      if (getBatteryWarningInfo()
          != other.getBatteryWarningInfo()) return false;
      if (getBatteryID2()
          != other.getBatteryID2()) return false;
      if (getBatteryVoltage2()
          != other.getBatteryVoltage2()) return false;
      if (getBatteryCurrent2()
          != other.getBatteryCurrent2()) return false;
      if (getBatterySoC2()
          != other.getBatterySoC2()) return false;
      if (getBatterySoH2()
          != other.getBatterySoH2()) return false;
      if (getBatterySOP2()
          != other.getBatterySOP2()) return false;
      if (getBatteryCellVoltage2()
          != other.getBatteryCellVoltage2()) return false;
      if (getBatteryModuleTemp2()
          != other.getBatteryModuleTemp2()) return false;
      if (getBatteryPDUBMSTemp2()
          != other.getBatteryPDUBMSTemp2()) return false;
      if (getBatteryCellBalMap2()
          != other.getBatteryCellBalMap2()) return false;
      if (getBatteryEquCycleCount2()
          != other.getBatteryEquCycleCount2()) return false;
      if (getBatteryLifetimeChargeCap2()
          != other.getBatteryLifetimeChargeCap2()) return false;
      if (getBatteryLifetimeDishargeCap2()
          != other.getBatteryLifetimeDishargeCap2()) return false;
      if (getBatteryErrorInfo2()
          != other.getBatteryErrorInfo2()) return false;
      if (getBatteryWarningInfo2()
          != other.getBatteryWarningInfo2()) return false;
      if (getVehicleState()
          != other.getVehicleState()) return false;
      if (getDTE()
          != other.getDTE()) return false;
      if (getDisplayControllerHwVersion()
          != other.getDisplayControllerHwVersion()) return false;
      if (getDisplayControllerSwVersion()
          != other.getDisplayControllerSwVersion()) return false;
      if (getAlertsStatus()
          != other.getAlertsStatus()) return false;
      if (getDiagnosticErrorCode()
          != other.getDiagnosticErrorCode()) return false;
      if (getBatteryStatusInfo()
          != other.getBatteryStatusInfo()) return false;
      if (getNwModeMismatch()
          != other.getNwModeMismatch()) return false;
      if (getBmsWarnDetected()
          != other.getBmsWarnDetected()) return false;
      if (getTesterDischargeReq()
          != other.getTesterDischargeReq()) return false;
      if (getTesterChargeReq()
          != other.getTesterChargeReq()) return false;
      if (getBatteryBalStatus()
          != other.getBatteryBalStatus()) return false;
      if (getBatteryAuthData()
          != other.getBatteryAuthData()) return false;
      if (getBatteryFullCapacity()
          != other.getBatteryFullCapacity()) return false;
      if (getMaxChargeCurrent()
          != other.getMaxChargeCurrent()) return false;
      if (getMaxChargeVoltage()
          != other.getMaxChargeVoltage()) return false;
      if (getMaxDischargeCurrent()
          != other.getMaxDischargeCurrent()) return false;
      if (getBmsState()
          != other.getBmsState()) return false;
      if (getCellTemp()
          != other.getCellTemp()) return false;
      if (getBmsFWInitVrsn()
          != other.getBmsFWInitVrsn()) return false;
      if (getBmsFwSAPVrsn()
          != other.getBmsFwSAPVrsn()) return false;
      if (getBmsCFGVrsn()
          != other.getBmsCFGVrsn()) return false;
      if (getBmsDBCVrsn()
          != other.getBmsDBCVrsn()) return false;
      if (getTcuCustmerCode()
          != other.getTcuCustmerCode()) return false;
      if (getTcuSWVrsn()
          != other.getTcuSWVrsn()) return false;
      if (getCycleChargeCapacity()
          != other.getCycleChargeCapacity()) return false;
      if (getCycleDischargeCapacity()
          != other.getCycleDischargeCapacity()) return false;
      if (getAvailableCapacity()
          != other.getAvailableCapacity()) return false;
      if (getAvailableEnergy()
          != other.getAvailableEnergy()) return false;
      if (getBatteryInfo1()
          != other.getBatteryInfo1()) return false;
      if (getBatteryInfo2()
          != other.getBatteryInfo2()) return false;
      if (getBatteryInfo3()
          != other.getBatteryInfo3()) return false;
      if (getBatteryInfo4()
          != other.getBatteryInfo4()) return false;
      if (getBatteryInfo5()
          != other.getBatteryInfo5()) return false;
      if (getCanTimeOut()
          != other.getCanTimeOut()) return false;
      if (getBmsTime()
          != other.getBmsTime()) return false;
      if (getTcuTime()
          != other.getTcuTime()) return false;
      if (getBatteryStatusInfo2()
          != other.getBatteryStatusInfo2()) return false;
      if (getNwModeMismatch2()
          != other.getNwModeMismatch2()) return false;
      if (getBmsWarnDetected2()
          != other.getBmsWarnDetected2()) return false;
      if (getTesterDischargeReq2()
          != other.getTesterDischargeReq2()) return false;
      if (getTesterChargeReq2()
          != other.getTesterChargeReq2()) return false;
      if (getBatteryBalStatus2()
          != other.getBatteryBalStatus2()) return false;
      if (getBatteryAuthData2()
          != other.getBatteryAuthData2()) return false;
      if (getBatteryFullCapacity2()
          != other.getBatteryFullCapacity2()) return false;
      if (getMaxChargeCurrent2()
          != other.getMaxChargeCurrent2()) return false;
      if (getMaxChargeVoltage2()
          != other.getMaxChargeVoltage2()) return false;
      if (getMaxDischargeCurrent2()
          != other.getMaxDischargeCurrent2()) return false;
      if (getBmsState2()
          != other.getBmsState2()) return false;
      if (getCellTemp2()
          != other.getCellTemp2()) return false;
      if (getBmsFWInitVrsn2()
          != other.getBmsFWInitVrsn2()) return false;
      if (getBmsFwSAPVrsn2()
          != other.getBmsFwSAPVrsn2()) return false;
      if (getBmsCFGVrsn2()
          != other.getBmsCFGVrsn2()) return false;
      if (getBmsDBCVrsn2()
          != other.getBmsDBCVrsn2()) return false;
      if (getTcuCustmerCode2()
          != other.getTcuCustmerCode2()) return false;
      if (getTcuSWVrsn2()
          != other.getTcuSWVrsn2()) return false;
      if (getCycleChargeCapacity2()
          != other.getCycleChargeCapacity2()) return false;
      if (getCycleDischargeCapacity2()
          != other.getCycleDischargeCapacity2()) return false;
      if (getAvailableCapacity2()
          != other.getAvailableCapacity2()) return false;
      if (getAvailableEnergy2()
          != other.getAvailableEnergy2()) return false;
      if (getBattery2Info1()
          != other.getBattery2Info1()) return false;
      if (getBattery2Info2()
          != other.getBattery2Info2()) return false;
      if (getBattery2Info3()
          != other.getBattery2Info3()) return false;
      if (getBattery2Info4()
          != other.getBattery2Info4()) return false;
      if (getBattery2Info5()
          != other.getBattery2Info5()) return false;
      if (getCanTimeOut2()
          != other.getCanTimeOut2()) return false;
      if (getBmsTime2()
          != other.getBmsTime2()) return false;
      if (getTcuTime2()
          != other.getTcuTime2()) return false;
      if (getRemoteImmobilization()
          != other.getRemoteImmobilization()) return false;
      if (getBootLockStatus()
          != other.getBootLockStatus()) return false;
      if (getIgnitionEnableStatus()
          != other.getIgnitionEnableStatus()) return false;
      if (java.lang.Float.floatToIntBits(getCW1())
          != java.lang.Float.floatToIntBits(
              other.getCW1())) return false;
      if (java.lang.Float.floatToIntBits(getCW2())
          != java.lang.Float.floatToIntBits(
              other.getCW2())) return false;
      if (java.lang.Float.floatToIntBits(getCW3())
          != java.lang.Float.floatToIntBits(
              other.getCW3())) return false;
      if (java.lang.Float.floatToIntBits(getCW4())
          != java.lang.Float.floatToIntBits(
              other.getCW4())) return false;
      if (getAxAyAz()
          != other.getAxAyAz()) return false;
      if (getYawPitchRoll()
          != other.getYawPitchRoll()) return false;
      if (java.lang.Float.floatToIntBits(getBusVoltage())
          != java.lang.Float.floatToIntBits(
              other.getBusVoltage())) return false;
      if (getMcuMicsStatus()
          != other.getMcuMicsStatus()) return false;
      if (java.lang.Float.floatToIntBits(getThrottleIqCmd())
          != java.lang.Float.floatToIntBits(
              other.getThrottleIqCmd())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSequence();
      hash = (37 * hash) + IGNITIONSTATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIgnitionState());
      hash = (37 * hash) + ODOMETER_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getOdometer());
      hash = (37 * hash) + RPM_FIELD_NUMBER;
      hash = (53 * hash) + getRpm();
      hash = (37 * hash) + SPEED_FIELD_NUMBER;
      hash = (53 * hash) + getSpeed();
      hash = (37 * hash) + LAT_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLat());
      hash = (37 * hash) + LNG_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLng());
      hash = (37 * hash) + ALT_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getAlt());
      hash = (37 * hash) + GPSSPEED_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getGpsSpeed());
      hash = (37 * hash) + GPSCOURSE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getGpsCourse());
      hash = (37 * hash) + GPSHDOP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getGpsHDOP());
      hash = (37 * hash) + GPSVDOP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getGpsVDOP());
      hash = (37 * hash) + GPSPDOP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getGpsPDOP());
      hash = (37 * hash) + GPSFIXMODESTATUS_FIELD_NUMBER;
      hash = (53 * hash) + getGpsFixModeStatus();
      hash = (37 * hash) + SATELLITESUSED_FIELD_NUMBER;
      hash = (53 * hash) + getSatellitesUsed();
      hash = (37 * hash) + NWLAC_FIELD_NUMBER;
      hash = (53 * hash) + getNwLAC();
      hash = (37 * hash) + NWCID_FIELD_NUMBER;
      hash = (53 * hash) + getNwCID();
      hash = (37 * hash) + IMSI_FIELD_NUMBER;
      hash = (53 * hash) + getIMSI().hashCode();
      hash = (37 * hash) + IMEI_FIELD_NUMBER;
      hash = (53 * hash) + getIMEI().hashCode();
      hash = (37 * hash) + RSSI_FIELD_NUMBER;
      hash = (53 * hash) + getRSSI();
      hash = (37 * hash) + NETWORKOPERATOR_FIELD_NUMBER;
      hash = (53 * hash) + getNetworkOperator().hashCode();
      hash = (37 * hash) + T1_FIELD_NUMBER;
      hash = (53 * hash) + getT1();
      hash = (37 * hash) + T2_FIELD_NUMBER;
      hash = (53 * hash) + getT2();
      hash = (37 * hash) + T3_FIELD_NUMBER;
      hash = (53 * hash) + getT3();
      hash = (37 * hash) + AUXBATTERYVOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getAuxBatteryVoltage();
      hash = (37 * hash) + AUXBATTERYPERCENTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getAuxBatteryPercentage();
      hash = (37 * hash) + HWVERSION_FIELD_NUMBER;
      hash = (53 * hash) + getHwVersion();
      hash = (37 * hash) + FWVERSION_FIELD_NUMBER;
      hash = (53 * hash) + getFwVersion();
      hash = (37 * hash) + SDCARDSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSdCardSize();
      hash = (37 * hash) + SDCARDSTATUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSdCardStatus());
      hash = (37 * hash) + MOTORCURRENT_FIELD_NUMBER;
      hash = (53 * hash) + getMotorCurrent();
      hash = (37 * hash) + MOTORRPM_FIELD_NUMBER;
      hash = (53 * hash) + getMotorRPM();
      hash = (37 * hash) + MOTORTEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + getMotorTemperature();
      hash = (37 * hash) + MOTORCONTROLLERTEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + getMotorControllerTemperature();
      hash = (37 * hash) + MOTORSTATUSINFO_FIELD_NUMBER;
      hash = (53 * hash) + getMotorStatusInfo();
      hash = (37 * hash) + MOTORERRORINFO_FIELD_NUMBER;
      hash = (53 * hash) + getMotorErrorInfo();
      hash = (37 * hash) + BATTERYID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBatteryID());
      hash = (37 * hash) + BATTERYVOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryVoltage();
      hash = (37 * hash) + BATTERYCURRENT_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCurrent();
      hash = (37 * hash) + BATTERYSOC_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySoC();
      hash = (37 * hash) + BATTERYSOH_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySoH();
      hash = (37 * hash) + BATTERYSOP_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySOP();
      hash = (37 * hash) + BATTERYCELLVOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCellVoltage();
      hash = (37 * hash) + BATTERYMODULETEMP_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryModuleTemp();
      hash = (37 * hash) + BATTERYPDU_BMS_TEMP_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryPDUBMSTemp();
      hash = (37 * hash) + BATTERYCELLBALMAP_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCellBalMap();
      hash = (37 * hash) + BATTERYEQUCYCLECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryEquCycleCount();
      hash = (37 * hash) + BATTERYLIFETIMECHARGECAP_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryLifetimeChargeCap();
      hash = (37 * hash) + BATTERYLIFETIMEDISHARGECAP_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryLifetimeDishargeCap();
      hash = (37 * hash) + BATTERYERRORINFO_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryErrorInfo();
      hash = (37 * hash) + BATTERYWARNINGINFO_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryWarningInfo();
      hash = (37 * hash) + BATTERYID_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBatteryID2());
      hash = (37 * hash) + BATTERYVOLTAGE_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryVoltage2();
      hash = (37 * hash) + BATTERYCURRENT_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCurrent2();
      hash = (37 * hash) + BATTERYSOC_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySoC2();
      hash = (37 * hash) + BATTERYSOH_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySoH2();
      hash = (37 * hash) + BATTERYSOP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatterySOP2();
      hash = (37 * hash) + BATTERYCELLVOLTAGE_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCellVoltage2();
      hash = (37 * hash) + BATTERYMODULETEMP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryModuleTemp2();
      hash = (37 * hash) + BATTERYPDU_BMS_TEMP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryPDUBMSTemp2();
      hash = (37 * hash) + BATTERYCELLBALMAP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryCellBalMap2();
      hash = (37 * hash) + BATTERYEQUCYCLECOUNT_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryEquCycleCount2();
      hash = (37 * hash) + BATTERYLIFETIMECHARGECAP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryLifetimeChargeCap2();
      hash = (37 * hash) + BATTERYLIFETIMEDISHARGECAP_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryLifetimeDishargeCap2();
      hash = (37 * hash) + BATTERYERRORINFO_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryErrorInfo2();
      hash = (37 * hash) + BATTERYWARNINGINFO_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryWarningInfo2();
      hash = (37 * hash) + VEHICLESTATE_FIELD_NUMBER;
      hash = (53 * hash) + getVehicleState();
      hash = (37 * hash) + DTE_FIELD_NUMBER;
      hash = (53 * hash) + getDTE();
      hash = (37 * hash) + DISPLAYCONTROLLER_HW_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayControllerHwVersion();
      hash = (37 * hash) + DISPLAYCONTROLLER_SW_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayControllerSwVersion();
      hash = (37 * hash) + ALERTSSTATUS_FIELD_NUMBER;
      hash = (53 * hash) + getAlertsStatus();
      hash = (37 * hash) + DIAGNOSTICERRORCODE_FIELD_NUMBER;
      hash = (53 * hash) + getDiagnosticErrorCode();
      hash = (37 * hash) + BATTERYSTATUSINFO_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryStatusInfo();
      hash = (37 * hash) + NWMODEMISMATCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNwModeMismatch());
      hash = (37 * hash) + BMSWARNDETECTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBmsWarnDetected());
      hash = (37 * hash) + TESTERDISCHARGEREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTesterDischargeReq());
      hash = (37 * hash) + TESTERCHARGEREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTesterChargeReq());
      hash = (37 * hash) + BATTERYBALSTATUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBatteryBalStatus());
      hash = (37 * hash) + BATTERYAUTHDATA_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryAuthData();
      hash = (37 * hash) + BATTERYFULLCAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryFullCapacity();
      hash = (37 * hash) + MAXCHARGECURRENT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxChargeCurrent();
      hash = (37 * hash) + MAXCHARGEVOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMaxChargeVoltage();
      hash = (37 * hash) + MAXDISCHARGECURRENT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxDischargeCurrent();
      hash = (37 * hash) + BMSSTATE_FIELD_NUMBER;
      hash = (53 * hash) + getBmsState();
      hash = (37 * hash) + CELLTEMP_FIELD_NUMBER;
      hash = (53 * hash) + getCellTemp();
      hash = (37 * hash) + BMSFWINITVRSN_FIELD_NUMBER;
      hash = (53 * hash) + getBmsFWInitVrsn();
      hash = (37 * hash) + BMSFWSAPVRSN_FIELD_NUMBER;
      hash = (53 * hash) + getBmsFwSAPVrsn();
      hash = (37 * hash) + BMSCFGVRSN_FIELD_NUMBER;
      hash = (53 * hash) + getBmsCFGVrsn();
      hash = (37 * hash) + BMSDBCVRSN_FIELD_NUMBER;
      hash = (53 * hash) + getBmsDBCVrsn();
      hash = (37 * hash) + TCUCUSTMERCODE_FIELD_NUMBER;
      hash = (53 * hash) + getTcuCustmerCode();
      hash = (37 * hash) + TCUSWVRSN_FIELD_NUMBER;
      hash = (53 * hash) + getTcuSWVrsn();
      hash = (37 * hash) + CYCLECHARGECAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getCycleChargeCapacity();
      hash = (37 * hash) + CYCLEDISCHARGECAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getCycleDischargeCapacity();
      hash = (37 * hash) + AVAILABLECAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getAvailableCapacity();
      hash = (37 * hash) + AVAILABLEENERGY_FIELD_NUMBER;
      hash = (53 * hash) + getAvailableEnergy();
      hash = (37 * hash) + BATTERYINFO_1_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryInfo1();
      hash = (37 * hash) + BATTERYINFO_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryInfo2();
      hash = (37 * hash) + BATTERYINFO_3_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryInfo3();
      hash = (37 * hash) + BATTERYINFO_4_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryInfo4();
      hash = (37 * hash) + BATTERYINFO_5_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryInfo5();
      hash = (37 * hash) + CANTIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCanTimeOut());
      hash = (37 * hash) + BMSTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBmsTime();
      hash = (37 * hash) + TCUTIME_FIELD_NUMBER;
      hash = (53 * hash) + getTcuTime();
      hash = (37 * hash) + BATTERYSTATUSINFO_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryStatusInfo2();
      hash = (37 * hash) + NWMODEMISMATCH_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNwModeMismatch2());
      hash = (37 * hash) + BMSWARNDETECTED_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBmsWarnDetected2());
      hash = (37 * hash) + TESTERDISCHARGEREQ_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTesterDischargeReq2());
      hash = (37 * hash) + TESTERCHARGEREQ_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTesterChargeReq2());
      hash = (37 * hash) + BATTERYBALSTATUS_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBatteryBalStatus2());
      hash = (37 * hash) + BATTERYAUTHDATA_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryAuthData2();
      hash = (37 * hash) + BATTERYFULLCAPACITY_2_FIELD_NUMBER;
      hash = (53 * hash) + getBatteryFullCapacity2();
      hash = (37 * hash) + MAXCHARGECURRENT_2_FIELD_NUMBER;
      hash = (53 * hash) + getMaxChargeCurrent2();
      hash = (37 * hash) + MAXCHARGEVOLTAGE_2_FIELD_NUMBER;
      hash = (53 * hash) + getMaxChargeVoltage2();
      hash = (37 * hash) + MAXDISCHARGECURRENT_2_FIELD_NUMBER;
      hash = (53 * hash) + getMaxDischargeCurrent2();
      hash = (37 * hash) + BMSSTATE_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsState2();
      hash = (37 * hash) + CELLTEMP_2_FIELD_NUMBER;
      hash = (53 * hash) + getCellTemp2();
      hash = (37 * hash) + BMSFWINITVRSN_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsFWInitVrsn2();
      hash = (37 * hash) + BMSFWSAPVRSN_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsFwSAPVrsn2();
      hash = (37 * hash) + BMSCFGVRSN_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsCFGVrsn2();
      hash = (37 * hash) + BMSDBCVRSN_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsDBCVrsn2();
      hash = (37 * hash) + TCUCUSTMERCODE_2_FIELD_NUMBER;
      hash = (53 * hash) + getTcuCustmerCode2();
      hash = (37 * hash) + TCUSWVRSN_2_FIELD_NUMBER;
      hash = (53 * hash) + getTcuSWVrsn2();
      hash = (37 * hash) + CYCLECHARGECAPACITY_2_FIELD_NUMBER;
      hash = (53 * hash) + getCycleChargeCapacity2();
      hash = (37 * hash) + CYCLEDISCHARGECAPACITY_2_FIELD_NUMBER;
      hash = (53 * hash) + getCycleDischargeCapacity2();
      hash = (37 * hash) + AVAILABLECAPACITY_2_FIELD_NUMBER;
      hash = (53 * hash) + getAvailableCapacity2();
      hash = (37 * hash) + AVAILABLEENERGY_2_FIELD_NUMBER;
      hash = (53 * hash) + getAvailableEnergy2();
      hash = (37 * hash) + BATTERY2INFO_1_FIELD_NUMBER;
      hash = (53 * hash) + getBattery2Info1();
      hash = (37 * hash) + BATTERY2INFO_2_FIELD_NUMBER;
      hash = (53 * hash) + getBattery2Info2();
      hash = (37 * hash) + BATTERY2INFO_3_FIELD_NUMBER;
      hash = (53 * hash) + getBattery2Info3();
      hash = (37 * hash) + BATTERY2INFO_4_FIELD_NUMBER;
      hash = (53 * hash) + getBattery2Info4();
      hash = (37 * hash) + BATTERY2INFO_5_FIELD_NUMBER;
      hash = (53 * hash) + getBattery2Info5();
      hash = (37 * hash) + CANTIMEOUT_2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCanTimeOut2());
      hash = (37 * hash) + BMSTIME_2_FIELD_NUMBER;
      hash = (53 * hash) + getBmsTime2();
      hash = (37 * hash) + TCUTIME_2_FIELD_NUMBER;
      hash = (53 * hash) + getTcuTime2();
      hash = (37 * hash) + REMOTEIMMOBILIZATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRemoteImmobilization());
      hash = (37 * hash) + BOOTLOCKSTATUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBootLockStatus());
      hash = (37 * hash) + IGNITIONENABLESTATUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIgnitionEnableStatus());
      hash = (37 * hash) + CW1_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCW1());
      hash = (37 * hash) + CW2_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCW2());
      hash = (37 * hash) + CW3_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCW3());
      hash = (37 * hash) + CW4_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCW4());
      hash = (37 * hash) + AXAYAZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAxAyAz());
      hash = (37 * hash) + YAWPITCHROLL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getYawPitchRoll());
      hash = (37 * hash) + BUSVOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getBusVoltage());
      hash = (37 * hash) + MCUMICSSTATUS_FIELD_NUMBER;
      hash = (53 * hash) + getMcuMicsStatus();
      hash = (37 * hash) + THROTTLE_IQ_CMD_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getThrottleIqCmd());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceDataV3 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(OtcV3R5APlus.DeviceDataV3 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DeviceDataV3}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DeviceDataV3)
        OtcV3R5APlus.DeviceDataV3OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return OtcV3R5APlus.internal_static_DeviceDataV3_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return OtcV3R5APlus.internal_static_DeviceDataV3_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                OtcV3R5APlus.DeviceDataV3.class, OtcV3R5APlus.DeviceDataV3.Builder.class);
      }

      // Construct using OtcV3R5APlus.DeviceDataV3.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        sequence_ = 0;

        ignitionState_ = false;

        odometer_ = 0F;

        rpm_ = 0;

        speed_ = 0;

        lat_ = 0F;

        lng_ = 0F;

        alt_ = 0F;

        gpsSpeed_ = 0F;

        gpsCourse_ = 0F;

        gpsHDOP_ = 0F;

        gpsVDOP_ = 0F;

        gpsPDOP_ = 0F;

        gpsFixModeStatus_ = 0;

        satellitesUsed_ = 0;

        nwLAC_ = 0;

        nwCID_ = 0;

        iMSI_ = "";

        iMEI_ = "";

        rSSI_ = 0;

        networkOperator_ = "";

        t1_ = 0;

        t2_ = 0;

        t3_ = 0;

        auxBatteryVoltage_ = 0;

        auxBatteryPercentage_ = 0;

        hwVersion_ = 0;

        fwVersion_ = 0;

        sdCardSize_ = 0;

        sdCardStatus_ = false;

        motorCurrent_ = 0;

        motorRPM_ = 0;

        motorTemperature_ = 0;

        motorControllerTemperature_ = 0;

        motorStatusInfo_ = 0;

        motorErrorInfo_ = 0;

        batteryID_ = 0L;

        batteryVoltage_ = 0;

        batteryCurrent_ = 0;

        batterySoC_ = 0;

        batterySoH_ = 0;

        batterySOP_ = 0;

        batteryCellVoltage_ = 0;

        batteryModuleTemp_ = 0;

        batteryPDUBMSTemp_ = 0;

        batteryCellBalMap_ = 0;

        batteryEquCycleCount_ = 0;

        batteryLifetimeChargeCap_ = 0;

        batteryLifetimeDishargeCap_ = 0;

        batteryErrorInfo_ = 0;

        batteryWarningInfo_ = 0;

        batteryID2_ = 0L;

        batteryVoltage2_ = 0;

        batteryCurrent2_ = 0;

        batterySoC2_ = 0;

        batterySoH2_ = 0;

        batterySOP2_ = 0;

        batteryCellVoltage2_ = 0;

        batteryModuleTemp2_ = 0;

        batteryPDUBMSTemp2_ = 0;

        batteryCellBalMap2_ = 0;

        batteryEquCycleCount2_ = 0;

        batteryLifetimeChargeCap2_ = 0;

        batteryLifetimeDishargeCap2_ = 0;

        batteryErrorInfo2_ = 0;

        batteryWarningInfo2_ = 0;

        vehicleState_ = 0;

        dTE_ = 0;

        displayControllerHwVersion_ = 0;

        displayControllerSwVersion_ = 0;

        alertsStatus_ = 0;

        diagnosticErrorCode_ = 0;

        batteryStatusInfo_ = 0;

        nwModeMismatch_ = false;

        bmsWarnDetected_ = false;

        testerDischargeReq_ = false;

        testerChargeReq_ = false;

        batteryBalStatus_ = false;

        batteryAuthData_ = 0;

        batteryFullCapacity_ = 0;

        maxChargeCurrent_ = 0;

        maxChargeVoltage_ = 0;

        maxDischargeCurrent_ = 0;

        bmsState_ = 0;

        cellTemp_ = 0;

        bmsFWInitVrsn_ = 0;

        bmsFwSAPVrsn_ = 0;

        bmsCFGVrsn_ = 0;

        bmsDBCVrsn_ = 0;

        tcuCustmerCode_ = 0;

        tcuSWVrsn_ = 0;

        cycleChargeCapacity_ = 0;

        cycleDischargeCapacity_ = 0;

        availableCapacity_ = 0;

        availableEnergy_ = 0;

        batteryInfo1_ = 0;

        batteryInfo2_ = 0;

        batteryInfo3_ = 0;

        batteryInfo4_ = 0;

        batteryInfo5_ = 0;

        canTimeOut_ = false;

        bmsTime_ = 0;

        tcuTime_ = 0;

        batteryStatusInfo2_ = 0;

        nwModeMismatch2_ = false;

        bmsWarnDetected2_ = false;

        testerDischargeReq2_ = false;

        testerChargeReq2_ = false;

        batteryBalStatus2_ = false;

        batteryAuthData2_ = 0;

        batteryFullCapacity2_ = 0;

        maxChargeCurrent2_ = 0;

        maxChargeVoltage2_ = 0;

        maxDischargeCurrent2_ = 0;

        bmsState2_ = 0;

        cellTemp2_ = 0;

        bmsFWInitVrsn2_ = 0;

        bmsFwSAPVrsn2_ = 0;

        bmsCFGVrsn2_ = 0;

        bmsDBCVrsn2_ = 0;

        tcuCustmerCode2_ = 0;

        tcuSWVrsn2_ = 0;

        cycleChargeCapacity2_ = 0;

        cycleDischargeCapacity2_ = 0;

        availableCapacity2_ = 0;

        availableEnergy2_ = 0;

        battery2Info1_ = 0;

        battery2Info2_ = 0;

        battery2Info3_ = 0;

        battery2Info4_ = 0;

        battery2Info5_ = 0;

        canTimeOut2_ = false;

        bmsTime2_ = 0;

        tcuTime2_ = 0;

        remoteImmobilization_ = false;

        bootLockStatus_ = false;

        ignitionEnableStatus_ = false;

        cW1_ = 0F;

        cW2_ = 0F;

        cW3_ = 0F;

        cW4_ = 0F;

        axAyAz_ = 0L;

        yawPitchRoll_ = 0L;

        busVoltage_ = 0F;

        mcuMicsStatus_ = 0;

        throttleIqCmd_ = 0F;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return OtcV3R5APlus.internal_static_DeviceDataV3_descriptor;
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceDataV3 getDefaultInstanceForType() {
        return OtcV3R5APlus.DeviceDataV3.getDefaultInstance();
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceDataV3 build() {
        OtcV3R5APlus.DeviceDataV3 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceDataV3 buildPartial() {
        OtcV3R5APlus.DeviceDataV3 result = new OtcV3R5APlus.DeviceDataV3(this);
        result.timestamp_ = timestamp_;
        result.sequence_ = sequence_;
        result.ignitionState_ = ignitionState_;
        result.odometer_ = odometer_;
        result.rpm_ = rpm_;
        result.speed_ = speed_;
        result.lat_ = lat_;
        result.lng_ = lng_;
        result.alt_ = alt_;
        result.gpsSpeed_ = gpsSpeed_;
        result.gpsCourse_ = gpsCourse_;
        result.gpsHDOP_ = gpsHDOP_;
        result.gpsVDOP_ = gpsVDOP_;
        result.gpsPDOP_ = gpsPDOP_;
        result.gpsFixModeStatus_ = gpsFixModeStatus_;
        result.satellitesUsed_ = satellitesUsed_;
        result.nwLAC_ = nwLAC_;
        result.nwCID_ = nwCID_;
        result.iMSI_ = iMSI_;
        result.iMEI_ = iMEI_;
        result.rSSI_ = rSSI_;
        result.networkOperator_ = networkOperator_;
        result.t1_ = t1_;
        result.t2_ = t2_;
        result.t3_ = t3_;
        result.auxBatteryVoltage_ = auxBatteryVoltage_;
        result.auxBatteryPercentage_ = auxBatteryPercentage_;
        result.hwVersion_ = hwVersion_;
        result.fwVersion_ = fwVersion_;
        result.sdCardSize_ = sdCardSize_;
        result.sdCardStatus_ = sdCardStatus_;
        result.motorCurrent_ = motorCurrent_;
        result.motorRPM_ = motorRPM_;
        result.motorTemperature_ = motorTemperature_;
        result.motorControllerTemperature_ = motorControllerTemperature_;
        result.motorStatusInfo_ = motorStatusInfo_;
        result.motorErrorInfo_ = motorErrorInfo_;
        result.batteryID_ = batteryID_;
        result.batteryVoltage_ = batteryVoltage_;
        result.batteryCurrent_ = batteryCurrent_;
        result.batterySoC_ = batterySoC_;
        result.batterySoH_ = batterySoH_;
        result.batterySOP_ = batterySOP_;
        result.batteryCellVoltage_ = batteryCellVoltage_;
        result.batteryModuleTemp_ = batteryModuleTemp_;
        result.batteryPDUBMSTemp_ = batteryPDUBMSTemp_;
        result.batteryCellBalMap_ = batteryCellBalMap_;
        result.batteryEquCycleCount_ = batteryEquCycleCount_;
        result.batteryLifetimeChargeCap_ = batteryLifetimeChargeCap_;
        result.batteryLifetimeDishargeCap_ = batteryLifetimeDishargeCap_;
        result.batteryErrorInfo_ = batteryErrorInfo_;
        result.batteryWarningInfo_ = batteryWarningInfo_;
        result.batteryID2_ = batteryID2_;
        result.batteryVoltage2_ = batteryVoltage2_;
        result.batteryCurrent2_ = batteryCurrent2_;
        result.batterySoC2_ = batterySoC2_;
        result.batterySoH2_ = batterySoH2_;
        result.batterySOP2_ = batterySOP2_;
        result.batteryCellVoltage2_ = batteryCellVoltage2_;
        result.batteryModuleTemp2_ = batteryModuleTemp2_;
        result.batteryPDUBMSTemp2_ = batteryPDUBMSTemp2_;
        result.batteryCellBalMap2_ = batteryCellBalMap2_;
        result.batteryEquCycleCount2_ = batteryEquCycleCount2_;
        result.batteryLifetimeChargeCap2_ = batteryLifetimeChargeCap2_;
        result.batteryLifetimeDishargeCap2_ = batteryLifetimeDishargeCap2_;
        result.batteryErrorInfo2_ = batteryErrorInfo2_;
        result.batteryWarningInfo2_ = batteryWarningInfo2_;
        result.vehicleState_ = vehicleState_;
        result.dTE_ = dTE_;
        result.displayControllerHwVersion_ = displayControllerHwVersion_;
        result.displayControllerSwVersion_ = displayControllerSwVersion_;
        result.alertsStatus_ = alertsStatus_;
        result.diagnosticErrorCode_ = diagnosticErrorCode_;
        result.batteryStatusInfo_ = batteryStatusInfo_;
        result.nwModeMismatch_ = nwModeMismatch_;
        result.bmsWarnDetected_ = bmsWarnDetected_;
        result.testerDischargeReq_ = testerDischargeReq_;
        result.testerChargeReq_ = testerChargeReq_;
        result.batteryBalStatus_ = batteryBalStatus_;
        result.batteryAuthData_ = batteryAuthData_;
        result.batteryFullCapacity_ = batteryFullCapacity_;
        result.maxChargeCurrent_ = maxChargeCurrent_;
        result.maxChargeVoltage_ = maxChargeVoltage_;
        result.maxDischargeCurrent_ = maxDischargeCurrent_;
        result.bmsState_ = bmsState_;
        result.cellTemp_ = cellTemp_;
        result.bmsFWInitVrsn_ = bmsFWInitVrsn_;
        result.bmsFwSAPVrsn_ = bmsFwSAPVrsn_;
        result.bmsCFGVrsn_ = bmsCFGVrsn_;
        result.bmsDBCVrsn_ = bmsDBCVrsn_;
        result.tcuCustmerCode_ = tcuCustmerCode_;
        result.tcuSWVrsn_ = tcuSWVrsn_;
        result.cycleChargeCapacity_ = cycleChargeCapacity_;
        result.cycleDischargeCapacity_ = cycleDischargeCapacity_;
        result.availableCapacity_ = availableCapacity_;
        result.availableEnergy_ = availableEnergy_;
        result.batteryInfo1_ = batteryInfo1_;
        result.batteryInfo2_ = batteryInfo2_;
        result.batteryInfo3_ = batteryInfo3_;
        result.batteryInfo4_ = batteryInfo4_;
        result.batteryInfo5_ = batteryInfo5_;
        result.canTimeOut_ = canTimeOut_;
        result.bmsTime_ = bmsTime_;
        result.tcuTime_ = tcuTime_;
        result.batteryStatusInfo2_ = batteryStatusInfo2_;
        result.nwModeMismatch2_ = nwModeMismatch2_;
        result.bmsWarnDetected2_ = bmsWarnDetected2_;
        result.testerDischargeReq2_ = testerDischargeReq2_;
        result.testerChargeReq2_ = testerChargeReq2_;
        result.batteryBalStatus2_ = batteryBalStatus2_;
        result.batteryAuthData2_ = batteryAuthData2_;
        result.batteryFullCapacity2_ = batteryFullCapacity2_;
        result.maxChargeCurrent2_ = maxChargeCurrent2_;
        result.maxChargeVoltage2_ = maxChargeVoltage2_;
        result.maxDischargeCurrent2_ = maxDischargeCurrent2_;
        result.bmsState2_ = bmsState2_;
        result.cellTemp2_ = cellTemp2_;
        result.bmsFWInitVrsn2_ = bmsFWInitVrsn2_;
        result.bmsFwSAPVrsn2_ = bmsFwSAPVrsn2_;
        result.bmsCFGVrsn2_ = bmsCFGVrsn2_;
        result.bmsDBCVrsn2_ = bmsDBCVrsn2_;
        result.tcuCustmerCode2_ = tcuCustmerCode2_;
        result.tcuSWVrsn2_ = tcuSWVrsn2_;
        result.cycleChargeCapacity2_ = cycleChargeCapacity2_;
        result.cycleDischargeCapacity2_ = cycleDischargeCapacity2_;
        result.availableCapacity2_ = availableCapacity2_;
        result.availableEnergy2_ = availableEnergy2_;
        result.battery2Info1_ = battery2Info1_;
        result.battery2Info2_ = battery2Info2_;
        result.battery2Info3_ = battery2Info3_;
        result.battery2Info4_ = battery2Info4_;
        result.battery2Info5_ = battery2Info5_;
        result.canTimeOut2_ = canTimeOut2_;
        result.bmsTime2_ = bmsTime2_;
        result.tcuTime2_ = tcuTime2_;
        result.remoteImmobilization_ = remoteImmobilization_;
        result.bootLockStatus_ = bootLockStatus_;
        result.ignitionEnableStatus_ = ignitionEnableStatus_;
        result.cW1_ = cW1_;
        result.cW2_ = cW2_;
        result.cW3_ = cW3_;
        result.cW4_ = cW4_;
        result.axAyAz_ = axAyAz_;
        result.yawPitchRoll_ = yawPitchRoll_;
        result.busVoltage_ = busVoltage_;
        result.mcuMicsStatus_ = mcuMicsStatus_;
        result.throttleIqCmd_ = throttleIqCmd_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof OtcV3R5APlus.DeviceDataV3) {
          return mergeFrom((OtcV3R5APlus.DeviceDataV3)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(OtcV3R5APlus.DeviceDataV3 other) {
        if (other == OtcV3R5APlus.DeviceDataV3.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getSequence() != 0) {
          setSequence(other.getSequence());
        }
        if (other.getIgnitionState() != false) {
          setIgnitionState(other.getIgnitionState());
        }
        if (other.getOdometer() != 0F) {
          setOdometer(other.getOdometer());
        }
        if (other.getRpm() != 0) {
          setRpm(other.getRpm());
        }
        if (other.getSpeed() != 0) {
          setSpeed(other.getSpeed());
        }
        if (other.getLat() != 0F) {
          setLat(other.getLat());
        }
        if (other.getLng() != 0F) {
          setLng(other.getLng());
        }
        if (other.getAlt() != 0F) {
          setAlt(other.getAlt());
        }
        if (other.getGpsSpeed() != 0F) {
          setGpsSpeed(other.getGpsSpeed());
        }
        if (other.getGpsCourse() != 0F) {
          setGpsCourse(other.getGpsCourse());
        }
        if (other.getGpsHDOP() != 0F) {
          setGpsHDOP(other.getGpsHDOP());
        }
        if (other.getGpsVDOP() != 0F) {
          setGpsVDOP(other.getGpsVDOP());
        }
        if (other.getGpsPDOP() != 0F) {
          setGpsPDOP(other.getGpsPDOP());
        }
        if (other.getGpsFixModeStatus() != 0) {
          setGpsFixModeStatus(other.getGpsFixModeStatus());
        }
        if (other.getSatellitesUsed() != 0) {
          setSatellitesUsed(other.getSatellitesUsed());
        }
        if (other.getNwLAC() != 0) {
          setNwLAC(other.getNwLAC());
        }
        if (other.getNwCID() != 0) {
          setNwCID(other.getNwCID());
        }
        if (!other.getIMSI().isEmpty()) {
          iMSI_ = other.iMSI_;
          onChanged();
        }
        if (!other.getIMEI().isEmpty()) {
          iMEI_ = other.iMEI_;
          onChanged();
        }
        if (other.getRSSI() != 0) {
          setRSSI(other.getRSSI());
        }
        if (!other.getNetworkOperator().isEmpty()) {
          networkOperator_ = other.networkOperator_;
          onChanged();
        }
        if (other.getT1() != 0) {
          setT1(other.getT1());
        }
        if (other.getT2() != 0) {
          setT2(other.getT2());
        }
        if (other.getT3() != 0) {
          setT3(other.getT3());
        }
        if (other.getAuxBatteryVoltage() != 0) {
          setAuxBatteryVoltage(other.getAuxBatteryVoltage());
        }
        if (other.getAuxBatteryPercentage() != 0) {
          setAuxBatteryPercentage(other.getAuxBatteryPercentage());
        }
        if (other.getHwVersion() != 0) {
          setHwVersion(other.getHwVersion());
        }
        if (other.getFwVersion() != 0) {
          setFwVersion(other.getFwVersion());
        }
        if (other.getSdCardSize() != 0) {
          setSdCardSize(other.getSdCardSize());
        }
        if (other.getSdCardStatus() != false) {
          setSdCardStatus(other.getSdCardStatus());
        }
        if (other.getMotorCurrent() != 0) {
          setMotorCurrent(other.getMotorCurrent());
        }
        if (other.getMotorRPM() != 0) {
          setMotorRPM(other.getMotorRPM());
        }
        if (other.getMotorTemperature() != 0) {
          setMotorTemperature(other.getMotorTemperature());
        }
        if (other.getMotorControllerTemperature() != 0) {
          setMotorControllerTemperature(other.getMotorControllerTemperature());
        }
        if (other.getMotorStatusInfo() != 0) {
          setMotorStatusInfo(other.getMotorStatusInfo());
        }
        if (other.getMotorErrorInfo() != 0) {
          setMotorErrorInfo(other.getMotorErrorInfo());
        }
        if (other.getBatteryID() != 0L) {
          setBatteryID(other.getBatteryID());
        }
        if (other.getBatteryVoltage() != 0) {
          setBatteryVoltage(other.getBatteryVoltage());
        }
        if (other.getBatteryCurrent() != 0) {
          setBatteryCurrent(other.getBatteryCurrent());
        }
        if (other.getBatterySoC() != 0) {
          setBatterySoC(other.getBatterySoC());
        }
        if (other.getBatterySoH() != 0) {
          setBatterySoH(other.getBatterySoH());
        }
        if (other.getBatterySOP() != 0) {
          setBatterySOP(other.getBatterySOP());
        }
        if (other.getBatteryCellVoltage() != 0) {
          setBatteryCellVoltage(other.getBatteryCellVoltage());
        }
        if (other.getBatteryModuleTemp() != 0) {
          setBatteryModuleTemp(other.getBatteryModuleTemp());
        }
        if (other.getBatteryPDUBMSTemp() != 0) {
          setBatteryPDUBMSTemp(other.getBatteryPDUBMSTemp());
        }
        if (other.getBatteryCellBalMap() != 0) {
          setBatteryCellBalMap(other.getBatteryCellBalMap());
        }
        if (other.getBatteryEquCycleCount() != 0) {
          setBatteryEquCycleCount(other.getBatteryEquCycleCount());
        }
        if (other.getBatteryLifetimeChargeCap() != 0) {
          setBatteryLifetimeChargeCap(other.getBatteryLifetimeChargeCap());
        }
        if (other.getBatteryLifetimeDishargeCap() != 0) {
          setBatteryLifetimeDishargeCap(other.getBatteryLifetimeDishargeCap());
        }
        if (other.getBatteryErrorInfo() != 0) {
          setBatteryErrorInfo(other.getBatteryErrorInfo());
        }
        if (other.getBatteryWarningInfo() != 0) {
          setBatteryWarningInfo(other.getBatteryWarningInfo());
        }
        if (other.getBatteryID2() != 0L) {
          setBatteryID2(other.getBatteryID2());
        }
        if (other.getBatteryVoltage2() != 0) {
          setBatteryVoltage2(other.getBatteryVoltage2());
        }
        if (other.getBatteryCurrent2() != 0) {
          setBatteryCurrent2(other.getBatteryCurrent2());
        }
        if (other.getBatterySoC2() != 0) {
          setBatterySoC2(other.getBatterySoC2());
        }
        if (other.getBatterySoH2() != 0) {
          setBatterySoH2(other.getBatterySoH2());
        }
        if (other.getBatterySOP2() != 0) {
          setBatterySOP2(other.getBatterySOP2());
        }
        if (other.getBatteryCellVoltage2() != 0) {
          setBatteryCellVoltage2(other.getBatteryCellVoltage2());
        }
        if (other.getBatteryModuleTemp2() != 0) {
          setBatteryModuleTemp2(other.getBatteryModuleTemp2());
        }
        if (other.getBatteryPDUBMSTemp2() != 0) {
          setBatteryPDUBMSTemp2(other.getBatteryPDUBMSTemp2());
        }
        if (other.getBatteryCellBalMap2() != 0) {
          setBatteryCellBalMap2(other.getBatteryCellBalMap2());
        }
        if (other.getBatteryEquCycleCount2() != 0) {
          setBatteryEquCycleCount2(other.getBatteryEquCycleCount2());
        }
        if (other.getBatteryLifetimeChargeCap2() != 0) {
          setBatteryLifetimeChargeCap2(other.getBatteryLifetimeChargeCap2());
        }
        if (other.getBatteryLifetimeDishargeCap2() != 0) {
          setBatteryLifetimeDishargeCap2(other.getBatteryLifetimeDishargeCap2());
        }
        if (other.getBatteryErrorInfo2() != 0) {
          setBatteryErrorInfo2(other.getBatteryErrorInfo2());
        }
        if (other.getBatteryWarningInfo2() != 0) {
          setBatteryWarningInfo2(other.getBatteryWarningInfo2());
        }
        if (other.getVehicleState() != 0) {
          setVehicleState(other.getVehicleState());
        }
        if (other.getDTE() != 0) {
          setDTE(other.getDTE());
        }
        if (other.getDisplayControllerHwVersion() != 0) {
          setDisplayControllerHwVersion(other.getDisplayControllerHwVersion());
        }
        if (other.getDisplayControllerSwVersion() != 0) {
          setDisplayControllerSwVersion(other.getDisplayControllerSwVersion());
        }
        if (other.getAlertsStatus() != 0) {
          setAlertsStatus(other.getAlertsStatus());
        }
        if (other.getDiagnosticErrorCode() != 0) {
          setDiagnosticErrorCode(other.getDiagnosticErrorCode());
        }
        if (other.getBatteryStatusInfo() != 0) {
          setBatteryStatusInfo(other.getBatteryStatusInfo());
        }
        if (other.getNwModeMismatch() != false) {
          setNwModeMismatch(other.getNwModeMismatch());
        }
        if (other.getBmsWarnDetected() != false) {
          setBmsWarnDetected(other.getBmsWarnDetected());
        }
        if (other.getTesterDischargeReq() != false) {
          setTesterDischargeReq(other.getTesterDischargeReq());
        }
        if (other.getTesterChargeReq() != false) {
          setTesterChargeReq(other.getTesterChargeReq());
        }
        if (other.getBatteryBalStatus() != false) {
          setBatteryBalStatus(other.getBatteryBalStatus());
        }
        if (other.getBatteryAuthData() != 0) {
          setBatteryAuthData(other.getBatteryAuthData());
        }
        if (other.getBatteryFullCapacity() != 0) {
          setBatteryFullCapacity(other.getBatteryFullCapacity());
        }
        if (other.getMaxChargeCurrent() != 0) {
          setMaxChargeCurrent(other.getMaxChargeCurrent());
        }
        if (other.getMaxChargeVoltage() != 0) {
          setMaxChargeVoltage(other.getMaxChargeVoltage());
        }
        if (other.getMaxDischargeCurrent() != 0) {
          setMaxDischargeCurrent(other.getMaxDischargeCurrent());
        }
        if (other.getBmsState() != 0) {
          setBmsState(other.getBmsState());
        }
        if (other.getCellTemp() != 0) {
          setCellTemp(other.getCellTemp());
        }
        if (other.getBmsFWInitVrsn() != 0) {
          setBmsFWInitVrsn(other.getBmsFWInitVrsn());
        }
        if (other.getBmsFwSAPVrsn() != 0) {
          setBmsFwSAPVrsn(other.getBmsFwSAPVrsn());
        }
        if (other.getBmsCFGVrsn() != 0) {
          setBmsCFGVrsn(other.getBmsCFGVrsn());
        }
        if (other.getBmsDBCVrsn() != 0) {
          setBmsDBCVrsn(other.getBmsDBCVrsn());
        }
        if (other.getTcuCustmerCode() != 0) {
          setTcuCustmerCode(other.getTcuCustmerCode());
        }
        if (other.getTcuSWVrsn() != 0) {
          setTcuSWVrsn(other.getTcuSWVrsn());
        }
        if (other.getCycleChargeCapacity() != 0) {
          setCycleChargeCapacity(other.getCycleChargeCapacity());
        }
        if (other.getCycleDischargeCapacity() != 0) {
          setCycleDischargeCapacity(other.getCycleDischargeCapacity());
        }
        if (other.getAvailableCapacity() != 0) {
          setAvailableCapacity(other.getAvailableCapacity());
        }
        if (other.getAvailableEnergy() != 0) {
          setAvailableEnergy(other.getAvailableEnergy());
        }
        if (other.getBatteryInfo1() != 0) {
          setBatteryInfo1(other.getBatteryInfo1());
        }
        if (other.getBatteryInfo2() != 0) {
          setBatteryInfo2(other.getBatteryInfo2());
        }
        if (other.getBatteryInfo3() != 0) {
          setBatteryInfo3(other.getBatteryInfo3());
        }
        if (other.getBatteryInfo4() != 0) {
          setBatteryInfo4(other.getBatteryInfo4());
        }
        if (other.getBatteryInfo5() != 0) {
          setBatteryInfo5(other.getBatteryInfo5());
        }
        if (other.getCanTimeOut() != false) {
          setCanTimeOut(other.getCanTimeOut());
        }
        if (other.getBmsTime() != 0) {
          setBmsTime(other.getBmsTime());
        }
        if (other.getTcuTime() != 0) {
          setTcuTime(other.getTcuTime());
        }
        if (other.getBatteryStatusInfo2() != 0) {
          setBatteryStatusInfo2(other.getBatteryStatusInfo2());
        }
        if (other.getNwModeMismatch2() != false) {
          setNwModeMismatch2(other.getNwModeMismatch2());
        }
        if (other.getBmsWarnDetected2() != false) {
          setBmsWarnDetected2(other.getBmsWarnDetected2());
        }
        if (other.getTesterDischargeReq2() != false) {
          setTesterDischargeReq2(other.getTesterDischargeReq2());
        }
        if (other.getTesterChargeReq2() != false) {
          setTesterChargeReq2(other.getTesterChargeReq2());
        }
        if (other.getBatteryBalStatus2() != false) {
          setBatteryBalStatus2(other.getBatteryBalStatus2());
        }
        if (other.getBatteryAuthData2() != 0) {
          setBatteryAuthData2(other.getBatteryAuthData2());
        }
        if (other.getBatteryFullCapacity2() != 0) {
          setBatteryFullCapacity2(other.getBatteryFullCapacity2());
        }
        if (other.getMaxChargeCurrent2() != 0) {
          setMaxChargeCurrent2(other.getMaxChargeCurrent2());
        }
        if (other.getMaxChargeVoltage2() != 0) {
          setMaxChargeVoltage2(other.getMaxChargeVoltage2());
        }
        if (other.getMaxDischargeCurrent2() != 0) {
          setMaxDischargeCurrent2(other.getMaxDischargeCurrent2());
        }
        if (other.getBmsState2() != 0) {
          setBmsState2(other.getBmsState2());
        }
        if (other.getCellTemp2() != 0) {
          setCellTemp2(other.getCellTemp2());
        }
        if (other.getBmsFWInitVrsn2() != 0) {
          setBmsFWInitVrsn2(other.getBmsFWInitVrsn2());
        }
        if (other.getBmsFwSAPVrsn2() != 0) {
          setBmsFwSAPVrsn2(other.getBmsFwSAPVrsn2());
        }
        if (other.getBmsCFGVrsn2() != 0) {
          setBmsCFGVrsn2(other.getBmsCFGVrsn2());
        }
        if (other.getBmsDBCVrsn2() != 0) {
          setBmsDBCVrsn2(other.getBmsDBCVrsn2());
        }
        if (other.getTcuCustmerCode2() != 0) {
          setTcuCustmerCode2(other.getTcuCustmerCode2());
        }
        if (other.getTcuSWVrsn2() != 0) {
          setTcuSWVrsn2(other.getTcuSWVrsn2());
        }
        if (other.getCycleChargeCapacity2() != 0) {
          setCycleChargeCapacity2(other.getCycleChargeCapacity2());
        }
        if (other.getCycleDischargeCapacity2() != 0) {
          setCycleDischargeCapacity2(other.getCycleDischargeCapacity2());
        }
        if (other.getAvailableCapacity2() != 0) {
          setAvailableCapacity2(other.getAvailableCapacity2());
        }
        if (other.getAvailableEnergy2() != 0) {
          setAvailableEnergy2(other.getAvailableEnergy2());
        }
        if (other.getBattery2Info1() != 0) {
          setBattery2Info1(other.getBattery2Info1());
        }
        if (other.getBattery2Info2() != 0) {
          setBattery2Info2(other.getBattery2Info2());
        }
        if (other.getBattery2Info3() != 0) {
          setBattery2Info3(other.getBattery2Info3());
        }
        if (other.getBattery2Info4() != 0) {
          setBattery2Info4(other.getBattery2Info4());
        }
        if (other.getBattery2Info5() != 0) {
          setBattery2Info5(other.getBattery2Info5());
        }
        if (other.getCanTimeOut2() != false) {
          setCanTimeOut2(other.getCanTimeOut2());
        }
        if (other.getBmsTime2() != 0) {
          setBmsTime2(other.getBmsTime2());
        }
        if (other.getTcuTime2() != 0) {
          setTcuTime2(other.getTcuTime2());
        }
        if (other.getRemoteImmobilization() != false) {
          setRemoteImmobilization(other.getRemoteImmobilization());
        }
        if (other.getBootLockStatus() != false) {
          setBootLockStatus(other.getBootLockStatus());
        }
        if (other.getIgnitionEnableStatus() != false) {
          setIgnitionEnableStatus(other.getIgnitionEnableStatus());
        }
        if (other.getCW1() != 0F) {
          setCW1(other.getCW1());
        }
        if (other.getCW2() != 0F) {
          setCW2(other.getCW2());
        }
        if (other.getCW3() != 0F) {
          setCW3(other.getCW3());
        }
        if (other.getCW4() != 0F) {
          setCW4(other.getCW4());
        }
        if (other.getAxAyAz() != 0L) {
          setAxAyAz(other.getAxAyAz());
        }
        if (other.getYawPitchRoll() != 0L) {
          setYawPitchRoll(other.getYawPitchRoll());
        }
        if (other.getBusVoltage() != 0F) {
          setBusVoltage(other.getBusVoltage());
        }
        if (other.getMcuMicsStatus() != 0) {
          setMcuMicsStatus(other.getMcuMicsStatus());
        }
        if (other.getThrottleIqCmd() != 0F) {
          setThrottleIqCmd(other.getThrottleIqCmd());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        OtcV3R5APlus.DeviceDataV3 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (OtcV3R5APlus.DeviceDataV3) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <code>uint32 sequence = 2;</code>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>uint32 sequence = 2;</code>
       */
      public Builder setSequence(int value) {
        
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 sequence = 2;</code>
       */
      public Builder clearSequence() {
        
        sequence_ = 0;
        onChanged();
        return this;
      }

      private boolean ignitionState_ ;
      /**
       * <code>bool ignitionState = 3;</code>
       */
      public boolean getIgnitionState() {
        return ignitionState_;
      }
      /**
       * <code>bool ignitionState = 3;</code>
       */
      public Builder setIgnitionState(boolean value) {
        
        ignitionState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool ignitionState = 3;</code>
       */
      public Builder clearIgnitionState() {
        
        ignitionState_ = false;
        onChanged();
        return this;
      }

      private float odometer_ ;
      /**
       * <code>float odometer = 4;</code>
       */
      public float getOdometer() {
        return odometer_;
      }
      /**
       * <code>float odometer = 4;</code>
       */
      public Builder setOdometer(float value) {
        
        odometer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float odometer = 4;</code>
       */
      public Builder clearOdometer() {
        
        odometer_ = 0F;
        onChanged();
        return this;
      }

      private int rpm_ ;
      /**
       * <code>uint32 rpm = 5;</code>
       */
      public int getRpm() {
        return rpm_;
      }
      /**
       * <code>uint32 rpm = 5;</code>
       */
      public Builder setRpm(int value) {
        
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 rpm = 5;</code>
       */
      public Builder clearRpm() {
        
        rpm_ = 0;
        onChanged();
        return this;
      }

      private int speed_ ;
      /**
       * <code>uint32 speed = 6;</code>
       */
      public int getSpeed() {
        return speed_;
      }
      /**
       * <code>uint32 speed = 6;</code>
       */
      public Builder setSpeed(int value) {
        
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 speed = 6;</code>
       */
      public Builder clearSpeed() {
        
        speed_ = 0;
        onChanged();
        return this;
      }

      private float lat_ ;
      /**
       * <code>float lat = 7;</code>
       */
      public float getLat() {
        return lat_;
      }
      /**
       * <code>float lat = 7;</code>
       */
      public Builder setLat(float value) {
        
        lat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float lat = 7;</code>
       */
      public Builder clearLat() {
        
        lat_ = 0F;
        onChanged();
        return this;
      }

      private float lng_ ;
      /**
       * <code>float lng = 8;</code>
       */
      public float getLng() {
        return lng_;
      }
      /**
       * <code>float lng = 8;</code>
       */
      public Builder setLng(float value) {
        
        lng_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float lng = 8;</code>
       */
      public Builder clearLng() {
        
        lng_ = 0F;
        onChanged();
        return this;
      }

      private float alt_ ;
      /**
       * <code>float alt = 9;</code>
       */
      public float getAlt() {
        return alt_;
      }
      /**
       * <code>float alt = 9;</code>
       */
      public Builder setAlt(float value) {
        
        alt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float alt = 9;</code>
       */
      public Builder clearAlt() {
        
        alt_ = 0F;
        onChanged();
        return this;
      }

      private float gpsSpeed_ ;
      /**
       * <code>float gpsSpeed = 10;</code>
       */
      public float getGpsSpeed() {
        return gpsSpeed_;
      }
      /**
       * <code>float gpsSpeed = 10;</code>
       */
      public Builder setGpsSpeed(float value) {
        
        gpsSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float gpsSpeed = 10;</code>
       */
      public Builder clearGpsSpeed() {
        
        gpsSpeed_ = 0F;
        onChanged();
        return this;
      }

      private float gpsCourse_ ;
      /**
       * <code>float gpsCourse = 11;</code>
       */
      public float getGpsCourse() {
        return gpsCourse_;
      }
      /**
       * <code>float gpsCourse = 11;</code>
       */
      public Builder setGpsCourse(float value) {
        
        gpsCourse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float gpsCourse = 11;</code>
       */
      public Builder clearGpsCourse() {
        
        gpsCourse_ = 0F;
        onChanged();
        return this;
      }

      private float gpsHDOP_ ;
      /**
       * <code>float gpsHDOP = 12;</code>
       */
      public float getGpsHDOP() {
        return gpsHDOP_;
      }
      /**
       * <code>float gpsHDOP = 12;</code>
       */
      public Builder setGpsHDOP(float value) {
        
        gpsHDOP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float gpsHDOP = 12;</code>
       */
      public Builder clearGpsHDOP() {
        
        gpsHDOP_ = 0F;
        onChanged();
        return this;
      }

      private float gpsVDOP_ ;
      /**
       * <code>float gpsVDOP = 13;</code>
       */
      public float getGpsVDOP() {
        return gpsVDOP_;
      }
      /**
       * <code>float gpsVDOP = 13;</code>
       */
      public Builder setGpsVDOP(float value) {
        
        gpsVDOP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float gpsVDOP = 13;</code>
       */
      public Builder clearGpsVDOP() {
        
        gpsVDOP_ = 0F;
        onChanged();
        return this;
      }

      private float gpsPDOP_ ;
      /**
       * <code>float gpsPDOP = 14;</code>
       */
      public float getGpsPDOP() {
        return gpsPDOP_;
      }
      /**
       * <code>float gpsPDOP = 14;</code>
       */
      public Builder setGpsPDOP(float value) {
        
        gpsPDOP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float gpsPDOP = 14;</code>
       */
      public Builder clearGpsPDOP() {
        
        gpsPDOP_ = 0F;
        onChanged();
        return this;
      }

      private int gpsFixModeStatus_ ;
      /**
       * <code>uint32 gpsFixModeStatus = 15;</code>
       */
      public int getGpsFixModeStatus() {
        return gpsFixModeStatus_;
      }
      /**
       * <code>uint32 gpsFixModeStatus = 15;</code>
       */
      public Builder setGpsFixModeStatus(int value) {
        
        gpsFixModeStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 gpsFixModeStatus = 15;</code>
       */
      public Builder clearGpsFixModeStatus() {
        
        gpsFixModeStatus_ = 0;
        onChanged();
        return this;
      }

      private int satellitesUsed_ ;
      /**
       * <code>uint32 satellitesUsed = 16;</code>
       */
      public int getSatellitesUsed() {
        return satellitesUsed_;
      }
      /**
       * <code>uint32 satellitesUsed = 16;</code>
       */
      public Builder setSatellitesUsed(int value) {
        
        satellitesUsed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 satellitesUsed = 16;</code>
       */
      public Builder clearSatellitesUsed() {
        
        satellitesUsed_ = 0;
        onChanged();
        return this;
      }

      private int nwLAC_ ;
      /**
       * <code>uint32 nwLAC = 17;</code>
       */
      public int getNwLAC() {
        return nwLAC_;
      }
      /**
       * <code>uint32 nwLAC = 17;</code>
       */
      public Builder setNwLAC(int value) {
        
        nwLAC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 nwLAC = 17;</code>
       */
      public Builder clearNwLAC() {
        
        nwLAC_ = 0;
        onChanged();
        return this;
      }

      private int nwCID_ ;
      /**
       * <code>uint32 nwCID = 18;</code>
       */
      public int getNwCID() {
        return nwCID_;
      }
      /**
       * <code>uint32 nwCID = 18;</code>
       */
      public Builder setNwCID(int value) {
        
        nwCID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 nwCID = 18;</code>
       */
      public Builder clearNwCID() {
        
        nwCID_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object iMSI_ = "";
      /**
       * <code>string IMSI = 19;</code>
       */
      public java.lang.String getIMSI() {
        java.lang.Object ref = iMSI_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iMSI_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string IMSI = 19;</code>
       */
      public com.google.protobuf.ByteString
          getIMSIBytes() {
        java.lang.Object ref = iMSI_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iMSI_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string IMSI = 19;</code>
       */
      public Builder setIMSI(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        iMSI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string IMSI = 19;</code>
       */
      public Builder clearIMSI() {
        
        iMSI_ = getDefaultInstance().getIMSI();
        onChanged();
        return this;
      }
      /**
       * <code>string IMSI = 19;</code>
       */
      public Builder setIMSIBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        iMSI_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object iMEI_ = "";
      /**
       * <code>string IMEI = 20;</code>
       */
      public java.lang.String getIMEI() {
        java.lang.Object ref = iMEI_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iMEI_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string IMEI = 20;</code>
       */
      public com.google.protobuf.ByteString
          getIMEIBytes() {
        java.lang.Object ref = iMEI_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iMEI_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string IMEI = 20;</code>
       */
      public Builder setIMEI(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        iMEI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string IMEI = 20;</code>
       */
      public Builder clearIMEI() {
        
        iMEI_ = getDefaultInstance().getIMEI();
        onChanged();
        return this;
      }
      /**
       * <code>string IMEI = 20;</code>
       */
      public Builder setIMEIBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        iMEI_ = value;
        onChanged();
        return this;
      }

      private int rSSI_ ;
      /**
       * <code>uint32 RSSI = 21;</code>
       */
      public int getRSSI() {
        return rSSI_;
      }
      /**
       * <code>uint32 RSSI = 21;</code>
       */
      public Builder setRSSI(int value) {
        
        rSSI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 RSSI = 21;</code>
       */
      public Builder clearRSSI() {
        
        rSSI_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object networkOperator_ = "";
      /**
       * <code>string networkOperator = 22;</code>
       */
      public java.lang.String getNetworkOperator() {
        java.lang.Object ref = networkOperator_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          networkOperator_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string networkOperator = 22;</code>
       */
      public com.google.protobuf.ByteString
          getNetworkOperatorBytes() {
        java.lang.Object ref = networkOperator_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          networkOperator_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string networkOperator = 22;</code>
       */
      public Builder setNetworkOperator(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        networkOperator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string networkOperator = 22;</code>
       */
      public Builder clearNetworkOperator() {
        
        networkOperator_ = getDefaultInstance().getNetworkOperator();
        onChanged();
        return this;
      }
      /**
       * <code>string networkOperator = 22;</code>
       */
      public Builder setNetworkOperatorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        networkOperator_ = value;
        onChanged();
        return this;
      }

      private int t1_ ;
      /**
       * <code>uint32 T1 = 23;</code>
       */
      public int getT1() {
        return t1_;
      }
      /**
       * <code>uint32 T1 = 23;</code>
       */
      public Builder setT1(int value) {
        
        t1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 T1 = 23;</code>
       */
      public Builder clearT1() {
        
        t1_ = 0;
        onChanged();
        return this;
      }

      private int t2_ ;
      /**
       * <code>uint32 T2 = 24;</code>
       */
      public int getT2() {
        return t2_;
      }
      /**
       * <code>uint32 T2 = 24;</code>
       */
      public Builder setT2(int value) {
        
        t2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 T2 = 24;</code>
       */
      public Builder clearT2() {
        
        t2_ = 0;
        onChanged();
        return this;
      }

      private int t3_ ;
      /**
       * <code>uint32 T3 = 25;</code>
       */
      public int getT3() {
        return t3_;
      }
      /**
       * <code>uint32 T3 = 25;</code>
       */
      public Builder setT3(int value) {
        
        t3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 T3 = 25;</code>
       */
      public Builder clearT3() {
        
        t3_ = 0;
        onChanged();
        return this;
      }

      private int auxBatteryVoltage_ ;
      /**
       * <code>uint32 auxBatteryVoltage = 26;</code>
       */
      public int getAuxBatteryVoltage() {
        return auxBatteryVoltage_;
      }
      /**
       * <code>uint32 auxBatteryVoltage = 26;</code>
       */
      public Builder setAuxBatteryVoltage(int value) {
        
        auxBatteryVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 auxBatteryVoltage = 26;</code>
       */
      public Builder clearAuxBatteryVoltage() {
        
        auxBatteryVoltage_ = 0;
        onChanged();
        return this;
      }

      private int auxBatteryPercentage_ ;
      /**
       * <code>uint32 auxBatteryPercentage = 27;</code>
       */
      public int getAuxBatteryPercentage() {
        return auxBatteryPercentage_;
      }
      /**
       * <code>uint32 auxBatteryPercentage = 27;</code>
       */
      public Builder setAuxBatteryPercentage(int value) {
        
        auxBatteryPercentage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 auxBatteryPercentage = 27;</code>
       */
      public Builder clearAuxBatteryPercentage() {
        
        auxBatteryPercentage_ = 0;
        onChanged();
        return this;
      }

      private int hwVersion_ ;
      /**
       * <code>uint32 hwVersion = 28;</code>
       */
      public int getHwVersion() {
        return hwVersion_;
      }
      /**
       * <code>uint32 hwVersion = 28;</code>
       */
      public Builder setHwVersion(int value) {
        
        hwVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 hwVersion = 28;</code>
       */
      public Builder clearHwVersion() {
        
        hwVersion_ = 0;
        onChanged();
        return this;
      }

      private int fwVersion_ ;
      /**
       * <code>uint32 fwVersion = 29;</code>
       */
      public int getFwVersion() {
        return fwVersion_;
      }
      /**
       * <code>uint32 fwVersion = 29;</code>
       */
      public Builder setFwVersion(int value) {
        
        fwVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 fwVersion = 29;</code>
       */
      public Builder clearFwVersion() {
        
        fwVersion_ = 0;
        onChanged();
        return this;
      }

      private int sdCardSize_ ;
      /**
       * <code>uint32 sdCardSize = 30;</code>
       */
      public int getSdCardSize() {
        return sdCardSize_;
      }
      /**
       * <code>uint32 sdCardSize = 30;</code>
       */
      public Builder setSdCardSize(int value) {
        
        sdCardSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 sdCardSize = 30;</code>
       */
      public Builder clearSdCardSize() {
        
        sdCardSize_ = 0;
        onChanged();
        return this;
      }

      private boolean sdCardStatus_ ;
      /**
       * <code>bool sdCardStatus = 31;</code>
       */
      public boolean getSdCardStatus() {
        return sdCardStatus_;
      }
      /**
       * <code>bool sdCardStatus = 31;</code>
       */
      public Builder setSdCardStatus(boolean value) {
        
        sdCardStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool sdCardStatus = 31;</code>
       */
      public Builder clearSdCardStatus() {
        
        sdCardStatus_ = false;
        onChanged();
        return this;
      }

      private int motorCurrent_ ;
      /**
       * <code>uint32 motorCurrent = 32;</code>
       */
      public int getMotorCurrent() {
        return motorCurrent_;
      }
      /**
       * <code>uint32 motorCurrent = 32;</code>
       */
      public Builder setMotorCurrent(int value) {
        
        motorCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorCurrent = 32;</code>
       */
      public Builder clearMotorCurrent() {
        
        motorCurrent_ = 0;
        onChanged();
        return this;
      }

      private int motorRPM_ ;
      /**
       * <code>uint32 motorRPM = 33;</code>
       */
      public int getMotorRPM() {
        return motorRPM_;
      }
      /**
       * <code>uint32 motorRPM = 33;</code>
       */
      public Builder setMotorRPM(int value) {
        
        motorRPM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorRPM = 33;</code>
       */
      public Builder clearMotorRPM() {
        
        motorRPM_ = 0;
        onChanged();
        return this;
      }

      private int motorTemperature_ ;
      /**
       * <code>uint32 motorTemperature = 34;</code>
       */
      public int getMotorTemperature() {
        return motorTemperature_;
      }
      /**
       * <code>uint32 motorTemperature = 34;</code>
       */
      public Builder setMotorTemperature(int value) {
        
        motorTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorTemperature = 34;</code>
       */
      public Builder clearMotorTemperature() {
        
        motorTemperature_ = 0;
        onChanged();
        return this;
      }

      private int motorControllerTemperature_ ;
      /**
       * <code>uint32 motorControllerTemperature = 35;</code>
       */
      public int getMotorControllerTemperature() {
        return motorControllerTemperature_;
      }
      /**
       * <code>uint32 motorControllerTemperature = 35;</code>
       */
      public Builder setMotorControllerTemperature(int value) {
        
        motorControllerTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorControllerTemperature = 35;</code>
       */
      public Builder clearMotorControllerTemperature() {
        
        motorControllerTemperature_ = 0;
        onChanged();
        return this;
      }

      private int motorStatusInfo_ ;
      /**
       * <code>uint32 motorStatusInfo = 36;</code>
       */
      public int getMotorStatusInfo() {
        return motorStatusInfo_;
      }
      /**
       * <code>uint32 motorStatusInfo = 36;</code>
       */
      public Builder setMotorStatusInfo(int value) {
        
        motorStatusInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorStatusInfo = 36;</code>
       */
      public Builder clearMotorStatusInfo() {
        
        motorStatusInfo_ = 0;
        onChanged();
        return this;
      }

      private int motorErrorInfo_ ;
      /**
       * <code>uint32 motorErrorInfo = 37;</code>
       */
      public int getMotorErrorInfo() {
        return motorErrorInfo_;
      }
      /**
       * <code>uint32 motorErrorInfo = 37;</code>
       */
      public Builder setMotorErrorInfo(int value) {
        
        motorErrorInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 motorErrorInfo = 37;</code>
       */
      public Builder clearMotorErrorInfo() {
        
        motorErrorInfo_ = 0;
        onChanged();
        return this;
      }

      private long batteryID_ ;
      /**
       * <code>uint64 batteryID = 38;</code>
       */
      public long getBatteryID() {
        return batteryID_;
      }
      /**
       * <code>uint64 batteryID = 38;</code>
       */
      public Builder setBatteryID(long value) {
        
        batteryID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 batteryID = 38;</code>
       */
      public Builder clearBatteryID() {
        
        batteryID_ = 0L;
        onChanged();
        return this;
      }

      private int batteryVoltage_ ;
      /**
       * <code>uint32 batteryVoltage = 39;</code>
       */
      public int getBatteryVoltage() {
        return batteryVoltage_;
      }
      /**
       * <code>uint32 batteryVoltage = 39;</code>
       */
      public Builder setBatteryVoltage(int value) {
        
        batteryVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryVoltage = 39;</code>
       */
      public Builder clearBatteryVoltage() {
        
        batteryVoltage_ = 0;
        onChanged();
        return this;
      }

      private int batteryCurrent_ ;
      /**
       * <code>int32 batteryCurrent = 40;</code>
       */
      public int getBatteryCurrent() {
        return batteryCurrent_;
      }
      /**
       * <code>int32 batteryCurrent = 40;</code>
       */
      public Builder setBatteryCurrent(int value) {
        
        batteryCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 batteryCurrent = 40;</code>
       */
      public Builder clearBatteryCurrent() {
        
        batteryCurrent_ = 0;
        onChanged();
        return this;
      }

      private int batterySoC_ ;
      /**
       * <code>uint32 batterySoC = 41;</code>
       */
      public int getBatterySoC() {
        return batterySoC_;
      }
      /**
       * <code>uint32 batterySoC = 41;</code>
       */
      public Builder setBatterySoC(int value) {
        
        batterySoC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySoC = 41;</code>
       */
      public Builder clearBatterySoC() {
        
        batterySoC_ = 0;
        onChanged();
        return this;
      }

      private int batterySoH_ ;
      /**
       * <code>uint32 batterySoH = 42;</code>
       */
      public int getBatterySoH() {
        return batterySoH_;
      }
      /**
       * <code>uint32 batterySoH = 42;</code>
       */
      public Builder setBatterySoH(int value) {
        
        batterySoH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySoH = 42;</code>
       */
      public Builder clearBatterySoH() {
        
        batterySoH_ = 0;
        onChanged();
        return this;
      }

      private int batterySOP_ ;
      /**
       * <code>uint32 batterySOP = 43;</code>
       */
      public int getBatterySOP() {
        return batterySOP_;
      }
      /**
       * <code>uint32 batterySOP = 43;</code>
       */
      public Builder setBatterySOP(int value) {
        
        batterySOP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySOP = 43;</code>
       */
      public Builder clearBatterySOP() {
        
        batterySOP_ = 0;
        onChanged();
        return this;
      }

      private int batteryCellVoltage_ ;
      /**
       * <code>uint32 batteryCellVoltage = 44;</code>
       */
      public int getBatteryCellVoltage() {
        return batteryCellVoltage_;
      }
      /**
       * <code>uint32 batteryCellVoltage = 44;</code>
       */
      public Builder setBatteryCellVoltage(int value) {
        
        batteryCellVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryCellVoltage = 44;</code>
       */
      public Builder clearBatteryCellVoltage() {
        
        batteryCellVoltage_ = 0;
        onChanged();
        return this;
      }

      private int batteryModuleTemp_ ;
      /**
       * <code>uint32 batteryModuleTemp = 45;</code>
       */
      public int getBatteryModuleTemp() {
        return batteryModuleTemp_;
      }
      /**
       * <code>uint32 batteryModuleTemp = 45;</code>
       */
      public Builder setBatteryModuleTemp(int value) {
        
        batteryModuleTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryModuleTemp = 45;</code>
       */
      public Builder clearBatteryModuleTemp() {
        
        batteryModuleTemp_ = 0;
        onChanged();
        return this;
      }

      private int batteryPDUBMSTemp_ ;
      /**
       * <code>uint32 batteryPDU_BMS_Temp = 46;</code>
       */
      public int getBatteryPDUBMSTemp() {
        return batteryPDUBMSTemp_;
      }
      /**
       * <code>uint32 batteryPDU_BMS_Temp = 46;</code>
       */
      public Builder setBatteryPDUBMSTemp(int value) {
        
        batteryPDUBMSTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryPDU_BMS_Temp = 46;</code>
       */
      public Builder clearBatteryPDUBMSTemp() {
        
        batteryPDUBMSTemp_ = 0;
        onChanged();
        return this;
      }

      private int batteryCellBalMap_ ;
      /**
       * <code>uint32 batteryCellBalMap = 47;</code>
       */
      public int getBatteryCellBalMap() {
        return batteryCellBalMap_;
      }
      /**
       * <code>uint32 batteryCellBalMap = 47;</code>
       */
      public Builder setBatteryCellBalMap(int value) {
        
        batteryCellBalMap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryCellBalMap = 47;</code>
       */
      public Builder clearBatteryCellBalMap() {
        
        batteryCellBalMap_ = 0;
        onChanged();
        return this;
      }

      private int batteryEquCycleCount_ ;
      /**
       * <code>uint32 batteryEquCycleCount = 48;</code>
       */
      public int getBatteryEquCycleCount() {
        return batteryEquCycleCount_;
      }
      /**
       * <code>uint32 batteryEquCycleCount = 48;</code>
       */
      public Builder setBatteryEquCycleCount(int value) {
        
        batteryEquCycleCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryEquCycleCount = 48;</code>
       */
      public Builder clearBatteryEquCycleCount() {
        
        batteryEquCycleCount_ = 0;
        onChanged();
        return this;
      }

      private int batteryLifetimeChargeCap_ ;
      /**
       * <code>uint32 batteryLifetimeChargeCap = 49;</code>
       */
      public int getBatteryLifetimeChargeCap() {
        return batteryLifetimeChargeCap_;
      }
      /**
       * <code>uint32 batteryLifetimeChargeCap = 49;</code>
       */
      public Builder setBatteryLifetimeChargeCap(int value) {
        
        batteryLifetimeChargeCap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryLifetimeChargeCap = 49;</code>
       */
      public Builder clearBatteryLifetimeChargeCap() {
        
        batteryLifetimeChargeCap_ = 0;
        onChanged();
        return this;
      }

      private int batteryLifetimeDishargeCap_ ;
      /**
       * <code>uint32 batteryLifetimeDishargeCap = 50;</code>
       */
      public int getBatteryLifetimeDishargeCap() {
        return batteryLifetimeDishargeCap_;
      }
      /**
       * <code>uint32 batteryLifetimeDishargeCap = 50;</code>
       */
      public Builder setBatteryLifetimeDishargeCap(int value) {
        
        batteryLifetimeDishargeCap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryLifetimeDishargeCap = 50;</code>
       */
      public Builder clearBatteryLifetimeDishargeCap() {
        
        batteryLifetimeDishargeCap_ = 0;
        onChanged();
        return this;
      }

      private int batteryErrorInfo_ ;
      /**
       * <code>uint32 batteryErrorInfo = 51;</code>
       */
      public int getBatteryErrorInfo() {
        return batteryErrorInfo_;
      }
      /**
       * <code>uint32 batteryErrorInfo = 51;</code>
       */
      public Builder setBatteryErrorInfo(int value) {
        
        batteryErrorInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryErrorInfo = 51;</code>
       */
      public Builder clearBatteryErrorInfo() {
        
        batteryErrorInfo_ = 0;
        onChanged();
        return this;
      }

      private int batteryWarningInfo_ ;
      /**
       * <code>uint32 batteryWarningInfo = 52;</code>
       */
      public int getBatteryWarningInfo() {
        return batteryWarningInfo_;
      }
      /**
       * <code>uint32 batteryWarningInfo = 52;</code>
       */
      public Builder setBatteryWarningInfo(int value) {
        
        batteryWarningInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryWarningInfo = 52;</code>
       */
      public Builder clearBatteryWarningInfo() {
        
        batteryWarningInfo_ = 0;
        onChanged();
        return this;
      }

      private long batteryID2_ ;
      /**
       * <code>uint64 batteryID_2 = 53;</code>
       */
      public long getBatteryID2() {
        return batteryID2_;
      }
      /**
       * <code>uint64 batteryID_2 = 53;</code>
       */
      public Builder setBatteryID2(long value) {
        
        batteryID2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 batteryID_2 = 53;</code>
       */
      public Builder clearBatteryID2() {
        
        batteryID2_ = 0L;
        onChanged();
        return this;
      }

      private int batteryVoltage2_ ;
      /**
       * <code>uint32 batteryVoltage_2 = 54;</code>
       */
      public int getBatteryVoltage2() {
        return batteryVoltage2_;
      }
      /**
       * <code>uint32 batteryVoltage_2 = 54;</code>
       */
      public Builder setBatteryVoltage2(int value) {
        
        batteryVoltage2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryVoltage_2 = 54;</code>
       */
      public Builder clearBatteryVoltage2() {
        
        batteryVoltage2_ = 0;
        onChanged();
        return this;
      }

      private int batteryCurrent2_ ;
      /**
       * <code>int32 batteryCurrent_2 = 55;</code>
       */
      public int getBatteryCurrent2() {
        return batteryCurrent2_;
      }
      /**
       * <code>int32 batteryCurrent_2 = 55;</code>
       */
      public Builder setBatteryCurrent2(int value) {
        
        batteryCurrent2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 batteryCurrent_2 = 55;</code>
       */
      public Builder clearBatteryCurrent2() {
        
        batteryCurrent2_ = 0;
        onChanged();
        return this;
      }

      private int batterySoC2_ ;
      /**
       * <code>uint32 batterySoC_2 = 56;</code>
       */
      public int getBatterySoC2() {
        return batterySoC2_;
      }
      /**
       * <code>uint32 batterySoC_2 = 56;</code>
       */
      public Builder setBatterySoC2(int value) {
        
        batterySoC2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySoC_2 = 56;</code>
       */
      public Builder clearBatterySoC2() {
        
        batterySoC2_ = 0;
        onChanged();
        return this;
      }

      private int batterySoH2_ ;
      /**
       * <code>uint32 batterySoH_2 = 57;</code>
       */
      public int getBatterySoH2() {
        return batterySoH2_;
      }
      /**
       * <code>uint32 batterySoH_2 = 57;</code>
       */
      public Builder setBatterySoH2(int value) {
        
        batterySoH2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySoH_2 = 57;</code>
       */
      public Builder clearBatterySoH2() {
        
        batterySoH2_ = 0;
        onChanged();
        return this;
      }

      private int batterySOP2_ ;
      /**
       * <code>uint32 batterySOP_2 = 58;</code>
       */
      public int getBatterySOP2() {
        return batterySOP2_;
      }
      /**
       * <code>uint32 batterySOP_2 = 58;</code>
       */
      public Builder setBatterySOP2(int value) {
        
        batterySOP2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batterySOP_2 = 58;</code>
       */
      public Builder clearBatterySOP2() {
        
        batterySOP2_ = 0;
        onChanged();
        return this;
      }

      private int batteryCellVoltage2_ ;
      /**
       * <code>uint32 batteryCellVoltage_2 = 59;</code>
       */
      public int getBatteryCellVoltage2() {
        return batteryCellVoltage2_;
      }
      /**
       * <code>uint32 batteryCellVoltage_2 = 59;</code>
       */
      public Builder setBatteryCellVoltage2(int value) {
        
        batteryCellVoltage2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryCellVoltage_2 = 59;</code>
       */
      public Builder clearBatteryCellVoltage2() {
        
        batteryCellVoltage2_ = 0;
        onChanged();
        return this;
      }

      private int batteryModuleTemp2_ ;
      /**
       * <code>uint32 batteryModuleTemp_2 = 60;</code>
       */
      public int getBatteryModuleTemp2() {
        return batteryModuleTemp2_;
      }
      /**
       * <code>uint32 batteryModuleTemp_2 = 60;</code>
       */
      public Builder setBatteryModuleTemp2(int value) {
        
        batteryModuleTemp2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryModuleTemp_2 = 60;</code>
       */
      public Builder clearBatteryModuleTemp2() {
        
        batteryModuleTemp2_ = 0;
        onChanged();
        return this;
      }

      private int batteryPDUBMSTemp2_ ;
      /**
       * <code>uint32 batteryPDU_BMS_Temp_2 = 61;</code>
       */
      public int getBatteryPDUBMSTemp2() {
        return batteryPDUBMSTemp2_;
      }
      /**
       * <code>uint32 batteryPDU_BMS_Temp_2 = 61;</code>
       */
      public Builder setBatteryPDUBMSTemp2(int value) {
        
        batteryPDUBMSTemp2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryPDU_BMS_Temp_2 = 61;</code>
       */
      public Builder clearBatteryPDUBMSTemp2() {
        
        batteryPDUBMSTemp2_ = 0;
        onChanged();
        return this;
      }

      private int batteryCellBalMap2_ ;
      /**
       * <code>uint32 batteryCellBalMap_2 = 62;</code>
       */
      public int getBatteryCellBalMap2() {
        return batteryCellBalMap2_;
      }
      /**
       * <code>uint32 batteryCellBalMap_2 = 62;</code>
       */
      public Builder setBatteryCellBalMap2(int value) {
        
        batteryCellBalMap2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryCellBalMap_2 = 62;</code>
       */
      public Builder clearBatteryCellBalMap2() {
        
        batteryCellBalMap2_ = 0;
        onChanged();
        return this;
      }

      private int batteryEquCycleCount2_ ;
      /**
       * <code>uint32 batteryEquCycleCount_2 = 63;</code>
       */
      public int getBatteryEquCycleCount2() {
        return batteryEquCycleCount2_;
      }
      /**
       * <code>uint32 batteryEquCycleCount_2 = 63;</code>
       */
      public Builder setBatteryEquCycleCount2(int value) {
        
        batteryEquCycleCount2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryEquCycleCount_2 = 63;</code>
       */
      public Builder clearBatteryEquCycleCount2() {
        
        batteryEquCycleCount2_ = 0;
        onChanged();
        return this;
      }

      private int batteryLifetimeChargeCap2_ ;
      /**
       * <code>uint32 batteryLifetimeChargeCap_2 = 64;</code>
       */
      public int getBatteryLifetimeChargeCap2() {
        return batteryLifetimeChargeCap2_;
      }
      /**
       * <code>uint32 batteryLifetimeChargeCap_2 = 64;</code>
       */
      public Builder setBatteryLifetimeChargeCap2(int value) {
        
        batteryLifetimeChargeCap2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryLifetimeChargeCap_2 = 64;</code>
       */
      public Builder clearBatteryLifetimeChargeCap2() {
        
        batteryLifetimeChargeCap2_ = 0;
        onChanged();
        return this;
      }

      private int batteryLifetimeDishargeCap2_ ;
      /**
       * <code>uint32 batteryLifetimeDishargeCap_2 = 65;</code>
       */
      public int getBatteryLifetimeDishargeCap2() {
        return batteryLifetimeDishargeCap2_;
      }
      /**
       * <code>uint32 batteryLifetimeDishargeCap_2 = 65;</code>
       */
      public Builder setBatteryLifetimeDishargeCap2(int value) {
        
        batteryLifetimeDishargeCap2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryLifetimeDishargeCap_2 = 65;</code>
       */
      public Builder clearBatteryLifetimeDishargeCap2() {
        
        batteryLifetimeDishargeCap2_ = 0;
        onChanged();
        return this;
      }

      private int batteryErrorInfo2_ ;
      /**
       * <code>uint32 batteryErrorInfo_2 = 66;</code>
       */
      public int getBatteryErrorInfo2() {
        return batteryErrorInfo2_;
      }
      /**
       * <code>uint32 batteryErrorInfo_2 = 66;</code>
       */
      public Builder setBatteryErrorInfo2(int value) {
        
        batteryErrorInfo2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryErrorInfo_2 = 66;</code>
       */
      public Builder clearBatteryErrorInfo2() {
        
        batteryErrorInfo2_ = 0;
        onChanged();
        return this;
      }

      private int batteryWarningInfo2_ ;
      /**
       * <code>uint32 batteryWarningInfo_2 = 67;</code>
       */
      public int getBatteryWarningInfo2() {
        return batteryWarningInfo2_;
      }
      /**
       * <code>uint32 batteryWarningInfo_2 = 67;</code>
       */
      public Builder setBatteryWarningInfo2(int value) {
        
        batteryWarningInfo2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryWarningInfo_2 = 67;</code>
       */
      public Builder clearBatteryWarningInfo2() {
        
        batteryWarningInfo2_ = 0;
        onChanged();
        return this;
      }

      private int vehicleState_ ;
      /**
       * <code>uint32 VehicleState = 78;</code>
       */
      public int getVehicleState() {
        return vehicleState_;
      }
      /**
       * <code>uint32 VehicleState = 78;</code>
       */
      public Builder setVehicleState(int value) {
        
        vehicleState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 VehicleState = 78;</code>
       */
      public Builder clearVehicleState() {
        
        vehicleState_ = 0;
        onChanged();
        return this;
      }

      private int dTE_ ;
      /**
       * <code>uint32 DTE = 79;</code>
       */
      public int getDTE() {
        return dTE_;
      }
      /**
       * <code>uint32 DTE = 79;</code>
       */
      public Builder setDTE(int value) {
        
        dTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 DTE = 79;</code>
       */
      public Builder clearDTE() {
        
        dTE_ = 0;
        onChanged();
        return this;
      }

      private int displayControllerHwVersion_ ;
      /**
       * <code>uint32 DisplayController_Hw_version = 80;</code>
       */
      public int getDisplayControllerHwVersion() {
        return displayControllerHwVersion_;
      }
      /**
       * <code>uint32 DisplayController_Hw_version = 80;</code>
       */
      public Builder setDisplayControllerHwVersion(int value) {
        
        displayControllerHwVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 DisplayController_Hw_version = 80;</code>
       */
      public Builder clearDisplayControllerHwVersion() {
        
        displayControllerHwVersion_ = 0;
        onChanged();
        return this;
      }

      private int displayControllerSwVersion_ ;
      /**
       * <code>uint32 DisplayController_Sw_version = 81;</code>
       */
      public int getDisplayControllerSwVersion() {
        return displayControllerSwVersion_;
      }
      /**
       * <code>uint32 DisplayController_Sw_version = 81;</code>
       */
      public Builder setDisplayControllerSwVersion(int value) {
        
        displayControllerSwVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 DisplayController_Sw_version = 81;</code>
       */
      public Builder clearDisplayControllerSwVersion() {
        
        displayControllerSwVersion_ = 0;
        onChanged();
        return this;
      }

      private int alertsStatus_ ;
      /**
       * <code>uint32 AlertsStatus = 82;</code>
       */
      public int getAlertsStatus() {
        return alertsStatus_;
      }
      /**
       * <code>uint32 AlertsStatus = 82;</code>
       */
      public Builder setAlertsStatus(int value) {
        
        alertsStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 AlertsStatus = 82;</code>
       */
      public Builder clearAlertsStatus() {
        
        alertsStatus_ = 0;
        onChanged();
        return this;
      }

      private int diagnosticErrorCode_ ;
      /**
       * <code>uint32 DiagnosticErrorCode = 83;</code>
       */
      public int getDiagnosticErrorCode() {
        return diagnosticErrorCode_;
      }
      /**
       * <code>uint32 DiagnosticErrorCode = 83;</code>
       */
      public Builder setDiagnosticErrorCode(int value) {
        
        diagnosticErrorCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 DiagnosticErrorCode = 83;</code>
       */
      public Builder clearDiagnosticErrorCode() {
        
        diagnosticErrorCode_ = 0;
        onChanged();
        return this;
      }

      private int batteryStatusInfo_ ;
      /**
       * <code>uint32 batteryStatusInfo = 84;</code>
       */
      public int getBatteryStatusInfo() {
        return batteryStatusInfo_;
      }
      /**
       * <code>uint32 batteryStatusInfo = 84;</code>
       */
      public Builder setBatteryStatusInfo(int value) {
        
        batteryStatusInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryStatusInfo = 84;</code>
       */
      public Builder clearBatteryStatusInfo() {
        
        batteryStatusInfo_ = 0;
        onChanged();
        return this;
      }

      private boolean nwModeMismatch_ ;
      /**
       * <code>bool nwModeMismatch = 85;</code>
       */
      public boolean getNwModeMismatch() {
        return nwModeMismatch_;
      }
      /**
       * <code>bool nwModeMismatch = 85;</code>
       */
      public Builder setNwModeMismatch(boolean value) {
        
        nwModeMismatch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool nwModeMismatch = 85;</code>
       */
      public Builder clearNwModeMismatch() {
        
        nwModeMismatch_ = false;
        onChanged();
        return this;
      }

      private boolean bmsWarnDetected_ ;
      /**
       * <code>bool BmsWarnDetected = 86;</code>
       */
      public boolean getBmsWarnDetected() {
        return bmsWarnDetected_;
      }
      /**
       * <code>bool BmsWarnDetected = 86;</code>
       */
      public Builder setBmsWarnDetected(boolean value) {
        
        bmsWarnDetected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool BmsWarnDetected = 86;</code>
       */
      public Builder clearBmsWarnDetected() {
        
        bmsWarnDetected_ = false;
        onChanged();
        return this;
      }

      private boolean testerDischargeReq_ ;
      /**
       * <code>bool testerDischargeReq = 87;</code>
       */
      public boolean getTesterDischargeReq() {
        return testerDischargeReq_;
      }
      /**
       * <code>bool testerDischargeReq = 87;</code>
       */
      public Builder setTesterDischargeReq(boolean value) {
        
        testerDischargeReq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool testerDischargeReq = 87;</code>
       */
      public Builder clearTesterDischargeReq() {
        
        testerDischargeReq_ = false;
        onChanged();
        return this;
      }

      private boolean testerChargeReq_ ;
      /**
       * <code>bool testerChargeReq = 88;</code>
       */
      public boolean getTesterChargeReq() {
        return testerChargeReq_;
      }
      /**
       * <code>bool testerChargeReq = 88;</code>
       */
      public Builder setTesterChargeReq(boolean value) {
        
        testerChargeReq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool testerChargeReq = 88;</code>
       */
      public Builder clearTesterChargeReq() {
        
        testerChargeReq_ = false;
        onChanged();
        return this;
      }

      private boolean batteryBalStatus_ ;
      /**
       * <code>bool batteryBalStatus = 89;</code>
       */
      public boolean getBatteryBalStatus() {
        return batteryBalStatus_;
      }
      /**
       * <code>bool batteryBalStatus = 89;</code>
       */
      public Builder setBatteryBalStatus(boolean value) {
        
        batteryBalStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool batteryBalStatus = 89;</code>
       */
      public Builder clearBatteryBalStatus() {
        
        batteryBalStatus_ = false;
        onChanged();
        return this;
      }

      private int batteryAuthData_ ;
      /**
       * <code>uint32 batteryAuthData = 90;</code>
       */
      public int getBatteryAuthData() {
        return batteryAuthData_;
      }
      /**
       * <code>uint32 batteryAuthData = 90;</code>
       */
      public Builder setBatteryAuthData(int value) {
        
        batteryAuthData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryAuthData = 90;</code>
       */
      public Builder clearBatteryAuthData() {
        
        batteryAuthData_ = 0;
        onChanged();
        return this;
      }

      private int batteryFullCapacity_ ;
      /**
       * <code>uint32 batteryFullCapacity = 91;</code>
       */
      public int getBatteryFullCapacity() {
        return batteryFullCapacity_;
      }
      /**
       * <code>uint32 batteryFullCapacity = 91;</code>
       */
      public Builder setBatteryFullCapacity(int value) {
        
        batteryFullCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryFullCapacity = 91;</code>
       */
      public Builder clearBatteryFullCapacity() {
        
        batteryFullCapacity_ = 0;
        onChanged();
        return this;
      }

      private int maxChargeCurrent_ ;
      /**
       * <code>int32 maxChargeCurrent = 92;</code>
       */
      public int getMaxChargeCurrent() {
        return maxChargeCurrent_;
      }
      /**
       * <code>int32 maxChargeCurrent = 92;</code>
       */
      public Builder setMaxChargeCurrent(int value) {
        
        maxChargeCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 maxChargeCurrent = 92;</code>
       */
      public Builder clearMaxChargeCurrent() {
        
        maxChargeCurrent_ = 0;
        onChanged();
        return this;
      }

      private int maxChargeVoltage_ ;
      /**
       * <code>uint32 maxChargeVoltage = 93;</code>
       */
      public int getMaxChargeVoltage() {
        return maxChargeVoltage_;
      }
      /**
       * <code>uint32 maxChargeVoltage = 93;</code>
       */
      public Builder setMaxChargeVoltage(int value) {
        
        maxChargeVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 maxChargeVoltage = 93;</code>
       */
      public Builder clearMaxChargeVoltage() {
        
        maxChargeVoltage_ = 0;
        onChanged();
        return this;
      }

      private int maxDischargeCurrent_ ;
      /**
       * <code>uint32 maxDischargeCurrent = 94;</code>
       */
      public int getMaxDischargeCurrent() {
        return maxDischargeCurrent_;
      }
      /**
       * <code>uint32 maxDischargeCurrent = 94;</code>
       */
      public Builder setMaxDischargeCurrent(int value) {
        
        maxDischargeCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 maxDischargeCurrent = 94;</code>
       */
      public Builder clearMaxDischargeCurrent() {
        
        maxDischargeCurrent_ = 0;
        onChanged();
        return this;
      }

      private int bmsState_ ;
      /**
       * <code>uint32 bmsState = 95;</code>
       */
      public int getBmsState() {
        return bmsState_;
      }
      /**
       * <code>uint32 bmsState = 95;</code>
       */
      public Builder setBmsState(int value) {
        
        bmsState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsState = 95;</code>
       */
      public Builder clearBmsState() {
        
        bmsState_ = 0;
        onChanged();
        return this;
      }

      private int cellTemp_ ;
      /**
       * <code>uint32 cellTemp = 96;</code>
       */
      public int getCellTemp() {
        return cellTemp_;
      }
      /**
       * <code>uint32 cellTemp = 96;</code>
       */
      public Builder setCellTemp(int value) {
        
        cellTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cellTemp = 96;</code>
       */
      public Builder clearCellTemp() {
        
        cellTemp_ = 0;
        onChanged();
        return this;
      }

      private int bmsFWInitVrsn_ ;
      /**
       * <code>uint32 bmsFWInitVrsn = 97;</code>
       */
      public int getBmsFWInitVrsn() {
        return bmsFWInitVrsn_;
      }
      /**
       * <code>uint32 bmsFWInitVrsn = 97;</code>
       */
      public Builder setBmsFWInitVrsn(int value) {
        
        bmsFWInitVrsn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsFWInitVrsn = 97;</code>
       */
      public Builder clearBmsFWInitVrsn() {
        
        bmsFWInitVrsn_ = 0;
        onChanged();
        return this;
      }

      private int bmsFwSAPVrsn_ ;
      /**
       * <code>uint32 bmsFwSAPVrsn = 98;</code>
       */
      public int getBmsFwSAPVrsn() {
        return bmsFwSAPVrsn_;
      }
      /**
       * <code>uint32 bmsFwSAPVrsn = 98;</code>
       */
      public Builder setBmsFwSAPVrsn(int value) {
        
        bmsFwSAPVrsn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsFwSAPVrsn = 98;</code>
       */
      public Builder clearBmsFwSAPVrsn() {
        
        bmsFwSAPVrsn_ = 0;
        onChanged();
        return this;
      }

      private int bmsCFGVrsn_ ;
      /**
       * <code>uint32 bmsCFGVrsn = 99;</code>
       */
      public int getBmsCFGVrsn() {
        return bmsCFGVrsn_;
      }
      /**
       * <code>uint32 bmsCFGVrsn = 99;</code>
       */
      public Builder setBmsCFGVrsn(int value) {
        
        bmsCFGVrsn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsCFGVrsn = 99;</code>
       */
      public Builder clearBmsCFGVrsn() {
        
        bmsCFGVrsn_ = 0;
        onChanged();
        return this;
      }

      private int bmsDBCVrsn_ ;
      /**
       * <code>uint32 bmsDBCVrsn = 100;</code>
       */
      public int getBmsDBCVrsn() {
        return bmsDBCVrsn_;
      }
      /**
       * <code>uint32 bmsDBCVrsn = 100;</code>
       */
      public Builder setBmsDBCVrsn(int value) {
        
        bmsDBCVrsn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsDBCVrsn = 100;</code>
       */
      public Builder clearBmsDBCVrsn() {
        
        bmsDBCVrsn_ = 0;
        onChanged();
        return this;
      }

      private int tcuCustmerCode_ ;
      /**
       * <code>uint32 tcuCustmerCode = 101;</code>
       */
      public int getTcuCustmerCode() {
        return tcuCustmerCode_;
      }
      /**
       * <code>uint32 tcuCustmerCode = 101;</code>
       */
      public Builder setTcuCustmerCode(int value) {
        
        tcuCustmerCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuCustmerCode = 101;</code>
       */
      public Builder clearTcuCustmerCode() {
        
        tcuCustmerCode_ = 0;
        onChanged();
        return this;
      }

      private int tcuSWVrsn_ ;
      /**
       * <code>uint32 tcuSWVrsn = 102;</code>
       */
      public int getTcuSWVrsn() {
        return tcuSWVrsn_;
      }
      /**
       * <code>uint32 tcuSWVrsn = 102;</code>
       */
      public Builder setTcuSWVrsn(int value) {
        
        tcuSWVrsn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuSWVrsn = 102;</code>
       */
      public Builder clearTcuSWVrsn() {
        
        tcuSWVrsn_ = 0;
        onChanged();
        return this;
      }

      private int cycleChargeCapacity_ ;
      /**
       * <code>uint32 cycleChargeCapacity = 103;</code>
       */
      public int getCycleChargeCapacity() {
        return cycleChargeCapacity_;
      }
      /**
       * <code>uint32 cycleChargeCapacity = 103;</code>
       */
      public Builder setCycleChargeCapacity(int value) {
        
        cycleChargeCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cycleChargeCapacity = 103;</code>
       */
      public Builder clearCycleChargeCapacity() {
        
        cycleChargeCapacity_ = 0;
        onChanged();
        return this;
      }

      private int cycleDischargeCapacity_ ;
      /**
       * <code>uint32 cycleDischargeCapacity = 104;</code>
       */
      public int getCycleDischargeCapacity() {
        return cycleDischargeCapacity_;
      }
      /**
       * <code>uint32 cycleDischargeCapacity = 104;</code>
       */
      public Builder setCycleDischargeCapacity(int value) {
        
        cycleDischargeCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cycleDischargeCapacity = 104;</code>
       */
      public Builder clearCycleDischargeCapacity() {
        
        cycleDischargeCapacity_ = 0;
        onChanged();
        return this;
      }

      private int availableCapacity_ ;
      /**
       * <code>uint32 availableCapacity = 105;</code>
       */
      public int getAvailableCapacity() {
        return availableCapacity_;
      }
      /**
       * <code>uint32 availableCapacity = 105;</code>
       */
      public Builder setAvailableCapacity(int value) {
        
        availableCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 availableCapacity = 105;</code>
       */
      public Builder clearAvailableCapacity() {
        
        availableCapacity_ = 0;
        onChanged();
        return this;
      }

      private int availableEnergy_ ;
      /**
       * <code>uint32 availableEnergy = 106;</code>
       */
      public int getAvailableEnergy() {
        return availableEnergy_;
      }
      /**
       * <code>uint32 availableEnergy = 106;</code>
       */
      public Builder setAvailableEnergy(int value) {
        
        availableEnergy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 availableEnergy = 106;</code>
       */
      public Builder clearAvailableEnergy() {
        
        availableEnergy_ = 0;
        onChanged();
        return this;
      }

      private int batteryInfo1_ ;
      /**
       * <code>uint32 batteryInfo_1 = 107;</code>
       */
      public int getBatteryInfo1() {
        return batteryInfo1_;
      }
      /**
       * <code>uint32 batteryInfo_1 = 107;</code>
       */
      public Builder setBatteryInfo1(int value) {
        
        batteryInfo1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryInfo_1 = 107;</code>
       */
      public Builder clearBatteryInfo1() {
        
        batteryInfo1_ = 0;
        onChanged();
        return this;
      }

      private int batteryInfo2_ ;
      /**
       * <code>uint32 batteryInfo_2 = 108;</code>
       */
      public int getBatteryInfo2() {
        return batteryInfo2_;
      }
      /**
       * <code>uint32 batteryInfo_2 = 108;</code>
       */
      public Builder setBatteryInfo2(int value) {
        
        batteryInfo2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryInfo_2 = 108;</code>
       */
      public Builder clearBatteryInfo2() {
        
        batteryInfo2_ = 0;
        onChanged();
        return this;
      }

      private int batteryInfo3_ ;
      /**
       * <code>uint32 batteryInfo_3 = 109;</code>
       */
      public int getBatteryInfo3() {
        return batteryInfo3_;
      }
      /**
       * <code>uint32 batteryInfo_3 = 109;</code>
       */
      public Builder setBatteryInfo3(int value) {
        
        batteryInfo3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryInfo_3 = 109;</code>
       */
      public Builder clearBatteryInfo3() {
        
        batteryInfo3_ = 0;
        onChanged();
        return this;
      }

      private int batteryInfo4_ ;
      /**
       * <code>uint32 batteryInfo_4 = 110;</code>
       */
      public int getBatteryInfo4() {
        return batteryInfo4_;
      }
      /**
       * <code>uint32 batteryInfo_4 = 110;</code>
       */
      public Builder setBatteryInfo4(int value) {
        
        batteryInfo4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryInfo_4 = 110;</code>
       */
      public Builder clearBatteryInfo4() {
        
        batteryInfo4_ = 0;
        onChanged();
        return this;
      }

      private int batteryInfo5_ ;
      /**
       * <code>uint32 batteryInfo_5 = 111;</code>
       */
      public int getBatteryInfo5() {
        return batteryInfo5_;
      }
      /**
       * <code>uint32 batteryInfo_5 = 111;</code>
       */
      public Builder setBatteryInfo5(int value) {
        
        batteryInfo5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryInfo_5 = 111;</code>
       */
      public Builder clearBatteryInfo5() {
        
        batteryInfo5_ = 0;
        onChanged();
        return this;
      }

      private boolean canTimeOut_ ;
      /**
       * <code>bool canTimeOut = 112;</code>
       */
      public boolean getCanTimeOut() {
        return canTimeOut_;
      }
      /**
       * <code>bool canTimeOut = 112;</code>
       */
      public Builder setCanTimeOut(boolean value) {
        
        canTimeOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool canTimeOut = 112;</code>
       */
      public Builder clearCanTimeOut() {
        
        canTimeOut_ = false;
        onChanged();
        return this;
      }

      private int bmsTime_ ;
      /**
       * <code>uint32 bmsTime = 113;</code>
       */
      public int getBmsTime() {
        return bmsTime_;
      }
      /**
       * <code>uint32 bmsTime = 113;</code>
       */
      public Builder setBmsTime(int value) {
        
        bmsTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsTime = 113;</code>
       */
      public Builder clearBmsTime() {
        
        bmsTime_ = 0;
        onChanged();
        return this;
      }

      private int tcuTime_ ;
      /**
       * <code>uint32 tcuTime = 114;</code>
       */
      public int getTcuTime() {
        return tcuTime_;
      }
      /**
       * <code>uint32 tcuTime = 114;</code>
       */
      public Builder setTcuTime(int value) {
        
        tcuTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuTime = 114;</code>
       */
      public Builder clearTcuTime() {
        
        tcuTime_ = 0;
        onChanged();
        return this;
      }

      private int batteryStatusInfo2_ ;
      /**
       * <code>uint32 batteryStatusInfo_2 = 115;</code>
       */
      public int getBatteryStatusInfo2() {
        return batteryStatusInfo2_;
      }
      /**
       * <code>uint32 batteryStatusInfo_2 = 115;</code>
       */
      public Builder setBatteryStatusInfo2(int value) {
        
        batteryStatusInfo2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryStatusInfo_2 = 115;</code>
       */
      public Builder clearBatteryStatusInfo2() {
        
        batteryStatusInfo2_ = 0;
        onChanged();
        return this;
      }

      private boolean nwModeMismatch2_ ;
      /**
       * <code>bool nwModeMismatch_2 = 116;</code>
       */
      public boolean getNwModeMismatch2() {
        return nwModeMismatch2_;
      }
      /**
       * <code>bool nwModeMismatch_2 = 116;</code>
       */
      public Builder setNwModeMismatch2(boolean value) {
        
        nwModeMismatch2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool nwModeMismatch_2 = 116;</code>
       */
      public Builder clearNwModeMismatch2() {
        
        nwModeMismatch2_ = false;
        onChanged();
        return this;
      }

      private boolean bmsWarnDetected2_ ;
      /**
       * <code>bool BmsWarnDetected_2 = 117;</code>
       */
      public boolean getBmsWarnDetected2() {
        return bmsWarnDetected2_;
      }
      /**
       * <code>bool BmsWarnDetected_2 = 117;</code>
       */
      public Builder setBmsWarnDetected2(boolean value) {
        
        bmsWarnDetected2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool BmsWarnDetected_2 = 117;</code>
       */
      public Builder clearBmsWarnDetected2() {
        
        bmsWarnDetected2_ = false;
        onChanged();
        return this;
      }

      private boolean testerDischargeReq2_ ;
      /**
       * <code>bool testerDischargeReq_2 = 118;</code>
       */
      public boolean getTesterDischargeReq2() {
        return testerDischargeReq2_;
      }
      /**
       * <code>bool testerDischargeReq_2 = 118;</code>
       */
      public Builder setTesterDischargeReq2(boolean value) {
        
        testerDischargeReq2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool testerDischargeReq_2 = 118;</code>
       */
      public Builder clearTesterDischargeReq2() {
        
        testerDischargeReq2_ = false;
        onChanged();
        return this;
      }

      private boolean testerChargeReq2_ ;
      /**
       * <code>bool testerChargeReq_2 = 119;</code>
       */
      public boolean getTesterChargeReq2() {
        return testerChargeReq2_;
      }
      /**
       * <code>bool testerChargeReq_2 = 119;</code>
       */
      public Builder setTesterChargeReq2(boolean value) {
        
        testerChargeReq2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool testerChargeReq_2 = 119;</code>
       */
      public Builder clearTesterChargeReq2() {
        
        testerChargeReq2_ = false;
        onChanged();
        return this;
      }

      private boolean batteryBalStatus2_ ;
      /**
       * <code>bool batteryBalStatus_2 = 120;</code>
       */
      public boolean getBatteryBalStatus2() {
        return batteryBalStatus2_;
      }
      /**
       * <code>bool batteryBalStatus_2 = 120;</code>
       */
      public Builder setBatteryBalStatus2(boolean value) {
        
        batteryBalStatus2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool batteryBalStatus_2 = 120;</code>
       */
      public Builder clearBatteryBalStatus2() {
        
        batteryBalStatus2_ = false;
        onChanged();
        return this;
      }

      private int batteryAuthData2_ ;
      /**
       * <code>uint32 batteryAuthData_2 = 121;</code>
       */
      public int getBatteryAuthData2() {
        return batteryAuthData2_;
      }
      /**
       * <code>uint32 batteryAuthData_2 = 121;</code>
       */
      public Builder setBatteryAuthData2(int value) {
        
        batteryAuthData2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryAuthData_2 = 121;</code>
       */
      public Builder clearBatteryAuthData2() {
        
        batteryAuthData2_ = 0;
        onChanged();
        return this;
      }

      private int batteryFullCapacity2_ ;
      /**
       * <code>uint32 batteryFullCapacity_2 = 122;</code>
       */
      public int getBatteryFullCapacity2() {
        return batteryFullCapacity2_;
      }
      /**
       * <code>uint32 batteryFullCapacity_2 = 122;</code>
       */
      public Builder setBatteryFullCapacity2(int value) {
        
        batteryFullCapacity2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 batteryFullCapacity_2 = 122;</code>
       */
      public Builder clearBatteryFullCapacity2() {
        
        batteryFullCapacity2_ = 0;
        onChanged();
        return this;
      }

      private int maxChargeCurrent2_ ;
      /**
       * <code>int32 maxChargeCurrent_2 = 123;</code>
       */
      public int getMaxChargeCurrent2() {
        return maxChargeCurrent2_;
      }
      /**
       * <code>int32 maxChargeCurrent_2 = 123;</code>
       */
      public Builder setMaxChargeCurrent2(int value) {
        
        maxChargeCurrent2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 maxChargeCurrent_2 = 123;</code>
       */
      public Builder clearMaxChargeCurrent2() {
        
        maxChargeCurrent2_ = 0;
        onChanged();
        return this;
      }

      private int maxChargeVoltage2_ ;
      /**
       * <code>uint32 maxChargeVoltage_2 = 124;</code>
       */
      public int getMaxChargeVoltage2() {
        return maxChargeVoltage2_;
      }
      /**
       * <code>uint32 maxChargeVoltage_2 = 124;</code>
       */
      public Builder setMaxChargeVoltage2(int value) {
        
        maxChargeVoltage2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 maxChargeVoltage_2 = 124;</code>
       */
      public Builder clearMaxChargeVoltage2() {
        
        maxChargeVoltage2_ = 0;
        onChanged();
        return this;
      }

      private int maxDischargeCurrent2_ ;
      /**
       * <code>uint32 maxDischargeCurrent_2 = 125;</code>
       */
      public int getMaxDischargeCurrent2() {
        return maxDischargeCurrent2_;
      }
      /**
       * <code>uint32 maxDischargeCurrent_2 = 125;</code>
       */
      public Builder setMaxDischargeCurrent2(int value) {
        
        maxDischargeCurrent2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 maxDischargeCurrent_2 = 125;</code>
       */
      public Builder clearMaxDischargeCurrent2() {
        
        maxDischargeCurrent2_ = 0;
        onChanged();
        return this;
      }

      private int bmsState2_ ;
      /**
       * <code>uint32 bmsState_2 = 126;</code>
       */
      public int getBmsState2() {
        return bmsState2_;
      }
      /**
       * <code>uint32 bmsState_2 = 126;</code>
       */
      public Builder setBmsState2(int value) {
        
        bmsState2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsState_2 = 126;</code>
       */
      public Builder clearBmsState2() {
        
        bmsState2_ = 0;
        onChanged();
        return this;
      }

      private int cellTemp2_ ;
      /**
       * <code>uint32 cellTemp_2 = 127;</code>
       */
      public int getCellTemp2() {
        return cellTemp2_;
      }
      /**
       * <code>uint32 cellTemp_2 = 127;</code>
       */
      public Builder setCellTemp2(int value) {
        
        cellTemp2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cellTemp_2 = 127;</code>
       */
      public Builder clearCellTemp2() {
        
        cellTemp2_ = 0;
        onChanged();
        return this;
      }

      private int bmsFWInitVrsn2_ ;
      /**
       * <code>uint32 bmsFWInitVrsn_2 = 128;</code>
       */
      public int getBmsFWInitVrsn2() {
        return bmsFWInitVrsn2_;
      }
      /**
       * <code>uint32 bmsFWInitVrsn_2 = 128;</code>
       */
      public Builder setBmsFWInitVrsn2(int value) {
        
        bmsFWInitVrsn2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsFWInitVrsn_2 = 128;</code>
       */
      public Builder clearBmsFWInitVrsn2() {
        
        bmsFWInitVrsn2_ = 0;
        onChanged();
        return this;
      }

      private int bmsFwSAPVrsn2_ ;
      /**
       * <code>uint32 bmsFwSAPVrsn_2 = 129;</code>
       */
      public int getBmsFwSAPVrsn2() {
        return bmsFwSAPVrsn2_;
      }
      /**
       * <code>uint32 bmsFwSAPVrsn_2 = 129;</code>
       */
      public Builder setBmsFwSAPVrsn2(int value) {
        
        bmsFwSAPVrsn2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsFwSAPVrsn_2 = 129;</code>
       */
      public Builder clearBmsFwSAPVrsn2() {
        
        bmsFwSAPVrsn2_ = 0;
        onChanged();
        return this;
      }

      private int bmsCFGVrsn2_ ;
      /**
       * <code>uint32 bmsCFGVrsn_2 = 130;</code>
       */
      public int getBmsCFGVrsn2() {
        return bmsCFGVrsn2_;
      }
      /**
       * <code>uint32 bmsCFGVrsn_2 = 130;</code>
       */
      public Builder setBmsCFGVrsn2(int value) {
        
        bmsCFGVrsn2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsCFGVrsn_2 = 130;</code>
       */
      public Builder clearBmsCFGVrsn2() {
        
        bmsCFGVrsn2_ = 0;
        onChanged();
        return this;
      }

      private int bmsDBCVrsn2_ ;
      /**
       * <code>uint32 bmsDBCVrsn_2 = 131;</code>
       */
      public int getBmsDBCVrsn2() {
        return bmsDBCVrsn2_;
      }
      /**
       * <code>uint32 bmsDBCVrsn_2 = 131;</code>
       */
      public Builder setBmsDBCVrsn2(int value) {
        
        bmsDBCVrsn2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsDBCVrsn_2 = 131;</code>
       */
      public Builder clearBmsDBCVrsn2() {
        
        bmsDBCVrsn2_ = 0;
        onChanged();
        return this;
      }

      private int tcuCustmerCode2_ ;
      /**
       * <code>uint32 tcuCustmerCode_2 = 132;</code>
       */
      public int getTcuCustmerCode2() {
        return tcuCustmerCode2_;
      }
      /**
       * <code>uint32 tcuCustmerCode_2 = 132;</code>
       */
      public Builder setTcuCustmerCode2(int value) {
        
        tcuCustmerCode2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuCustmerCode_2 = 132;</code>
       */
      public Builder clearTcuCustmerCode2() {
        
        tcuCustmerCode2_ = 0;
        onChanged();
        return this;
      }

      private int tcuSWVrsn2_ ;
      /**
       * <code>uint32 tcuSWVrsn_2 = 133;</code>
       */
      public int getTcuSWVrsn2() {
        return tcuSWVrsn2_;
      }
      /**
       * <code>uint32 tcuSWVrsn_2 = 133;</code>
       */
      public Builder setTcuSWVrsn2(int value) {
        
        tcuSWVrsn2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuSWVrsn_2 = 133;</code>
       */
      public Builder clearTcuSWVrsn2() {
        
        tcuSWVrsn2_ = 0;
        onChanged();
        return this;
      }

      private int cycleChargeCapacity2_ ;
      /**
       * <code>uint32 cycleChargeCapacity_2 = 134;</code>
       */
      public int getCycleChargeCapacity2() {
        return cycleChargeCapacity2_;
      }
      /**
       * <code>uint32 cycleChargeCapacity_2 = 134;</code>
       */
      public Builder setCycleChargeCapacity2(int value) {
        
        cycleChargeCapacity2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cycleChargeCapacity_2 = 134;</code>
       */
      public Builder clearCycleChargeCapacity2() {
        
        cycleChargeCapacity2_ = 0;
        onChanged();
        return this;
      }

      private int cycleDischargeCapacity2_ ;
      /**
       * <code>uint32 cycleDischargeCapacity_2 = 135;</code>
       */
      public int getCycleDischargeCapacity2() {
        return cycleDischargeCapacity2_;
      }
      /**
       * <code>uint32 cycleDischargeCapacity_2 = 135;</code>
       */
      public Builder setCycleDischargeCapacity2(int value) {
        
        cycleDischargeCapacity2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 cycleDischargeCapacity_2 = 135;</code>
       */
      public Builder clearCycleDischargeCapacity2() {
        
        cycleDischargeCapacity2_ = 0;
        onChanged();
        return this;
      }

      private int availableCapacity2_ ;
      /**
       * <code>uint32 availableCapacity_2 = 136;</code>
       */
      public int getAvailableCapacity2() {
        return availableCapacity2_;
      }
      /**
       * <code>uint32 availableCapacity_2 = 136;</code>
       */
      public Builder setAvailableCapacity2(int value) {
        
        availableCapacity2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 availableCapacity_2 = 136;</code>
       */
      public Builder clearAvailableCapacity2() {
        
        availableCapacity2_ = 0;
        onChanged();
        return this;
      }

      private int availableEnergy2_ ;
      /**
       * <code>uint32 availableEnergy_2 = 137;</code>
       */
      public int getAvailableEnergy2() {
        return availableEnergy2_;
      }
      /**
       * <code>uint32 availableEnergy_2 = 137;</code>
       */
      public Builder setAvailableEnergy2(int value) {
        
        availableEnergy2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 availableEnergy_2 = 137;</code>
       */
      public Builder clearAvailableEnergy2() {
        
        availableEnergy2_ = 0;
        onChanged();
        return this;
      }

      private int battery2Info1_ ;
      /**
       * <code>uint32 battery2Info_1 = 138;</code>
       */
      public int getBattery2Info1() {
        return battery2Info1_;
      }
      /**
       * <code>uint32 battery2Info_1 = 138;</code>
       */
      public Builder setBattery2Info1(int value) {
        
        battery2Info1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 battery2Info_1 = 138;</code>
       */
      public Builder clearBattery2Info1() {
        
        battery2Info1_ = 0;
        onChanged();
        return this;
      }

      private int battery2Info2_ ;
      /**
       * <code>uint32 battery2Info_2 = 139;</code>
       */
      public int getBattery2Info2() {
        return battery2Info2_;
      }
      /**
       * <code>uint32 battery2Info_2 = 139;</code>
       */
      public Builder setBattery2Info2(int value) {
        
        battery2Info2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 battery2Info_2 = 139;</code>
       */
      public Builder clearBattery2Info2() {
        
        battery2Info2_ = 0;
        onChanged();
        return this;
      }

      private int battery2Info3_ ;
      /**
       * <code>uint32 battery2Info_3 = 140;</code>
       */
      public int getBattery2Info3() {
        return battery2Info3_;
      }
      /**
       * <code>uint32 battery2Info_3 = 140;</code>
       */
      public Builder setBattery2Info3(int value) {
        
        battery2Info3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 battery2Info_3 = 140;</code>
       */
      public Builder clearBattery2Info3() {
        
        battery2Info3_ = 0;
        onChanged();
        return this;
      }

      private int battery2Info4_ ;
      /**
       * <code>uint32 battery2Info_4 = 141;</code>
       */
      public int getBattery2Info4() {
        return battery2Info4_;
      }
      /**
       * <code>uint32 battery2Info_4 = 141;</code>
       */
      public Builder setBattery2Info4(int value) {
        
        battery2Info4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 battery2Info_4 = 141;</code>
       */
      public Builder clearBattery2Info4() {
        
        battery2Info4_ = 0;
        onChanged();
        return this;
      }

      private int battery2Info5_ ;
      /**
       * <code>uint32 battery2Info_5 = 142;</code>
       */
      public int getBattery2Info5() {
        return battery2Info5_;
      }
      /**
       * <code>uint32 battery2Info_5 = 142;</code>
       */
      public Builder setBattery2Info5(int value) {
        
        battery2Info5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 battery2Info_5 = 142;</code>
       */
      public Builder clearBattery2Info5() {
        
        battery2Info5_ = 0;
        onChanged();
        return this;
      }

      private boolean canTimeOut2_ ;
      /**
       * <code>bool canTimeOut_2 = 143;</code>
       */
      public boolean getCanTimeOut2() {
        return canTimeOut2_;
      }
      /**
       * <code>bool canTimeOut_2 = 143;</code>
       */
      public Builder setCanTimeOut2(boolean value) {
        
        canTimeOut2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool canTimeOut_2 = 143;</code>
       */
      public Builder clearCanTimeOut2() {
        
        canTimeOut2_ = false;
        onChanged();
        return this;
      }

      private int bmsTime2_ ;
      /**
       * <code>uint32 bmsTime_2 = 144;</code>
       */
      public int getBmsTime2() {
        return bmsTime2_;
      }
      /**
       * <code>uint32 bmsTime_2 = 144;</code>
       */
      public Builder setBmsTime2(int value) {
        
        bmsTime2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 bmsTime_2 = 144;</code>
       */
      public Builder clearBmsTime2() {
        
        bmsTime2_ = 0;
        onChanged();
        return this;
      }

      private int tcuTime2_ ;
      /**
       * <code>uint32 tcuTime_2 = 145;</code>
       */
      public int getTcuTime2() {
        return tcuTime2_;
      }
      /**
       * <code>uint32 tcuTime_2 = 145;</code>
       */
      public Builder setTcuTime2(int value) {
        
        tcuTime2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 tcuTime_2 = 145;</code>
       */
      public Builder clearTcuTime2() {
        
        tcuTime2_ = 0;
        onChanged();
        return this;
      }

      private boolean remoteImmobilization_ ;
      /**
       * <code>bool remoteImmobilization = 146;</code>
       */
      public boolean getRemoteImmobilization() {
        return remoteImmobilization_;
      }
      /**
       * <code>bool remoteImmobilization = 146;</code>
       */
      public Builder setRemoteImmobilization(boolean value) {
        
        remoteImmobilization_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool remoteImmobilization = 146;</code>
       */
      public Builder clearRemoteImmobilization() {
        
        remoteImmobilization_ = false;
        onChanged();
        return this;
      }

      private boolean bootLockStatus_ ;
      /**
       * <code>bool bootLockStatus = 147;</code>
       */
      public boolean getBootLockStatus() {
        return bootLockStatus_;
      }
      /**
       * <code>bool bootLockStatus = 147;</code>
       */
      public Builder setBootLockStatus(boolean value) {
        
        bootLockStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool bootLockStatus = 147;</code>
       */
      public Builder clearBootLockStatus() {
        
        bootLockStatus_ = false;
        onChanged();
        return this;
      }

      private boolean ignitionEnableStatus_ ;
      /**
       * <code>bool IgnitionEnableStatus = 148;</code>
       */
      public boolean getIgnitionEnableStatus() {
        return ignitionEnableStatus_;
      }
      /**
       * <code>bool IgnitionEnableStatus = 148;</code>
       */
      public Builder setIgnitionEnableStatus(boolean value) {
        
        ignitionEnableStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool IgnitionEnableStatus = 148;</code>
       */
      public Builder clearIgnitionEnableStatus() {
        
        ignitionEnableStatus_ = false;
        onChanged();
        return this;
      }

      private float cW1_ ;
      /**
       * <code>float CW1 = 149;</code>
       */
      public float getCW1() {
        return cW1_;
      }
      /**
       * <code>float CW1 = 149;</code>
       */
      public Builder setCW1(float value) {
        
        cW1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float CW1 = 149;</code>
       */
      public Builder clearCW1() {
        
        cW1_ = 0F;
        onChanged();
        return this;
      }

      private float cW2_ ;
      /**
       * <code>float CW2 = 150;</code>
       */
      public float getCW2() {
        return cW2_;
      }
      /**
       * <code>float CW2 = 150;</code>
       */
      public Builder setCW2(float value) {
        
        cW2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float CW2 = 150;</code>
       */
      public Builder clearCW2() {
        
        cW2_ = 0F;
        onChanged();
        return this;
      }

      private float cW3_ ;
      /**
       * <code>float CW3 = 151;</code>
       */
      public float getCW3() {
        return cW3_;
      }
      /**
       * <code>float CW3 = 151;</code>
       */
      public Builder setCW3(float value) {
        
        cW3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float CW3 = 151;</code>
       */
      public Builder clearCW3() {
        
        cW3_ = 0F;
        onChanged();
        return this;
      }

      private float cW4_ ;
      /**
       * <code>float CW4 = 152;</code>
       */
      public float getCW4() {
        return cW4_;
      }
      /**
       * <code>float CW4 = 152;</code>
       */
      public Builder setCW4(float value) {
        
        cW4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float CW4 = 152;</code>
       */
      public Builder clearCW4() {
        
        cW4_ = 0F;
        onChanged();
        return this;
      }

      private long axAyAz_ ;
      /**
       * <code>uint64 AxAyAz = 153;</code>
       */
      public long getAxAyAz() {
        return axAyAz_;
      }
      /**
       * <code>uint64 AxAyAz = 153;</code>
       */
      public Builder setAxAyAz(long value) {
        
        axAyAz_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 AxAyAz = 153;</code>
       */
      public Builder clearAxAyAz() {
        
        axAyAz_ = 0L;
        onChanged();
        return this;
      }

      private long yawPitchRoll_ ;
      /**
       * <code>uint64 YawPitchRoll = 154;</code>
       */
      public long getYawPitchRoll() {
        return yawPitchRoll_;
      }
      /**
       * <code>uint64 YawPitchRoll = 154;</code>
       */
      public Builder setYawPitchRoll(long value) {
        
        yawPitchRoll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 YawPitchRoll = 154;</code>
       */
      public Builder clearYawPitchRoll() {
        
        yawPitchRoll_ = 0L;
        onChanged();
        return this;
      }

      private float busVoltage_ ;
      /**
       * <code>float busVoltage = 155;</code>
       */
      public float getBusVoltage() {
        return busVoltage_;
      }
      /**
       * <code>float busVoltage = 155;</code>
       */
      public Builder setBusVoltage(float value) {
        
        busVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float busVoltage = 155;</code>
       */
      public Builder clearBusVoltage() {
        
        busVoltage_ = 0F;
        onChanged();
        return this;
      }

      private int mcuMicsStatus_ ;
      /**
       * <code>uint32 mcuMicsStatus = 156;</code>
       */
      public int getMcuMicsStatus() {
        return mcuMicsStatus_;
      }
      /**
       * <code>uint32 mcuMicsStatus = 156;</code>
       */
      public Builder setMcuMicsStatus(int value) {
        
        mcuMicsStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 mcuMicsStatus = 156;</code>
       */
      public Builder clearMcuMicsStatus() {
        
        mcuMicsStatus_ = 0;
        onChanged();
        return this;
      }

      private float throttleIqCmd_ ;
      /**
       * <code>float throttle_iq_cmd = 157;</code>
       */
      public float getThrottleIqCmd() {
        return throttleIqCmd_;
      }
      /**
       * <code>float throttle_iq_cmd = 157;</code>
       */
      public Builder setThrottleIqCmd(float value) {
        
        throttleIqCmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float throttle_iq_cmd = 157;</code>
       */
      public Builder clearThrottleIqCmd() {
        
        throttleIqCmd_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DeviceDataV3)
    }

    // @@protoc_insertion_point(class_scope:DeviceDataV3)
    private static final OtcV3R5APlus.DeviceDataV3 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OtcV3R5APlus.DeviceDataV3();
    }

    public static OtcV3R5APlus.DeviceDataV3 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DeviceDataV3>
        PARSER = new com.google.protobuf.AbstractParser<DeviceDataV3>() {
      @java.lang.Override
      public DeviceDataV3 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeviceDataV3(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DeviceDataV3> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DeviceDataV3> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public OtcV3R5APlus.DeviceDataV3 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DeviceAlertsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DeviceAlerts)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 sequence = 1;</code>
     */
    int getSequence();

    /**
     * <code>uint64 timestamp = 2;</code>
     */
    long getTimestamp();

    /**
     * <code>uint32 Type = 3;</code>
     */
    int getType();

    /**
     * <code>uint32 Subtype = 4;</code>
     */
    int getSubtype();

    /**
     * <code>string OptionalInfo = 5;</code>
     */
    java.lang.String getOptionalInfo();
    /**
     * <code>string OptionalInfo = 5;</code>
     */
    com.google.protobuf.ByteString
        getOptionalInfoBytes();
  }
  /**
   * Protobuf type {@code DeviceAlerts}
   */
  public  static final class DeviceAlerts extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DeviceAlerts)
      DeviceAlertsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DeviceAlerts.newBuilder() to construct.
    private DeviceAlerts(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DeviceAlerts() {
      optionalInfo_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DeviceAlerts(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              sequence_ = input.readUInt32();
              break;
            }
            case 16: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 24: {

              type_ = input.readUInt32();
              break;
            }
            case 32: {

              subtype_ = input.readUInt32();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              optionalInfo_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return OtcV3R5APlus.internal_static_DeviceAlerts_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return OtcV3R5APlus.internal_static_DeviceAlerts_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              OtcV3R5APlus.DeviceAlerts.class, OtcV3R5APlus.DeviceAlerts.Builder.class);
    }

    public static final int SEQUENCE_FIELD_NUMBER = 1;
    private int sequence_;
    /**
     * <code>uint32 sequence = 1;</code>
     */
    public int getSequence() {
      return sequence_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private long timestamp_;
    /**
     * <code>uint64 timestamp = 2;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>uint32 Type = 3;</code>
     */
    public int getType() {
      return type_;
    }

    public static final int SUBTYPE_FIELD_NUMBER = 4;
    private int subtype_;
    /**
     * <code>uint32 Subtype = 4;</code>
     */
    public int getSubtype() {
      return subtype_;
    }

    public static final int OPTIONALINFO_FIELD_NUMBER = 5;
    private volatile java.lang.Object optionalInfo_;
    /**
     * <code>string OptionalInfo = 5;</code>
     */
    public java.lang.String getOptionalInfo() {
      java.lang.Object ref = optionalInfo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        optionalInfo_ = s;
        return s;
      }
    }
    /**
     * <code>string OptionalInfo = 5;</code>
     */
    public com.google.protobuf.ByteString
        getOptionalInfoBytes() {
      java.lang.Object ref = optionalInfo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        optionalInfo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (sequence_ != 0) {
        output.writeUInt32(1, sequence_);
      }
      if (timestamp_ != 0L) {
        output.writeUInt64(2, timestamp_);
      }
      if (type_ != 0) {
        output.writeUInt32(3, type_);
      }
      if (subtype_ != 0) {
        output.writeUInt32(4, subtype_);
      }
      if (!getOptionalInfoBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, optionalInfo_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (sequence_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sequence_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, timestamp_);
      }
      if (type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, type_);
      }
      if (subtype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, subtype_);
      }
      if (!getOptionalInfoBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, optionalInfo_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof OtcV3R5APlus.DeviceAlerts)) {
        return super.equals(obj);
      }
      OtcV3R5APlus.DeviceAlerts other = (OtcV3R5APlus.DeviceAlerts) obj;

      if (getSequence()
          != other.getSequence()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (getType()
          != other.getType()) return false;
      if (getSubtype()
          != other.getSubtype()) return false;
      if (!getOptionalInfo()
          .equals(other.getOptionalInfo())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSequence();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType();
      hash = (37 * hash) + SUBTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getSubtype();
      hash = (37 * hash) + OPTIONALINFO_FIELD_NUMBER;
      hash = (53 * hash) + getOptionalInfo().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceAlerts parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceAlerts parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.DeviceAlerts parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(OtcV3R5APlus.DeviceAlerts prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DeviceAlerts}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DeviceAlerts)
        OtcV3R5APlus.DeviceAlertsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return OtcV3R5APlus.internal_static_DeviceAlerts_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return OtcV3R5APlus.internal_static_DeviceAlerts_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                OtcV3R5APlus.DeviceAlerts.class, OtcV3R5APlus.DeviceAlerts.Builder.class);
      }

      // Construct using OtcV3R5APlus.DeviceAlerts.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sequence_ = 0;

        timestamp_ = 0L;

        type_ = 0;

        subtype_ = 0;

        optionalInfo_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return OtcV3R5APlus.internal_static_DeviceAlerts_descriptor;
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceAlerts getDefaultInstanceForType() {
        return OtcV3R5APlus.DeviceAlerts.getDefaultInstance();
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceAlerts build() {
        OtcV3R5APlus.DeviceAlerts result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public OtcV3R5APlus.DeviceAlerts buildPartial() {
        OtcV3R5APlus.DeviceAlerts result = new OtcV3R5APlus.DeviceAlerts(this);
        result.sequence_ = sequence_;
        result.timestamp_ = timestamp_;
        result.type_ = type_;
        result.subtype_ = subtype_;
        result.optionalInfo_ = optionalInfo_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof OtcV3R5APlus.DeviceAlerts) {
          return mergeFrom((OtcV3R5APlus.DeviceAlerts)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(OtcV3R5APlus.DeviceAlerts other) {
        if (other == OtcV3R5APlus.DeviceAlerts.getDefaultInstance()) return this;
        if (other.getSequence() != 0) {
          setSequence(other.getSequence());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getType() != 0) {
          setType(other.getType());
        }
        if (other.getSubtype() != 0) {
          setSubtype(other.getSubtype());
        }
        if (!other.getOptionalInfo().isEmpty()) {
          optionalInfo_ = other.optionalInfo_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        OtcV3R5APlus.DeviceAlerts parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (OtcV3R5APlus.DeviceAlerts) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int sequence_ ;
      /**
       * <code>uint32 sequence = 1;</code>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>uint32 sequence = 1;</code>
       */
      public Builder setSequence(int value) {
        
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 sequence = 1;</code>
       */
      public Builder clearSequence() {
        
        sequence_ = 0;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>uint64 timestamp = 2;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>uint64 timestamp = 2;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 timestamp = 2;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private int type_ ;
      /**
       * <code>uint32 Type = 3;</code>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>uint32 Type = 3;</code>
       */
      public Builder setType(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 Type = 3;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private int subtype_ ;
      /**
       * <code>uint32 Subtype = 4;</code>
       */
      public int getSubtype() {
        return subtype_;
      }
      /**
       * <code>uint32 Subtype = 4;</code>
       */
      public Builder setSubtype(int value) {
        
        subtype_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 Subtype = 4;</code>
       */
      public Builder clearSubtype() {
        
        subtype_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object optionalInfo_ = "";
      /**
       * <code>string OptionalInfo = 5;</code>
       */
      public java.lang.String getOptionalInfo() {
        java.lang.Object ref = optionalInfo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          optionalInfo_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string OptionalInfo = 5;</code>
       */
      public com.google.protobuf.ByteString
          getOptionalInfoBytes() {
        java.lang.Object ref = optionalInfo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          optionalInfo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string OptionalInfo = 5;</code>
       */
      public Builder setOptionalInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        optionalInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string OptionalInfo = 5;</code>
       */
      public Builder clearOptionalInfo() {
        
        optionalInfo_ = getDefaultInstance().getOptionalInfo();
        onChanged();
        return this;
      }
      /**
       * <code>string OptionalInfo = 5;</code>
       */
      public Builder setOptionalInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        optionalInfo_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DeviceAlerts)
    }

    // @@protoc_insertion_point(class_scope:DeviceAlerts)
    private static final OtcV3R5APlus.DeviceAlerts DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OtcV3R5APlus.DeviceAlerts();
    }

    public static OtcV3R5APlus.DeviceAlerts getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DeviceAlerts>
        PARSER = new com.google.protobuf.AbstractParser<DeviceAlerts>() {
      @java.lang.Override
      public DeviceAlerts parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeviceAlerts(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DeviceAlerts> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DeviceAlerts> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public OtcV3R5APlus.DeviceAlerts getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HKeyDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:HKeyData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 HKEY_MSB = 1;</code>
     */
    long getHKEYMSB();

    /**
     * <code>uint64 HKEY_LSB = 2;</code>
     */
    long getHKEYLSB();

    /**
     * <code>uint64 timestamp = 3;</code>
     */
    long getTimestamp();
  }
  /**
   * <pre>
   *message ImuData1 {
   *int64 AxAyAz = 1;
   *int64 YawPitchRollTimeOffest = 2;
   *}
   *message ImuDataList1 {
   *repeated ImuData1 imuData = 1;
   *uint32 sequence = 2;
   *uint64 timestamp = 3;
   *}
   *message ExtImuData {
   *int64 AxAyAz = 1;
   *int64 YawPitchRollTimeOffest = 2;
   *}
   *message ExtImuDataList {
   *repeated ExtImuData imuData = 1;
   *uint32 sequence = 2;
   *uint64 timestamp = 3;
   *}
   * </pre>
   *
   * Protobuf type {@code HKeyData}
   */
  public  static final class HKeyData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:HKeyData)
      HKeyDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HKeyData.newBuilder() to construct.
    private HKeyData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HKeyData() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HKeyData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hKEYMSB_ = input.readUInt64();
              break;
            }
            case 16: {

              hKEYLSB_ = input.readUInt64();
              break;
            }
            case 24: {

              timestamp_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return OtcV3R5APlus.internal_static_HKeyData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return OtcV3R5APlus.internal_static_HKeyData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              OtcV3R5APlus.HKeyData.class, OtcV3R5APlus.HKeyData.Builder.class);
    }

    public static final int HKEY_MSB_FIELD_NUMBER = 1;
    private long hKEYMSB_;
    /**
     * <code>uint64 HKEY_MSB = 1;</code>
     */
    public long getHKEYMSB() {
      return hKEYMSB_;
    }

    public static final int HKEY_LSB_FIELD_NUMBER = 2;
    private long hKEYLSB_;
    /**
     * <code>uint64 HKEY_LSB = 2;</code>
     */
    public long getHKEYLSB() {
      return hKEYLSB_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    /**
     * <code>uint64 timestamp = 3;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hKEYMSB_ != 0L) {
        output.writeUInt64(1, hKEYMSB_);
      }
      if (hKEYLSB_ != 0L) {
        output.writeUInt64(2, hKEYLSB_);
      }
      if (timestamp_ != 0L) {
        output.writeUInt64(3, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hKEYMSB_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, hKEYMSB_);
      }
      if (hKEYLSB_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, hKEYLSB_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof OtcV3R5APlus.HKeyData)) {
        return super.equals(obj);
      }
      OtcV3R5APlus.HKeyData other = (OtcV3R5APlus.HKeyData) obj;

      if (getHKEYMSB()
          != other.getHKEYMSB()) return false;
      if (getHKEYLSB()
          != other.getHKEYLSB()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HKEY_MSB_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getHKEYMSB());
      hash = (37 * hash) + HKEY_LSB_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getHKEYLSB());
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static OtcV3R5APlus.HKeyData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.HKeyData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.HKeyData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static OtcV3R5APlus.HKeyData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(OtcV3R5APlus.HKeyData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *message ImuData1 {
     *int64 AxAyAz = 1;
     *int64 YawPitchRollTimeOffest = 2;
     *}
     *message ImuDataList1 {
     *repeated ImuData1 imuData = 1;
     *uint32 sequence = 2;
     *uint64 timestamp = 3;
     *}
     *message ExtImuData {
     *int64 AxAyAz = 1;
     *int64 YawPitchRollTimeOffest = 2;
     *}
     *message ExtImuDataList {
     *repeated ExtImuData imuData = 1;
     *uint32 sequence = 2;
     *uint64 timestamp = 3;
     *}
     * </pre>
     *
     * Protobuf type {@code HKeyData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:HKeyData)
        OtcV3R5APlus.HKeyDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return OtcV3R5APlus.internal_static_HKeyData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return OtcV3R5APlus.internal_static_HKeyData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                OtcV3R5APlus.HKeyData.class, OtcV3R5APlus.HKeyData.Builder.class);
      }

      // Construct using OtcV3R5APlus.HKeyData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hKEYMSB_ = 0L;

        hKEYLSB_ = 0L;

        timestamp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return OtcV3R5APlus.internal_static_HKeyData_descriptor;
      }

      @java.lang.Override
      public OtcV3R5APlus.HKeyData getDefaultInstanceForType() {
        return OtcV3R5APlus.HKeyData.getDefaultInstance();
      }

      @java.lang.Override
      public OtcV3R5APlus.HKeyData build() {
        OtcV3R5APlus.HKeyData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public OtcV3R5APlus.HKeyData buildPartial() {
        OtcV3R5APlus.HKeyData result = new OtcV3R5APlus.HKeyData(this);
        result.hKEYMSB_ = hKEYMSB_;
        result.hKEYLSB_ = hKEYLSB_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof OtcV3R5APlus.HKeyData) {
          return mergeFrom((OtcV3R5APlus.HKeyData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(OtcV3R5APlus.HKeyData other) {
        if (other == OtcV3R5APlus.HKeyData.getDefaultInstance()) return this;
        if (other.getHKEYMSB() != 0L) {
          setHKEYMSB(other.getHKEYMSB());
        }
        if (other.getHKEYLSB() != 0L) {
          setHKEYLSB(other.getHKEYLSB());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        OtcV3R5APlus.HKeyData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (OtcV3R5APlus.HKeyData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long hKEYMSB_ ;
      /**
       * <code>uint64 HKEY_MSB = 1;</code>
       */
      public long getHKEYMSB() {
        return hKEYMSB_;
      }
      /**
       * <code>uint64 HKEY_MSB = 1;</code>
       */
      public Builder setHKEYMSB(long value) {
        
        hKEYMSB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 HKEY_MSB = 1;</code>
       */
      public Builder clearHKEYMSB() {
        
        hKEYMSB_ = 0L;
        onChanged();
        return this;
      }

      private long hKEYLSB_ ;
      /**
       * <code>uint64 HKEY_LSB = 2;</code>
       */
      public long getHKEYLSB() {
        return hKEYLSB_;
      }
      /**
       * <code>uint64 HKEY_LSB = 2;</code>
       */
      public Builder setHKEYLSB(long value) {
        
        hKEYLSB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 HKEY_LSB = 2;</code>
       */
      public Builder clearHKEYLSB() {
        
        hKEYLSB_ = 0L;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>uint64 timestamp = 3;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>uint64 timestamp = 3;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 timestamp = 3;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:HKeyData)
    }

    // @@protoc_insertion_point(class_scope:HKeyData)
    private static final OtcV3R5APlus.HKeyData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OtcV3R5APlus.HKeyData();
    }

    public static OtcV3R5APlus.HKeyData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HKeyData>
        PARSER = new com.google.protobuf.AbstractParser<HKeyData>() {
      @java.lang.Override
      public HKeyData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HKeyData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HKeyData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HKeyData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public OtcV3R5APlus.HKeyData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DeviceDataV3_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DeviceDataV3_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DeviceAlerts_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DeviceAlerts_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_HKeyData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_HKeyData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026otc_v3_r5_a_plus.proto\"\247\033\n\014DeviceDataV" +
      "3\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010sequence\030\002 \001(\r\022\025" +
      "\n\rignitionState\030\003 \001(\010\022\020\n\010odometer\030\004 \001(\002\022" +
      "\013\n\003rpm\030\005 \001(\r\022\r\n\005speed\030\006 \001(\r\022\013\n\003lat\030\007 \001(\002" +
      "\022\013\n\003lng\030\010 \001(\002\022\013\n\003alt\030\t \001(\002\022\020\n\010gpsSpeed\030\n" +
      " \001(\002\022\021\n\tgpsCourse\030\013 \001(\002\022\017\n\007gpsHDOP\030\014 \001(\002" +
      "\022\017\n\007gpsVDOP\030\r \001(\002\022\017\n\007gpsPDOP\030\016 \001(\002\022\030\n\020gp" +
      "sFixModeStatus\030\017 \001(\r\022\026\n\016satellitesUsed\030\020" +
      " \001(\r\022\r\n\005nwLAC\030\021 \001(\r\022\r\n\005nwCID\030\022 \001(\r\022\014\n\004IM" +
      "SI\030\023 \001(\t\022\014\n\004IMEI\030\024 \001(\t\022\014\n\004RSSI\030\025 \001(\r\022\027\n\017" +
      "networkOperator\030\026 \001(\t\022\n\n\002T1\030\027 \001(\r\022\n\n\002T2\030" +
      "\030 \001(\r\022\n\n\002T3\030\031 \001(\r\022\031\n\021auxBatteryVoltage\030\032" +
      " \001(\r\022\034\n\024auxBatteryPercentage\030\033 \001(\r\022\021\n\thw" +
      "Version\030\034 \001(\r\022\021\n\tfwVersion\030\035 \001(\r\022\022\n\nsdCa" +
      "rdSize\030\036 \001(\r\022\024\n\014sdCardStatus\030\037 \001(\010\022\024\n\014mo" +
      "torCurrent\030  \001(\r\022\020\n\010motorRPM\030! \001(\r\022\030\n\020mo" +
      "torTemperature\030\" \001(\r\022\"\n\032motorControllerT" +
      "emperature\030# \001(\r\022\027\n\017motorStatusInfo\030$ \001(" +
      "\r\022\026\n\016motorErrorInfo\030% \001(\r\022\021\n\tbatteryID\030&" +
      " \001(\004\022\026\n\016batteryVoltage\030\' \001(\r\022\026\n\016batteryC" +
      "urrent\030( \001(\005\022\022\n\nbatterySoC\030) \001(\r\022\022\n\nbatt" +
      "erySoH\030* \001(\r\022\022\n\nbatterySOP\030+ \001(\r\022\032\n\022batt" +
      "eryCellVoltage\030, \001(\r\022\031\n\021batteryModuleTem" +
      "p\030- \001(\r\022\033\n\023batteryPDU_BMS_Temp\030. \001(\r\022\031\n\021" +
      "batteryCellBalMap\030/ \001(\r\022\034\n\024batteryEquCyc" +
      "leCount\0300 \001(\r\022 \n\030batteryLifetimeChargeCa" +
      "p\0301 \001(\r\022\"\n\032batteryLifetimeDishargeCap\0302 " +
      "\001(\r\022\030\n\020batteryErrorInfo\0303 \001(\r\022\032\n\022battery" +
      "WarningInfo\0304 \001(\r\022\023\n\013batteryID_2\0305 \001(\004\022\030" +
      "\n\020batteryVoltage_2\0306 \001(\r\022\030\n\020batteryCurre" +
      "nt_2\0307 \001(\005\022\024\n\014batterySoC_2\0308 \001(\r\022\024\n\014batt" +
      "erySoH_2\0309 \001(\r\022\024\n\014batterySOP_2\030: \001(\r\022\034\n\024" +
      "batteryCellVoltage_2\030; \001(\r\022\033\n\023batteryMod" +
      "uleTemp_2\030< \001(\r\022\035\n\025batteryPDU_BMS_Temp_2" +
      "\030= \001(\r\022\033\n\023batteryCellBalMap_2\030> \001(\r\022\036\n\026b" +
      "atteryEquCycleCount_2\030? \001(\r\022\"\n\032batteryLi" +
      "fetimeChargeCap_2\030@ \001(\r\022$\n\034batteryLifeti" +
      "meDishargeCap_2\030A \001(\r\022\032\n\022batteryErrorInf" +
      "o_2\030B \001(\r\022\034\n\024batteryWarningInfo_2\030C \001(\r\022" +
      "\024\n\014VehicleState\030N \001(\r\022\013\n\003DTE\030O \001(\r\022$\n\034Di" +
      "splayController_Hw_version\030P \001(\r\022$\n\034Disp" +
      "layController_Sw_version\030Q \001(\r\022\024\n\014Alerts" +
      "Status\030R \001(\r\022\033\n\023DiagnosticErrorCode\030S \001(" +
      "\r\022\031\n\021batteryStatusInfo\030T \001(\r\022\026\n\016nwModeMi" +
      "smatch\030U \001(\010\022\027\n\017BmsWarnDetected\030V \001(\010\022\032\n" +
      "\022testerDischargeReq\030W \001(\010\022\027\n\017testerCharg" +
      "eReq\030X \001(\010\022\030\n\020batteryBalStatus\030Y \001(\010\022\027\n\017" +
      "batteryAuthData\030Z \001(\r\022\033\n\023batteryFullCapa" +
      "city\030[ \001(\r\022\030\n\020maxChargeCurrent\030\\ \001(\005\022\030\n\020" +
      "maxChargeVoltage\030] \001(\r\022\033\n\023maxDischargeCu" +
      "rrent\030^ \001(\r\022\020\n\010bmsState\030_ \001(\r\022\020\n\010cellTem" +
      "p\030` \001(\r\022\025\n\rbmsFWInitVrsn\030a \001(\r\022\024\n\014bmsFwS" +
      "APVrsn\030b \001(\r\022\022\n\nbmsCFGVrsn\030c \001(\r\022\022\n\nbmsD" +
      "BCVrsn\030d \001(\r\022\026\n\016tcuCustmerCode\030e \001(\r\022\021\n\t" +
      "tcuSWVrsn\030f \001(\r\022\033\n\023cycleChargeCapacity\030g" +
      " \001(\r\022\036\n\026cycleDischargeCapacity\030h \001(\r\022\031\n\021" +
      "availableCapacity\030i \001(\r\022\027\n\017availableEner" +
      "gy\030j \001(\r\022\025\n\rbatteryInfo_1\030k \001(\r\022\025\n\rbatte" +
      "ryInfo_2\030l \001(\r\022\025\n\rbatteryInfo_3\030m \001(\r\022\025\n" +
      "\rbatteryInfo_4\030n \001(\r\022\025\n\rbatteryInfo_5\030o " +
      "\001(\r\022\022\n\ncanTimeOut\030p \001(\010\022\017\n\007bmsTime\030q \001(\r" +
      "\022\017\n\007tcuTime\030r \001(\r\022\033\n\023batteryStatusInfo_2" +
      "\030s \001(\r\022\030\n\020nwModeMismatch_2\030t \001(\010\022\031\n\021BmsW" +
      "arnDetected_2\030u \001(\010\022\034\n\024testerDischargeRe" +
      "q_2\030v \001(\010\022\031\n\021testerChargeReq_2\030w \001(\010\022\032\n\022" +
      "batteryBalStatus_2\030x \001(\010\022\031\n\021batteryAuthD" +
      "ata_2\030y \001(\r\022\035\n\025batteryFullCapacity_2\030z \001" +
      "(\r\022\032\n\022maxChargeCurrent_2\030{ \001(\005\022\032\n\022maxCha" +
      "rgeVoltage_2\030| \001(\r\022\035\n\025maxDischargeCurren" +
      "t_2\030} \001(\r\022\022\n\nbmsState_2\030~ \001(\r\022\022\n\ncellTem" +
      "p_2\030\177 \001(\r\022\030\n\017bmsFWInitVrsn_2\030\200\001 \001(\r\022\027\n\016b" +
      "msFwSAPVrsn_2\030\201\001 \001(\r\022\025\n\014bmsCFGVrsn_2\030\202\001 " +
      "\001(\r\022\025\n\014bmsDBCVrsn_2\030\203\001 \001(\r\022\031\n\020tcuCustmer" +
      "Code_2\030\204\001 \001(\r\022\024\n\013tcuSWVrsn_2\030\205\001 \001(\r\022\036\n\025c" +
      "ycleChargeCapacity_2\030\206\001 \001(\r\022!\n\030cycleDisc" +
      "hargeCapacity_2\030\207\001 \001(\r\022\034\n\023availableCapac" +
      "ity_2\030\210\001 \001(\r\022\032\n\021availableEnergy_2\030\211\001 \001(\r" +
      "\022\027\n\016battery2Info_1\030\212\001 \001(\r\022\027\n\016battery2Inf" +
      "o_2\030\213\001 \001(\r\022\027\n\016battery2Info_3\030\214\001 \001(\r\022\027\n\016b" +
      "attery2Info_4\030\215\001 \001(\r\022\027\n\016battery2Info_5\030\216" +
      "\001 \001(\r\022\025\n\014canTimeOut_2\030\217\001 \001(\010\022\022\n\tbmsTime_" +
      "2\030\220\001 \001(\r\022\022\n\ttcuTime_2\030\221\001 \001(\r\022\035\n\024remoteIm" +
      "mobilization\030\222\001 \001(\010\022\027\n\016bootLockStatus\030\223\001" +
      " \001(\010\022\035\n\024IgnitionEnableStatus\030\224\001 \001(\010\022\014\n\003C" +
      "W1\030\225\001 \001(\002\022\014\n\003CW2\030\226\001 \001(\002\022\014\n\003CW3\030\227\001 \001(\002\022\014\n" +
      "\003CW4\030\230\001 \001(\002\022\017\n\006AxAyAz\030\231\001 \001(\004\022\025\n\014YawPitch" +
      "Roll\030\232\001 \001(\004\022\023\n\nbusVoltage\030\233\001 \001(\002\022\026\n\rmcuM" +
      "icsStatus\030\234\001 \001(\r\022\030\n\017throttle_iq_cmd\030\235\001 \001" +
      "(\002\"h\n\014DeviceAlerts\022\020\n\010sequence\030\001 \001(\r\022\021\n\t" +
      "timestamp\030\002 \001(\004\022\014\n\004Type\030\003 \001(\r\022\017\n\007Subtype" +
      "\030\004 \001(\r\022\024\n\014OptionalInfo\030\005 \001(\t\"A\n\010HKeyData" +
      "\022\020\n\010HKEY_MSB\030\001 \001(\004\022\020\n\010HKEY_LSB\030\002 \001(\004\022\021\n\t" +
      "timestamp\030\003 \001(\004B\022Z\020.;device_data_v3b\006pro" +
      "to3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_DeviceDataV3_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_DeviceDataV3_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DeviceDataV3_descriptor,
        new java.lang.String[] { "Timestamp", "Sequence", "IgnitionState", "Odometer", "Rpm", "Speed", "Lat", "Lng", "Alt", "GpsSpeed", "GpsCourse", "GpsHDOP", "GpsVDOP", "GpsPDOP", "GpsFixModeStatus", "SatellitesUsed", "NwLAC", "NwCID", "IMSI", "IMEI", "RSSI", "NetworkOperator", "T1", "T2", "T3", "AuxBatteryVoltage", "AuxBatteryPercentage", "HwVersion", "FwVersion", "SdCardSize", "SdCardStatus", "MotorCurrent", "MotorRPM", "MotorTemperature", "MotorControllerTemperature", "MotorStatusInfo", "MotorErrorInfo", "BatteryID", "BatteryVoltage", "BatteryCurrent", "BatterySoC", "BatterySoH", "BatterySOP", "BatteryCellVoltage", "BatteryModuleTemp", "BatteryPDUBMSTemp", "BatteryCellBalMap", "BatteryEquCycleCount", "BatteryLifetimeChargeCap", "BatteryLifetimeDishargeCap", "BatteryErrorInfo", "BatteryWarningInfo", "BatteryID2", "BatteryVoltage2", "BatteryCurrent2", "BatterySoC2", "BatterySoH2", "BatterySOP2", "BatteryCellVoltage2", "BatteryModuleTemp2", "BatteryPDUBMSTemp2", "BatteryCellBalMap2", "BatteryEquCycleCount2", "BatteryLifetimeChargeCap2", "BatteryLifetimeDishargeCap2", "BatteryErrorInfo2", "BatteryWarningInfo2", "VehicleState", "DTE", "DisplayControllerHwVersion", "DisplayControllerSwVersion", "AlertsStatus", "DiagnosticErrorCode", "BatteryStatusInfo", "NwModeMismatch", "BmsWarnDetected", "TesterDischargeReq", "TesterChargeReq", "BatteryBalStatus", "BatteryAuthData", "BatteryFullCapacity", "MaxChargeCurrent", "MaxChargeVoltage", "MaxDischargeCurrent", "BmsState", "CellTemp", "BmsFWInitVrsn", "BmsFwSAPVrsn", "BmsCFGVrsn", "BmsDBCVrsn", "TcuCustmerCode", "TcuSWVrsn", "CycleChargeCapacity", "CycleDischargeCapacity", "AvailableCapacity", "AvailableEnergy", "BatteryInfo1", "BatteryInfo2", "BatteryInfo3", "BatteryInfo4", "BatteryInfo5", "CanTimeOut", "BmsTime", "TcuTime", "BatteryStatusInfo2", "NwModeMismatch2", "BmsWarnDetected2", "TesterDischargeReq2", "TesterChargeReq2", "BatteryBalStatus2", "BatteryAuthData2", "BatteryFullCapacity2", "MaxChargeCurrent2", "MaxChargeVoltage2", "MaxDischargeCurrent2", "BmsState2", "CellTemp2", "BmsFWInitVrsn2", "BmsFwSAPVrsn2", "BmsCFGVrsn2", "BmsDBCVrsn2", "TcuCustmerCode2", "TcuSWVrsn2", "CycleChargeCapacity2", "CycleDischargeCapacity2", "AvailableCapacity2", "AvailableEnergy2", "Battery2Info1", "Battery2Info2", "Battery2Info3", "Battery2Info4", "Battery2Info5", "CanTimeOut2", "BmsTime2", "TcuTime2", "RemoteImmobilization", "BootLockStatus", "IgnitionEnableStatus", "CW1", "CW2", "CW3", "CW4", "AxAyAz", "YawPitchRoll", "BusVoltage", "McuMicsStatus", "ThrottleIqCmd", });
    internal_static_DeviceAlerts_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_DeviceAlerts_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DeviceAlerts_descriptor,
        new java.lang.String[] { "Sequence", "Timestamp", "Type", "Subtype", "OptionalInfo", });
    internal_static_HKeyData_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_HKeyData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_HKeyData_descriptor,
        new java.lang.String[] { "HKEYMSB", "HKEYLSB", "Timestamp", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
